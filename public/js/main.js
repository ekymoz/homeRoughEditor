/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n  exportFloorplan\n} = __webpack_require__(/*! ./scoped */ \"./src/scoped.js\");\nconst MIN_ZOOM = 0;\nconst MAX_ZOOM = 100;\nfunction Application() {\n  // REVIEW: Which of these are actually used in the application?\n  this.WALLS = [];\n  this.OBJDATA = [];\n  this.ROOM = [];\n  this.HISTORY = [];\n  this.wallSize = 20;\n  this.partitionSize = 8;\n  this.visibleLayers = new Set(['walls']);\n  this.activeLayer = 'walls';\n  this.drag = 'off';\n  this.action = 0;\n  this.magnetic = 0;\n  this.construc = 0;\n  this.Rcirclebinder = 8;\n  this.mode = 'select_mode';\n  this.modeOption;\n  this.linElement = $('#lin');\n  this.taille_w = this.linElement.width();\n  this.taille_h = this.linElement.height();\n  this.offset = this.linElement.offset();\n  this.grid = 20;\n  // showRib = true\n  this.showArea = true;\n  this.meter = 60;\n  this.grid_snap = 'off';\n  this.colorbackground = '#ffffff';\n  this.colorline = '#fff';\n  this.colorroom = '#f0daaf';\n  this.colorWall = '#666';\n  this.pox = 0;\n  this.poy = 0;\n  this.segment = 0;\n  this.xpath = 0;\n  this.ypath = 0;\n  this.tactile = false;\n  this.width_viewbox = this.taille_w;\n  this.height_viewbox = this.taille_h;\n  this.ratio_viewbox = this.height_viewbox / this.width_viewbox;\n  this.originX_viewbox = 0;\n  this.originY_viewbox = 0;\n  this.sizeText = [];\n  this.showAllSizeStatus = 0;\n  this.editor = this.editorFactory();\n  this.qSVG = this.qSVGFactory();\n\n  // Used to track This is the initial zoom level\n  this.zoom = 50;\n  // The ratio the screen is scaled\n  this.scaleFactor = 1;\n}\nApplication.prototype.initialize = function () {\n  const textEditorColorBtn = document.querySelectorAll('.textEditorColor');\n  const roomColorBtn = document.querySelectorAll('.roomColor');\n  const objTrashBtn = document.querySelectorAll('.objTrash');\n  const dropdownMenu = document.querySelectorAll('.dropdown-menu li a');\n  document.getElementById('lin').setAttribute('viewBox', `${this.originX_viewbox} ${this.originY_viewbox} ${this.width_viewbox} ${this.height_viewbox}`);\n  document.getElementById('bboxTrash').addEventListener('click', () => {\n    this.binder.obj.graph.remove();\n    this.binder.graph.remove();\n    this.OBJDATA.splice(this.OBJDATA.indexOf(this.binder.obj), 1);\n    $('#objBoundingBox').hide(100);\n    $('#panel').show(200);\n    this.fonc_button('select_mode');\n    $('#boxinfo').html('Deleted object');\n    this.binder = undefined;\n    this.rib();\n  });\n  document.getElementById('lin').addEventListener('wheel', event => {\n    event.preventDefault();\n    if (event.deltaY > 0) {\n      this.zoom_maker('zoomout', 20);\n    } else {\n      this.zoom_maker('zoomin', 20);\n    }\n  });\n  document.getElementById('wallTrash').addEventListener('click', () => {\n    const wall = this.binder.wall;\n    for (const k in this.WALLS) {\n      if (isObjectsEquals(this.WALLS[k].child, wall)) {\n        this.WALLS[k].child = null;\n      }\n      if (isObjectsEquals(this.WALLS[k].parent, wall)) {\n        this.WALLS[k].parent = null;\n      }\n    }\n    this.WALLS.splice(this.WALLS.indexOf(wall), 1);\n    $('#wallTools').hide(100);\n    wall.graph.remove();\n    this.binder.graph.remove();\n    this.editor.architect(this.WALLS);\n    this.rib();\n    this.mode = 'select_mode';\n    $('#panel').show(200);\n  });\n  $('#room_mode').click(() => {\n    this.linElement.css('cursor', 'pointer');\n    $('#boxinfo').html('Config. of rooms');\n    this.fonc_button('room_mode');\n  });\n  $('#select_mode').click(() => {\n    $('#boxinfo').html('Mode \"select\"');\n    if (typeof this.binder != 'undefined') {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n    this.fonc_button('select_mode');\n  });\n  $('#line_mode').click(() => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Creation of wall(s)');\n    this.multi = 0;\n    this.action = 0;\n    // snap = this.calcul_snap(event, this.grid_snap);\n    //\n    // this.pox = snap.x;\n    // this.poy = snap.y;\n    this.fonc_button('line_mode');\n  });\n  $('#partition_mode').click(() => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Creation of thin wall(s)');\n    this.multi = 0;\n    this.fonc_button('partition_mode');\n  });\n  $('#rect_mode').click(() => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Room(s) creation');\n    this.fonc_button('rect_mode');\n  });\n  $('.door').click(e => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Add a door');\n    $('#door_list').hide(200);\n    this.fonc_button('door_mode', e.currentTarget.getAttribute('id'));\n  });\n  $('.electrical').click(e => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Add electrical');\n    $('#electrical_list').hide(200);\n    this.fonc_button('electrical_mode', e.currentTarget.getAttribute('id'));\n  });\n  $('.network').click(e => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Add network');\n    $('#network_list').hide(200);\n    this.fonc_button('network_mode', e.currentTarget.getAttribute('id'));\n  });\n  $('.window').click(e => {\n    this.linElement.css('cursor', 'crosshair');\n    $('#boxinfo').html('Add a window');\n    $('#door_list').hide(200);\n    $('#window_list').hide(200);\n    this.fonc_button('door_mode', e.currentTarget.getAttribute('id'));\n  });\n  $('#node_mode').click(() => {\n    $('#boxinfo').html('Cut a wall<br/><span style=\"font-size:0.7em\">Warning : Cutting the wall of a room can cancel its ' + 'configuration</span>');\n    this.fonc_button('node_mode');\n  });\n  $('#text_mode').click(() => {\n    $('#boxinfo').html('Add text<br/><span style=\"font-size:0.7em\">Place the cursor to the desired location, then ' + 'type your text.</span>');\n    this.fonc_button('text_mode');\n  });\n\n  // Window Event Listeners\n  window.addEventListener('resize', event => {\n    this.width_viewbox = $('#lin').width();\n    this.height_viewbox = $('#lin').height();\n    document.getElementById('lin').setAttribute('viewBox', `${this.originX_viewbox} ${this.originY_viewbox} ${this.width_viewbox} ${this.height_viewbox}`);\n  });\n  window.addEventListener('load', () => {\n    if (localStorage.getItem('history')) {\n      const historyTemp = JSON.parse(localStorage.getItem('history'));\n      this.load(historyTemp.length - 1, 'boot');\n      this.save('boot');\n    }\n  });\n  document.addEventListener('keydown', event => {\n    if (this.mode === 'text_mode') {\n      return;\n    }\n    switch (event.keyCode) {\n      case 37:\n        // left arrow\n        this.zoom_maker('zoomleft', 100, 30);\n        break;\n      case 38:\n        // up arrow\n        this.zoom_maker('zoomtop', 100, 30);\n        break;\n      case 39:\n        // right arrow\n        this.zoom_maker('zoomright', 100, 30);\n        break;\n      case 40:\n        // down arrow\n        this.zoom_maker('zoombottom', 100, 30);\n        break;\n      case 107:\n        // +\n        this.zoom_maker('zoomin', 20, 50);\n        break;\n      case 109:\n        // -\n        this.zoom_maker('zoomout', 20, 50);\n        break;\n    }\n  });\n  document.querySelector('#lin').addEventListener('mousedown', this.mouseDownHandler.bind(this), true);\n  document.querySelector('#lin').addEventListener('mousemove', this.mouseMoveHandler.bind(this), true);\n  document.querySelector('#lin').addEventListener('mouseup', this.mouseUpHandler.bind(this));\n\n  // REVIEW: What does this do?\n  document.querySelector('#panel').addEventListener('mousemove', function (event) {\n    if ((this.mode == 'line_mode' || this.mode == 'partition_mode') && this.action == 1) {\n      this.action = 0;\n      if (typeof this.binder != 'undefined') {\n        this.binder.remove();\n        this.binder = undefined;\n      }\n      $('#linetemp').remove();\n      $('#line_construc').remove();\n      this.lengthTemp.remove();\n      this.lengthTemp = undefined;\n    }\n  });\n  for (let k = 0; k < textEditorColorBtn.length; k++) {\n    textEditorColorBtn[k].addEventListener('click', () => {\n      document.getElementById('labelBox').style.color = this.style.color;\n    });\n  }\n  for (let k = 0; k < roomColorBtn.length; k++) {\n    roomColorBtn[k].addEventListener('click', () => {\n      const data = this.getAttribute('data-type');\n      $('#roomBackground').val(data);\n      this.binder.attr({\n        fill: 'url(#' + data + ')'\n      });\n    });\n  }\n  for (let k = 0; k < objTrashBtn.length; k++) {\n    objTrashBtn[k].addEventListener('click', () => {\n      $('#objTools').hide('100');\n      const obj = this.binder.obj;\n      obj.graph.remove();\n      this.OBJDATA.splice(this.OBJDATA.indexOf(obj), 1);\n      this.fonc_button('select_mode');\n      $('#boxinfo').html('Selection mode');\n      $('#panel').show('200');\n      this.binder.graph.remove();\n      this.binder = undefined;\n      rib();\n      $('#panel').show('300');\n    });\n  }\n  for (let k = 0; k < dropdownMenu.length; k++) {\n    dropdownMenu[k].addEventListener('click', () => {\n      const selText = this.textContent;\n      $(this).parents('.btn-group').find('.dropdown-toggle').html(selText + ' <span class=\"caret\"></span>');\n      if (selText != 'None') {\n        $('#roomName').val(selText);\n      } else {\n        $('#roomName').val('');\n      }\n    });\n  }\n};\nApplication.prototype.initHistory = function (boot = false) {\n  this.HISTORY.index = 0;\n  if (!boot && localStorage.getItem('history')) {\n    localStorage.removeItem('history');\n  }\n  if (localStorage.getItem('history') && this.boot === 'recovery') {\n    const historyTemp = JSON.parse(localStorage.getItem('history'));\n    this.load(historyTemp.length - 1, 'boot');\n    this.save('boot');\n  }\n  if (boot === 'newSquare') {\n    if (localStorage.getItem('history')) {\n      localStorage.removeItem('history');\n    }\n    this.HISTORY.push({\n      objData: [],\n      wallData: [{\n        thick: 20,\n        start: {\n          x: 540,\n          y: 194\n        },\n        end: {\n          x: 540,\n          y: 734\n        },\n        type: 'normal',\n        parent: 3,\n        child: 1,\n        angle: 1.5707963267948966,\n        equations: {\n          up: {\n            A: 'v',\n            B: 550\n          },\n          down: {\n            A: 'v',\n            B: 530\n          },\n          base: {\n            A: 'v',\n            B: 540\n          }\n        },\n        coords: [{\n          x: 550,\n          y: 204\n        }, {\n          x: 530,\n          y: 184\n        }, {\n          x: 530,\n          y: 744\n        }, {\n          x: 550,\n          y: 724\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 540,\n          y: 734\n        },\n        end: {\n          x: 1080,\n          y: 734\n        },\n        type: 'normal',\n        parent: 0,\n        child: 2,\n        angle: 0,\n        equations: {\n          up: {\n            A: 'h',\n            B: 724\n          },\n          down: {\n            A: 'h',\n            B: 744\n          },\n          base: {\n            A: 'h',\n            B: 734\n          }\n        },\n        coords: [{\n          x: 550,\n          y: 724\n        }, {\n          x: 530,\n          y: 744\n        }, {\n          x: 1090,\n          y: 744\n        }, {\n          x: 1070,\n          y: 724\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1080,\n          y: 734\n        },\n        end: {\n          x: 1080,\n          y: 194\n        },\n        type: 'normal',\n        parent: 1,\n        child: 3,\n        angle: -1.5707963267948966,\n        equations: {\n          up: {\n            A: 'v',\n            B: 1070\n          },\n          down: {\n            A: 'v',\n            B: 1090\n          },\n          base: {\n            A: 'v',\n            B: 1080\n          }\n        },\n        coords: [{\n          x: 1070,\n          y: 724\n        }, {\n          x: 1090,\n          y: 744\n        }, {\n          x: 1090,\n          y: 184\n        }, {\n          x: 1070,\n          y: 204\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1080,\n          y: 194\n        },\n        end: {\n          x: 540,\n          y: 194\n        },\n        type: 'normal',\n        parent: 2,\n        child: 0,\n        angle: 3.141592653589793,\n        equations: {\n          up: {\n            A: 'h',\n            B: 204\n          },\n          down: {\n            A: 'h',\n            B: 184\n          },\n          base: {\n            A: 'h',\n            B: 194\n          }\n        },\n        coords: [{\n          x: 1070,\n          y: 204\n        }, {\n          x: 1090,\n          y: 184\n        }, {\n          x: 530,\n          y: 184\n        }, {\n          x: 550,\n          y: 204\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }],\n      roomData: [{\n        coords: [{\n          x: 540,\n          y: 734\n        }, {\n          x: 1080,\n          y: 734\n        }, {\n          x: 1080,\n          y: 194\n        }, {\n          x: 540,\n          y: 194\n        }, {\n          x: 540,\n          y: 734\n        }],\n        coordsOutside: [{\n          x: 1090,\n          y: 744\n        }, {\n          x: 1090,\n          y: 184\n        }, {\n          x: 530,\n          y: 184\n        }, {\n          x: 530,\n          y: 744\n        }, {\n          x: 1090,\n          y: 744\n        }],\n        coordsInside: [{\n          x: 1070,\n          y: 724\n        }, {\n          x: 1070,\n          y: 204\n        }, {\n          x: 550,\n          y: 204\n        }, {\n          x: 550,\n          y: 724\n        }, {\n          x: 1070,\n          y: 724\n        }],\n        inside: [],\n        way: ['0', '2', '3', '1', '0'],\n        area: 270400,\n        surface: '',\n        name: '',\n        color: 'gradientWhite',\n        showSurface: true,\n        action: 'add'\n      }]\n    });\n    this.HISTORY[0] = JSON.stringify(this.HISTORY[0]);\n    localStorage.setItem('history', JSON.stringify(this.HISTORY));\n    this.load(0);\n    this.save();\n  }\n  if (boot === 'newL') {\n    if (localStorage.getItem('history')) {\n      localStorage.removeItem('history');\n    }\n    this.HISTORY.push({\n      objData: [],\n      wallData: [{\n        thick: 20,\n        start: {\n          x: 447,\n          y: 458\n        },\n        end: {\n          x: 447,\n          y: 744\n        },\n        type: 'normal',\n        parent: 5,\n        child: 1,\n        angle: 1.5707963267948966,\n        equations: {\n          up: {\n            A: 'v',\n            B: 457\n          },\n          down: {\n            A: 'v',\n            B: 437\n          },\n          base: {\n            A: 'v',\n            B: 447\n          }\n        },\n        coords: [{\n          x: 457,\n          y: 468\n        }, {\n          x: 437,\n          y: 448\n        }, {\n          x: 437,\n          y: 754\n        }, {\n          x: 457,\n          y: 734\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 447,\n          y: 744\n        },\n        end: {\n          x: 1347,\n          y: 744\n        },\n        type: 'normal',\n        parent: 0,\n        child: 2,\n        angle: 0,\n        equations: {\n          up: {\n            A: 'h',\n            B: 734\n          },\n          down: {\n            A: 'h',\n            B: 754\n          },\n          base: {\n            A: 'h',\n            B: 744\n          }\n        },\n        coords: [{\n          x: 457,\n          y: 734\n        }, {\n          x: 437,\n          y: 754\n        }, {\n          x: 1357,\n          y: 754\n        }, {\n          x: 1337,\n          y: 734\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1347,\n          y: 744\n        },\n        end: {\n          x: 1347,\n          y: 144\n        },\n        type: 'normal',\n        parent: 1,\n        child: 3,\n        angle: -1.5707963267948966,\n        equations: {\n          up: {\n            A: 'v',\n            B: 1337\n          },\n          down: {\n            A: 'v',\n            B: 1357\n          },\n          base: {\n            A: 'v',\n            B: 1347\n          }\n        },\n        coords: [{\n          x: 1337,\n          y: 734\n        }, {\n          x: 1357,\n          y: 754\n        }, {\n          x: 1357,\n          y: 134\n        }, {\n          x: 1337,\n          y: 154\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1347,\n          y: 144\n        },\n        end: {\n          x: 1020,\n          y: 144\n        },\n        type: 'normal',\n        parent: 2,\n        child: 4,\n        angle: 3.141592653589793,\n        equations: {\n          up: {\n            A: 'h',\n            B: 154\n          },\n          down: {\n            A: 'h',\n            B: 134\n          },\n          base: {\n            A: 'h',\n            B: 144\n          }\n        },\n        coords: [{\n          x: 1337,\n          y: 154\n        }, {\n          x: 1357,\n          y: 134\n        }, {\n          x: 1010,\n          y: 134\n        }, {\n          x: 1030,\n          y: 154\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1020,\n          y: 144\n        },\n        end: {\n          x: 1020,\n          y: 458\n        },\n        type: 'normal',\n        parent: 3,\n        child: 5,\n        angle: 1.5707963267948966,\n        equations: {\n          up: {\n            A: 'v',\n            B: 1030\n          },\n          down: {\n            A: 'v',\n            B: 1010\n          },\n          base: {\n            A: 'v',\n            B: 1020\n          }\n        },\n        coords: [{\n          x: 1030,\n          y: 154\n        }, {\n          x: 1010,\n          y: 134\n        }, {\n          x: 1010,\n          y: 448\n        }, {\n          x: 1030,\n          y: 468\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }, {\n        thick: 20,\n        start: {\n          x: 1020,\n          y: 458\n        },\n        end: {\n          x: 447,\n          y: 458\n        },\n        type: 'normal',\n        parent: 4,\n        child: 0,\n        angle: 3.141592653589793,\n        equations: {\n          up: {\n            A: 'h',\n            B: 468\n          },\n          down: {\n            A: 'h',\n            B: 448\n          },\n          base: {\n            A: 'h',\n            B: 458\n          }\n        },\n        coords: [{\n          x: 1030,\n          y: 468\n        }, {\n          x: 1010,\n          y: 448\n        }, {\n          x: 437,\n          y: 448\n        }, {\n          x: 457,\n          y: 468\n        }],\n        graph: {\n          0: {},\n          context: {},\n          length: 1\n        }\n      }],\n      roomData: [{\n        coords: [{\n          x: 447,\n          y: 744\n        }, {\n          x: 1347,\n          y: 744\n        }, {\n          x: 1347,\n          y: 144\n        }, {\n          x: 1020,\n          y: 144\n        }, {\n          x: 1020,\n          y: 458\n        }, {\n          x: 447,\n          y: 458\n        }, {\n          x: 447,\n          y: 744\n        }],\n        coordsOutside: [{\n          x: 1357,\n          y: 754\n        }, {\n          x: 1357,\n          y: 134\n        }, {\n          x: 1010,\n          y: 134\n        }, {\n          x: 1010,\n          y: 448\n        }, {\n          x: 437,\n          y: 448\n        }, {\n          x: 437,\n          y: 754\n        }, {\n          x: 1357,\n          y: 754\n        }],\n        coordsInside: [{\n          x: 1337,\n          y: 734\n        }, {\n          x: 1337,\n          y: 154\n        }, {\n          x: 1030,\n          y: 154\n        }, {\n          x: 1030,\n          y: 468\n        }, {\n          x: 457,\n          y: 468\n        }, {\n          x: 457,\n          y: 734\n        }, {\n          x: 1337,\n          y: 734\n        }],\n        inside: [],\n        way: ['0', '2', '3', '4', '5', '1', '0'],\n        area: 330478,\n        surface: '',\n        name: '',\n        color: 'gradientWhite',\n        showSurface: true,\n        action: 'add'\n      }]\n    });\n    this.HISTORY[0] = JSON.stringify(this.HISTORY[0]);\n    localStorage.setItem('history', JSON.stringify(this.HISTORY));\n    this.load(0);\n    this.save();\n  }\n};\nApplication.prototype.importFloorplan = function (floorplanJson) {\n  for (const k in this.OBJDATA) {\n    this.OBJDATA[k].graph.remove();\n  }\n  this.OBJDATA = [];\n  for (const k in floorplanJson.objData) {\n    const OO = floorplanJson.objData[k];\n    // if (OO.family === 'energy') OO.family = 'byObject';\n    const obj = this.editor.obj2D(OO.family, OO.classObj, OO.type, {\n      x: OO.x,\n      y: OO.y\n    }, OO.angle, OO.angleSign, OO.size, OO.hinge = 'normal', OO.thick, OO.value);\n    obj.limit = OO.limit;\n    this.OBJDATA.push(obj);\n    $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n    obj.update();\n  }\n  this.WALLS = floorplanJson.wallData;\n  for (const k in this.WALLS) {\n    if (this.WALLS[k].child != null) {\n      this.WALLS[k].child = this.WALLS[this.WALLS[k].child];\n    }\n    if (this.WALLS[k].parent != null) {\n      this.WALLS[k].parent = this.WALLS[this.WALLS[k].parent];\n    }\n  }\n  this.ROOM = floorplanJson.roomData;\n  this.editor.architect(this.WALLS);\n  this.editor.showScaleBox();\n  this.rib();\n};\nApplication.prototype.exportFloorplan = exportFloorplan;\n\n// REVIEW: What is `boot` for?\nApplication.prototype.save = function (boot = false) {\n  if (boot) {\n    localStorage.removeItem('history');\n  }\n\n  // REVIEW: What does this mean?\n  // FOR CYCLIC OBJ INTO LOCALSTORAGE !!!\n  for (const k in this.WALLS) {\n    if (this.WALLS[k].child != null) {\n      this.WALLS[k].child = this.WALLS.indexOf(this.WALLS[k].child);\n    }\n    if (this.WALLS[k].parent != null) {\n      this.WALLS[k].parent = this.WALLS.indexOf(this.WALLS[k].parent);\n    }\n  }\n\n  // REVIEW: What is this for?\n  if (JSON.stringify({\n    objData: this.OBJDATA,\n    wallData: this.WALLS,\n    roomData: this.ROOM\n  }) === this.HISTORY[this.HISTORY.length - 1]) {\n    for (const k in this.WALLS) {\n      if (this.WALLS[k].child != null) {\n        this.WALLS[k].child = this.WALLS[this.WALLS[k].child];\n      }\n      if (this.WALLS[k].parent != null) {\n        this.WALLS[k].parent = this.WALLS[this.WALLS[k].parent];\n      }\n    }\n    return false;\n  }\n\n  // REVIEW: Why this condition?\n  if (this.HISTORY.index < this.HISTORY.length) {\n    // REVIEW: What is this for?\n    this.HISTORY.splice(this.HISTORY.index, this.HISTORY.length - this.HISTORY.index);\n    $('#redo').addClass('disabled');\n  }\n\n  // REVIEW: What is this for?\n  this.HISTORY.push(JSON.stringify({\n    objData: this.OBJDATA,\n    wallData: this.WALLS,\n    roomData: this.ROOM\n  }));\n\n  // Record to local storage\n  localStorage.setItem('history', JSON.stringify(this.HISTORY));\n\n  // REVIEW: What is this for?\n  this.HISTORY.index++;\n  if (this.HISTORY.index > 1) {\n    $('#undo').removeClass('disabled');\n  }\n\n  // REVIEW: What is this for?\n  for (const k in this.WALLS) {\n    if (this.WALLS[k].child != null) {\n      this.WALLS[k].child = this.WALLS[this.WALLS[k].child];\n    }\n    if (this.WALLS[k].parent != null) {\n      this.WALLS[k].parent = this.WALLS[this.WALLS[k].parent];\n    }\n  }\n\n  // REVIEW: Why return true here?\n  return true;\n};\nApplication.prototype.load = function (index = this.HISTORY.index, boot = false) {\n  if (this.HISTORY.length === 0 && !boot) {\n    return false;\n  }\n  for (const k in this.OBJDATA) {\n    this.OBJDATA[k].graph.remove();\n  }\n  this.OBJDATA = [];\n  let historyTemp = [];\n  historyTemp = JSON.parse(localStorage.getItem('history'));\n  historyTemp = JSON.parse(historyTemp[index]);\n  for (const k in historyTemp.objData) {\n    const OO = historyTemp.objData[k];\n    // if (OO.family === 'energy') OO.family = 'byObject';\n    const obj = this.editor.obj2D(OO.family, OO.classObj, OO.type, {\n      x: OO.x,\n      y: OO.y\n    }, OO.angle, OO.angleSign, OO.size, OO.hinge = 'normal', OO.thick, OO.value);\n    obj.limit = OO.limit;\n    this.OBJDATA.push(obj);\n    $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n    obj.update();\n  }\n  this.WALLS = historyTemp.wallData;\n  for (const k in this.WALLS) {\n    if (this.WALLS[k].child != null) {\n      this.WALLS[k].child = this.WALLS[this.WALLS[k].child];\n    }\n    if (this.WALLS[k].parent != null) {\n      this.WALLS[k].parent = this.WALLS[this.WALLS[k].parent];\n    }\n  }\n  this.ROOM = historyTemp.roomData;\n  this.editor.architect(this.WALLS);\n  this.editor.showScaleBox();\n  this.rib();\n};\n\n// REVIEW: The name for this function could be made more clear to what it actually does. It does not only handle zoom functionality, as its name might suggest\nApplication.prototype.zoom_maker = function (operation, xmove, xview) {\n  switch (operation) {\n    case 'zoomout':\n      if (this.zoom > MIN_ZOOM) {\n        this.zoom--;\n        this.width_viewbox += xmove;\n        this.height_viewbox = this.width_viewbox * this.ratio_viewbox;\n        this.originX_viewbox = this.originX_viewbox - xmove / 2;\n        this.originY_viewbox = this.originY_viewbox - xmove / 2 * this.ratio_viewbox;\n        this.scaleFactor = this.width_viewbox / this.taille_w;\n      }\n      break;\n    case 'zoomin':\n      if (this.zoom < MAX_ZOOM) {\n        this.zoom++;\n        this.width_viewbox -= xmove;\n        this.height_viewbox = this.width_viewbox * this.ratio_viewbox;\n        this.originX_viewbox = this.originX_viewbox + xmove / 2;\n        this.originY_viewbox = this.originY_viewbox + xmove / 2 * this.ratio_viewbox;\n        this.scaleFactor = this.width_viewbox / this.taille_w;\n      }\n      break;\n    case 'zoomreset':\n      this.originX_viewbox = 0;\n      this.originY_viewbox = 0;\n      this.width_viewbox = this.taille_w;\n      this.height_viewbox = this.taille_h;\n      this.scaleFactor = 1;\n      break;\n    case 'zoomright':\n      this.originX_viewbox += xview;\n      break;\n    case 'zoomleft':\n      this.originX_viewbox -= xview;\n      break;\n    case 'zoomtop':\n      this.originY_viewbox -= xview;\n      break;\n    case 'zoombottom':\n      this.originY_viewbox += xview;\n      break;\n    case 'zoomdrag':\n      this.originX_viewbox -= xmove;\n      this.originY_viewbox -= xview;\n      break;\n  }\n  document.getElementById('lin').setAttribute('viewBox', `${this.originX_viewbox} ${this.originY_viewbox} ${this.width_viewbox} ${this.height_viewbox}`);\n};\nApplication.prototype.calcul_snap = function (event, state) {\n  let eX;\n  let eY;\n  if (event.touches) {\n    const touches = event.changedTouches;\n    eX = touches[0].pageX;\n    eY = touches[0].pageY;\n    this.tactile = true;\n  } else {\n    eX = event.pageX;\n    eY = event.pageY;\n  }\n  const x_mouse = eX * this.scaleFactor - this.offset.left * this.scaleFactor + this.originX_viewbox;\n  const y_mouse = eY * this.scaleFactor - this.offset.top * this.scaleFactor + this.originY_viewbox;\n  let x_grid;\n  let y_grid;\n  if (state === 'on') {\n    x_grid = Math.round(x_mouse / this.grid) * this.grid;\n    y_grid = Math.round(y_mouse / this.grid) * this.grid;\n  }\n  if (state === 'off') {\n    x_grid = x_mouse;\n    y_grid = y_mouse;\n  }\n  return {\n    x: x_grid,\n    y: y_grid,\n    xMouse: x_mouse,\n    yMouse: y_mouse\n  };\n};\nApplication.prototype.intersectionOff = function () {\n  if (typeof this.lineIntersectionP != 'undefined') {\n    this.lineIntersectionP.remove();\n    this.lineIntersectionP = undefined;\n  }\n};\nApplication.prototype.intersection = function (snap, range = Infinity, except = ['']) {\n  // ORANGE LINES 90° NEAR SEGMENT\n  const bestEqPoint = {};\n  const equation = {};\n  bestEqPoint.distance = range;\n  if (typeof this.lineIntersectionP != 'undefined') {\n    this.lineIntersectionP.remove();\n    this.lineIntersectionP = undefined;\n  }\n  this.lineIntersectionP = this.qSVG.create('boxbind', 'path', {\n    // ORANGE TEMP LINE FOR ANGLE 0 90 45 -+\n    d: '',\n    stroke: 'transparent',\n    'stroke-width': 0.5,\n    'stroke-opacity': '1',\n    fill: 'none'\n  });\n  for (index = 0; index < this.WALLS.length; index++) {\n    if (except.indexOf(this.WALLS[index]) === -1) {\n      const x1 = this.WALLS[index].start.x;\n      const y1 = this.WALLS[index].start.y;\n      const x2 = this.WALLS[index].end.x;\n      const y2 = this.WALLS[index].end.y;\n\n      // EQUATION 90° of segment nf/nf-1 at X2/Y2 Point\n      if (Math.abs(y2 - y1) === 0) {\n        equation.C = 'v'; // C/D equation 90° Coef = -1/E\n        equation.D = x1;\n        equation.E = 'h'; // E/F equation Segment\n        equation.F = y1;\n        equation.G = 'v'; // G/H equation 90° Coef = -1/E\n        equation.H = x2;\n        equation.I = 'h'; // I/J equation Segment\n        equation.J = y2;\n      } else if (Math.abs(x2 - x1) === 0) {\n        equation.C = 'h'; // C/D equation 90° Coef = -1/E\n        equation.D = y1;\n        equation.E = 'v'; // E/F equation Segment\n        equation.F = x1;\n        equation.G = 'h'; // G/H equation 90° Coef = -1/E\n        equation.H = y2;\n        equation.I = 'v'; // I/J equation Segment\n        equation.J = x2;\n      } else {\n        equation.C = (x1 - x2) / (y2 - y1);\n        equation.D = y1 - x1 * equation.C;\n        equation.E = (y2 - y1) / (x2 - x1);\n        equation.F = y1 - x1 * equation.E;\n        equation.G = (x1 - x2) / (y2 - y1);\n        equation.H = y2 - x2 * equation.C;\n        equation.I = (y2 - y1) / (x2 - x1);\n        equation.J = y2 - x2 * equation.E;\n      }\n      equation.A = equation.C;\n      equation.B = equation.D;\n      eq = this.qSVG.nearPointOnEquation(equation, snap);\n      if (eq.distance < bestEqPoint.distance) {\n        this.setBestEqPoint(bestEqPoint, eq.distance, index, eq.x, eq.y, x1, y1, x2, y2, 1);\n      }\n      equation.A = equation.E;\n      equation.B = equation.F;\n      eq = this.qSVG.nearPointOnEquation(equation, snap);\n      if (eq.distance < bestEqPoint.distance) {\n        this.setBestEqPoint(bestEqPoint, eq.distance, index, eq.x, eq.y, x1, y1, x2, y2, 1);\n      }\n      equation.A = equation.G;\n      equation.B = equation.H;\n      eq = this.qSVG.nearPointOnEquation(equation, snap);\n      if (eq.distance < bestEqPoint.distance) {\n        this.setBestEqPoint(bestEqPoint, eq.distance, index, eq.x, eq.y, x1, y1, x2, y2, 2);\n      }\n      equation.A = equation.I;\n      equation.B = equation.J;\n      eq = this.qSVG.nearPointOnEquation(equation, snap);\n      if (eq.distance < bestEqPoint.distance) {\n        this.setBestEqPoint(bestEqPoint, eq.distance, index, eq.x, eq.y, x1, y1, x2, y2, 2);\n      }\n    } // END INDEXOF EXCEPT TEST\n  } // END LOOP FOR\n\n  if (bestEqPoint.distance < range) {\n    if (bestEqPoint.way === 2) {\n      this.lineIntersectionP.attr({\n        // ORANGE TEMP LINE FOR ANGLE 0 90 45 -+\n        d: 'M' + bestEqPoint.x1 + ',' + bestEqPoint.y1 + ' L' + bestEqPoint.x2 + ',' + bestEqPoint.y2 + ' L' + bestEqPoint.x + ',' + bestEqPoint.y,\n        stroke: '#d7ac57'\n      });\n    } else {\n      this.lineIntersectionP.attr({\n        // ORANGE TEMP LINE FOR ANGLE 0 90 45 -+\n        d: 'M' + bestEqPoint.x2 + ',' + bestEqPoint.y2 + ' L' + bestEqPoint.x1 + ',' + bestEqPoint.y1 + ' L' + bestEqPoint.x + ',' + bestEqPoint.y,\n        stroke: '#d7ac57'\n      });\n    }\n    return {\n      x: bestEqPoint.x,\n      y: bestEqPoint.y,\n      wall: this.WALLS[bestEqPoint.node],\n      distance: bestEqPoint.distance\n    };\n  } else {\n    return false;\n  }\n};\nApplication.prototype.hideAllSize = function () {\n  $('#boxbind').empty();\n  this.sizeText = [];\n  this.showAllSizeStatus = 0;\n};\nApplication.prototype.inWallRib = function (wall, option = false) {\n  if (!this.option) {\n    $('#boxRib').empty();\n  }\n  const ribMaster = [];\n  ribMaster.push([]);\n  ribMaster.push([]);\n  let inter;\n  let distance;\n  let cross;\n  const angleTextValue = wall.angle * (180 / Math.PI);\n  const objWall = this.editor.objFromWall(wall); // LIST OBJ ON EDGE\n  if (objWall.length == 0) {\n    return;\n  }\n  ribMaster[0].push({\n    wall: wall,\n    crossObj: false,\n    side: 'up',\n    coords: wall.coords[0],\n    distance: 0\n  });\n  ribMaster[1].push({\n    wall: wall,\n    crossObj: false,\n    side: 'down',\n    coords: wall.coords[1],\n    distance: 0\n  });\n  let objTarget = null;\n  for (const ob in objWall) {\n    objTarget = objWall[ob];\n    objTarget.up = [this.qSVG.nearPointOnEquation(wall.equations.up, objTarget.limit[0]), this.qSVG.nearPointOnEquation(wall.equations.up, objTarget.limit[1])];\n    objTarget.down = [this.qSVG.nearPointOnEquation(wall.equations.down, objTarget.limit[0]), this.qSVG.nearPointOnEquation(wall.equations.down, objTarget.limit[1])];\n    distance = this.qSVG.measure(wall.coords[0], objTarget.up[0]) / this.meter;\n    ribMaster[0].push({\n      wall: objTarget,\n      crossObj: ob,\n      side: 'up',\n      coords: objTarget.up[0],\n      distance: distance.toFixed(2)\n    });\n    distance = this.qSVG.measure(wall.coords[0], objTarget.up[1]) / this.meter;\n    ribMaster[0].push({\n      wall: objTarget,\n      crossObj: ob,\n      side: 'up',\n      coords: objTarget.up[1],\n      distance: distance.toFixed(2)\n    });\n    distance = this.qSVG.measure(wall.coords[1], objTarget.down[0]) / this.meter;\n    ribMaster[1].push({\n      wall: objTarget,\n      crossObj: ob,\n      side: 'down',\n      coords: objTarget.down[0],\n      distance: distance.toFixed(2)\n    });\n    distance = this.qSVG.measure(wall.coords[1], objTarget.down[1]) / this.meter;\n    ribMaster[1].push({\n      wall: objTarget,\n      crossObj: ob,\n      side: 'down',\n      coords: objTarget.down[1],\n      distance: distance.toFixed(2)\n    });\n  }\n  distance = this.qSVG.measure(wall.coords[0], wall.coords[3]) / this.meter;\n  ribMaster[0].push({\n    wall: objTarget,\n    crossObj: false,\n    side: 'up',\n    coords: wall.coords[3],\n    distance: distance\n  });\n  distance = this.qSVG.measure(wall.coords[1], wall.coords[2]) / this.meter;\n  ribMaster[1].push({\n    wall: objTarget,\n    crossObj: false,\n    side: 'down',\n    coords: wall.coords[2],\n    distance: distance\n  });\n  ribMaster[0].sort(function (a, b) {\n    return (a.distance - b.distance).toFixed(2);\n  });\n  ribMaster[1].sort(function (a, b) {\n    return (a.distance - b.distance).toFixed(2);\n  });\n  for (const t in ribMaster) {\n    for (let n = 1; n < ribMaster[t].length; n++) {\n      const found = true;\n      let shift = -5;\n      const valueText = Math.abs(ribMaster[t][n - 1].distance - ribMaster[t][n].distance);\n      let angleText = angleTextValue;\n      if (found) {\n        if (ribMaster[t][n - 1].side === 'down') {\n          shift = -shift + 10;\n        }\n        if (angleText > 89 || angleText < -89) {\n          angleText -= 180;\n          if (ribMaster[t][n - 1].side === 'down') {\n            shift = -5;\n          } else {\n            shift = -shift + 10;\n          }\n        }\n        this.sizeText[n] = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        const startText = this.qSVG.middle(ribMaster[t][n - 1].coords.x, ribMaster[t][n - 1].coords.y, ribMaster[t][n].coords.x, ribMaster[t][n].coords.y);\n        this.sizeText[n].setAttributeNS(null, 'x', startText.x);\n        this.sizeText[n].setAttributeNS(null, 'y', startText.y + shift);\n        this.sizeText[n].setAttributeNS(null, 'text-anchor', 'middle');\n        this.sizeText[n].setAttributeNS(null, 'font-family', 'roboto');\n        this.sizeText[n].setAttributeNS(null, 'stroke', '#ffffff');\n        this.sizeText[n].textContent = valueText.toFixed(2);\n        if (this.sizeText[n].textContent < 1) {\n          this.sizeText[n].setAttributeNS(null, 'font-size', '0.8em');\n          this.sizeText[n].textContent = this.sizeText[n].textContent.substring(1, this.sizeText[n].textContent.length);\n        } else {\n          this.sizeText[n].setAttributeNS(null, 'font-size', '1em');\n        }\n        this.sizeText[n].setAttributeNS(null, 'stroke-width', '0.27px');\n        this.sizeText[n].setAttributeNS(null, 'fill', '#666666');\n        this.sizeText[n].setAttribute('transform', 'rotate(' + angleText + ' ' + startText.x + ',' + startText.y + ')');\n        $('#boxRib').append(this.sizeText[n]);\n      }\n    }\n  }\n};\nApplication.prototype.rib = function (shift = 5) {\n  const ribMaster = [];\n  ribMaster.push([]);\n  ribMaster.push([]);\n  let inter;\n  let distance;\n  let cross;\n  for (const i in this.WALLS) {\n    if (this.WALLS[i].equations.base) {\n      ribMaster[0].push([]);\n      this.pushToRibMaster(ribMaster, 0, i, i, i, 'up', this.WALLS[i].coords[0], 0);\n      ribMaster[1].push([]);\n      this.pushToRibMaster(ribMaster, 1, i, i, i, 'down', this.WALLS[i].coords[1], 0);\n      for (const p in this.WALLS) {\n        if (i != p && this.WALLS[p].equations.base) {\n          cross = this.qSVG.intersectionOfEquations(this.WALLS[i].equations.base, this.WALLS[p].equations.base, 'object');\n          if (this.qSVG.btwn(cross.x, this.WALLS[i].start.x, this.WALLS[i].end.x, 'round') && this.qSVG.btwn(cross.y, this.WALLS[i].start.y, this.WALLS[i].end.y, 'round')) {\n            inter = this.qSVG.intersectionOfEquations(this.WALLS[i].equations.up, this.WALLS[p].equations.up, 'object');\n            if (this.qSVG.btwn(inter.x, this.WALLS[i].coords[0].x, this.WALLS[i].coords[3].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[i].coords[0].y, this.WALLS[i].coords[3].y, 'round') && this.qSVG.btwn(inter.x, this.WALLS[p].coords[0].x, this.WALLS[p].coords[3].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[p].coords[0].y, this.WALLS[p].coords[3].y, 'round')) {\n              distance = this.qSVG.measure(this.WALLS[i].coords[0], inter) / this.meter;\n              this.pushToRibMaster(ribMaster, 0, i, i, p, 'up', inter, distance.toFixed(2));\n            }\n            inter = this.qSVG.intersectionOfEquations(this.WALLS[i].equations.up, this.WALLS[p].equations.down, 'object');\n            if (this.qSVG.btwn(inter.x, this.WALLS[i].coords[0].x, this.WALLS[i].coords[3].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[i].coords[0].y, this.WALLS[i].coords[3].y, 'round') && this.qSVG.btwn(inter.x, this.WALLS[p].coords[1].x, this.WALLS[p].coords[2].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[p].coords[1].y, this.WALLS[p].coords[2].y, 'round')) {\n              distance = this.qSVG.measure(this.WALLS[i].coords[0], inter) / this.meter;\n              this.pushToRibMaster(ribMaster, 0, i, i, p, 'up', inter, distance.toFixed(2));\n            }\n            inter = this.qSVG.intersectionOfEquations(this.WALLS[i].equations.down, this.WALLS[p].equations.up, 'object');\n            if (this.qSVG.btwn(inter.x, this.WALLS[i].coords[1].x, this.WALLS[i].coords[2].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[i].coords[1].y, this.WALLS[i].coords[2].y, 'round') && this.qSVG.btwn(inter.x, this.WALLS[p].coords[0].x, this.WALLS[p].coords[3].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[p].coords[0].y, this.WALLS[p].coords[3].y, 'round')) {\n              distance = this.qSVG.measure(this.WALLS[i].coords[1], inter) / this.meter;\n              this.pushToRibMaster(ribMaster, 1, i, i, p, 'down', inter, distance.toFixed(2));\n            }\n            inter = this.qSVG.intersectionOfEquations(this.WALLS[i].equations.down, this.WALLS[p].equations.down, 'object');\n            if (this.qSVG.btwn(inter.x, this.WALLS[i].coords[1].x, this.WALLS[i].coords[2].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[i].coords[1].y, this.WALLS[i].coords[2].y, 'round') && this.qSVG.btwn(inter.x, this.WALLS[p].coords[1].x, this.WALLS[p].coords[2].x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[p].coords[1].y, this.WALLS[p].coords[2].y, 'round')) {\n              distance = this.qSVG.measure(this.WALLS[i].coords[1], inter) / this.meter;\n              this.pushToRibMaster(ribMaster, 1, i, i, p, 'down', inter, distance.toFixed(2));\n            }\n          }\n        }\n      }\n      distance = this.qSVG.measure(this.WALLS[i].coords[0], this.WALLS[i].coords[3]) / this.meter;\n      this.pushToRibMaster(ribMaster, 0, i, i, i, 'up', this.WALLS[i].coords[3], distance.toFixed(2));\n      distance = this.qSVG.measure(this.WALLS[i].coords[1], this.WALLS[i].coords[2]) / this.meter;\n      this.pushToRibMaster(ribMaster, 1, i, i, i, 'down', this.WALLS[i].coords[2], distance.toFixed(2));\n    }\n  }\n  for (const a in ribMaster[0]) {\n    ribMaster[0][a].sort(function (a, b) {\n      return (a.distance - b.distance).toFixed(2);\n    });\n  }\n  for (const a in ribMaster[1]) {\n    ribMaster[1][a].sort(function (a, b) {\n      return (a.distance - b.distance).toFixed(2);\n    });\n  }\n  const sizeText = [];\n  if (shift === 5) {\n    $('#boxRib').empty();\n  }\n  for (const t in ribMaster) {\n    for (const a in ribMaster[t]) {\n      for (let n = 1; n < ribMaster[t][a].length; n++) {\n        if (ribMaster[t][a][n - 1].wallIndex === ribMaster[t][a][n].wallIndex) {\n          const edge = ribMaster[t][a][n].wallIndex;\n          let found = true;\n          const valueText = Math.abs(ribMaster[t][a][n - 1].distance - ribMaster[t][a][n].distance);\n          // CLEAR TOO LITTLE VALUE\n          if (valueText < 0.15) {\n            found = false;\n          }\n          // CLEAR (thick) BETWEEN CROSS EDGE\n          if (found && ribMaster[t][a][n - 1].crossEdge === ribMaster[t][a][n].crossEdge && ribMaster[t][a][n].crossEdge != ribMaster[t][a][n].wallIndex) {\n            found = false;\n          }\n          // CLEAR START INTO EDGE\n          if (found && ribMaster[t][a].length > 2 && n === 1) {\n            const polygon = [];\n            for (let pp = 0; pp < 4; pp++) {\n              polygon.push({\n                x: this.WALLS[ribMaster[t][a][n].crossEdge].coords[pp].x,\n                y: this.WALLS[ribMaster[t][a][n].crossEdge].coords[pp].y\n              }); // FOR Z\n            }\n\n            if (this.qSVG.rayCasting(ribMaster[t][a][0].coords, polygon)) {\n              found = false;\n            }\n          }\n          // CLEAR END INTO EDGE\n          if (found && ribMaster[t][a].length > 2 && n === ribMaster[t][a].length - 1) {\n            const polygon = [];\n            for (let pp = 0; pp < 4; pp++) {\n              polygon.push({\n                x: this.WALLS[ribMaster[t][a][n - 1].crossEdge].coords[pp].x,\n                y: this.WALLS[ribMaster[t][a][n - 1].crossEdge].coords[pp].y\n              }); // FOR Z\n            }\n\n            if (this.qSVG.rayCasting(ribMaster[t][a][ribMaster[t][a].length - 1].coords, polygon)) {\n              found = false;\n            }\n          }\n          if (found) {\n            let angleText = this.WALLS[ribMaster[t][a][n].wallIndex].angle * (180 / Math.PI);\n            let shiftValue = -shift;\n            if (ribMaster[t][a][n - 1].side === 'down') {\n              shiftValue = -shiftValue + 10;\n            }\n            if (angleText > 90 || angleText < -89) {\n              angleText -= 180;\n              if (ribMaster[t][a][n - 1].side === 'down') {\n                shiftValue = -shift;\n              } else {\n                shiftValue = -shiftValue + 10;\n              }\n            }\n            sizeText[n] = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            const startText = this.qSVG.middle(ribMaster[t][a][n - 1].coords.x, ribMaster[t][a][n - 1].coords.y, ribMaster[t][a][n].coords.x, ribMaster[t][a][n].coords.y);\n            sizeText[n].setAttributeNS(null, 'x', startText.x);\n            sizeText[n].setAttributeNS(null, 'y', startText.y + shiftValue);\n            sizeText[n].setAttributeNS(null, 'text-anchor', 'middle');\n            sizeText[n].setAttributeNS(null, 'font-family', 'roboto');\n            sizeText[n].setAttributeNS(null, 'stroke', '#ffffff');\n            sizeText[n].textContent = valueText.toFixed(2);\n            if (sizeText[n].textContent < 1) {\n              sizeText[n].setAttributeNS(null, 'font-size', '0.73em');\n              sizeText[n].textContent = sizeText[n].textContent.substring(1, sizeText[n].textContent.length);\n            } else {\n              sizeText[n].setAttributeNS(null, 'font-size', '0.9em');\n            }\n            sizeText[n].setAttributeNS(null, 'stroke-width', '0.2px');\n            sizeText[n].setAttributeNS(null, 'fill', '#555555');\n            sizeText[n].setAttribute('transform', 'rotate(' + angleText + ' ' + startText.x + ',' + startText.y + ')');\n            $('#boxRib').append(sizeText[n]);\n          }\n        }\n      }\n    }\n  }\n};\nApplication.prototype.fonc_button = function (modesetting, option) {\n  this.save();\n  $('.sub').hide();\n  raz_button();\n  if (option != 'simpleStair') {\n    $('#' + modesetting).removeClass('btn-default');\n    $('#' + modesetting).addClass('btn-success');\n  }\n  this.mode = modesetting;\n  this.modeOption = option;\n  if (typeof this.lineIntersectionP != 'undefined') {\n    this.lineIntersectionP.remove();\n    this.lineIntersectionP = undefined;\n  }\n};\nApplication.prototype.carpentryCalc = function (classObj, typeObj, sizeObj, thickObj, dividerObj = 10) {\n  //  RETURN PATH(s) ARRAY FOR OBJECT + PROPERTY params => bindBox (false = open sideTool), move, resize, rotate\n  const construc = [];\n  construc.params = {};\n  construc.params.bindBox = false;\n  construc.params.move = false;\n  construc.params.resize = false;\n  construc.params.resizeLimit = {};\n  construc.params.resizeLimit.width = {\n    min: false,\n    max: false\n  };\n  construc.params.resizeLimit.height = {\n    min: false,\n    max: false\n  };\n  construc.params.rotate = false;\n  if (classObj === 'socle') {\n    pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2 + ' Z', '#5cba79', '#5cba79', '');\n  }\n  if (classObj === 'network') {\n    if (typeObj === 'rj11') {\n      construc.params.bindBox = true;\n      construc.params.move = true;\n      construc.params.resize = false;\n      construc.params.rotate = false;\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-10,5 l0,-10 m20,0 l0,10', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,5 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,5 h 20', 'none', '#333', '');\n      construc.push({\n        text: 'RJ11',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.5em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'rj45') {\n      construc.params.bindBox = true;\n      construc.params.move = true;\n      construc.params.resize = false;\n      construc.params.rotate = false;\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-10,5 l0,-10 m20,0 l0,10', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,5 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,5 h 20', 'none', '#333', '');\n      construc.push({\n        text: 'RJ45',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.5em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'coax') {\n      construc.params.bindBox = true;\n      construc.params.move = true;\n      construc.params.resize = false;\n      construc.params.rotate = false;\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-10,5 l0-10 m20,0 l0,10', 'none', '#333', '');\n      pushToConstruc(construc, 'm-7,-5 l0,7 l14,0 l0,-7', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,5 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,5 h 20', 'none', '#333', '');\n      construc.push({\n        text: 'TV',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.5em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n  }\n  if (classObj === 'electrical') {\n    if (typeObj === 'outlet') {\n      construc.params.bindBox = true;\n      construc.params.move = true;\n      construc.params.resize = false;\n      construc.params.rotate = false;\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M 10,-6 a 10,10 0 0 1 -5,8 10,10 0 0 1 -10,0 10,10 0 0 1 -5,-8', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,3 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,4 h 20', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'switch') {\n      construc.params.bindBox = true;\n      construc.params.move = true;\n      construc.params.resize = false;\n      construc.params.rotate = false;\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#333', '');\n      pushToConstruc(construc, this.qSVG.circlePath(-2, 4, 5), 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,0 5,-9', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n  }\n  if (classObj === 'doorWindow') {\n    if (typeObj === 'simple') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2 + ' Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + (-sizeObj - thickObj / 2) + '  A' + sizeObj + ',' + sizeObj + ' 0 0,1 ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', this.colorWall, '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 40,\n        max: 120\n      };\n    }\n    if (typeObj === 'double') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2 + ' Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + (-sizeObj / 2 - thickObj / 2) + '  A' + sizeObj / 2 + ',' + sizeObj / 2 + ' 0 0,1 0,' + -thickObj / 2, 'none', this.colorWall, '');\n      pushToConstruc(construc, 'M ' + sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + sizeObj / 2 + ',' + (-sizeObj / 2 - thickObj / 2) + '  A' + sizeObj / 2 + ',' + sizeObj / 2 + ' 0 0,0 0,' + -thickObj / 2, 'none', this.colorWall, '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 40,\n        max: 160\n      };\n    }\n    if (typeObj === 'pocket') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + (-(thickObj / 2) - 4) + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + (-(thickObj / 2) - 4) + ' Z', '#ccc', 'none', 'none');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' M ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', '#494646', '5 5');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + (-thickObj / 2 - 5) + ' L ' + +sizeObj / 2 + ',' + (-thickObj / 2 - 5) + ' L ' + +sizeObj / 2 + ',' + -thickObj / 2 + ' Z', 'url(#hatch)', '#494646', '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 60,\n        max: 200\n      };\n    }\n    if (typeObj === 'aperture') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2 + ' Z', '#ccc', '#494646', '5,5');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -(thickObj / 2) + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + (-sizeObj / 2 + 5) + ',' + thickObj / 2 + ' L ' + (-sizeObj / 2 + 5) + ',' + -(thickObj / 2) + ' Z', 'none', '#494646', 'none');\n      pushToConstruc(construc, 'M ' + (sizeObj / 2 - 5) + ',' + -(thickObj / 2) + ' L ' + (sizeObj / 2 - 5) + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -(thickObj / 2) + ' Z', 'none', '#494646', 'none');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 40,\n        max: 500\n      };\n    }\n    if (typeObj === 'fix') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',-2 L ' + -sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',-2 Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' M ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', '#ccc', '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 30,\n        max: 300\n      };\n    }\n    if (typeObj === 'flap') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',-2 L ' + -sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',-2 Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' M ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', '#ccc', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + (-sizeObj / 2 + sizeObj * 0.866) + ',' + (-sizeObj / 2 - thickObj / 2) + '  A' + sizeObj + ',' + sizeObj + ' 0 0,1 ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', this.colorWall, '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 20,\n        max: 100\n      };\n    }\n    if (typeObj === 'twin') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',-2 L ' + -sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',2 L ' + sizeObj / 2 + ',-2 Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' M ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', '#ccc', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + (-sizeObj / 2 + sizeObj / 2 * 0.866) + ',' + (-sizeObj / 4 - thickObj / 2) + '  A' + sizeObj / 2 + ',' + sizeObj / 2 + ' 0 0,1 0,' + -thickObj / 2, 'none', this.colorWall, '');\n      pushToConstruc(construc, 'M ' + sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + (sizeObj / 2 + -sizeObj / 2 * 0.866) + ',' + (-sizeObj / 4 - thickObj / 2) + '  A' + sizeObj / 2 + ',' + sizeObj / 2 + ' 0 0,0 0,' + -thickObj / 2, 'none', this.colorWall, '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 40,\n        max: 200\n      };\n    }\n    if (typeObj === 'bay') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' M ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2, 'none', '#ccc', '');\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',-2 L ' + -sizeObj / 2 + ',0 L 2,0 L 2,2 L 3,2 L 3,-2 Z', '#ccc', 'none', '');\n      pushToConstruc(construc, 'M -2,1 L -2,3 L ' + sizeObj / 2 + ',3 L ' + sizeObj / 2 + ',1 L -1,1 L -1,-1 L -2,-1 Z', '#ccc', 'none', '');\n      construc.params.resize = true;\n      construc.params.resizeLimit.width = {\n        min: 60,\n        max: 300\n      };\n    }\n  }\n  if (classObj === 'measure') {\n    construc.params.bindBox = true;\n    pushToConstruc(construc, 'M-' + sizeObj / 2 + ',0 l10,-10 l0,8 l' + (sizeObj - 20) + ',0 l0,-8 l10,10 l-10,10 l0,-8 l-' + (sizeObj - 20) + ',0 l0,8 Z', '#729eeb', 'none', '');\n  }\n  if (classObj === 'boundingBox') {\n    pushToConstruc(construc, 'M' + (-sizeObj / 2 - 10) + ',' + (-thickObj / 2 - 10) + ' L' + (sizeObj / 2 + 10) + ',' + (-thickObj / 2 - 10) + ' L' + (sizeObj / 2 + 10) + ',' + (thickObj / 2 + 10) + ' L' + (-sizeObj / 2 - 10) + ',' + (thickObj / 2 + 10) + ' Z', 'none', '#aaa', '');\n\n    // construc.push({'path':\"M\"+dividerObj[0].x+\",\"+dividerObj[0].y+\" L\"+dividerObj[1].x+\",\"+dividerObj[1].y+\" L\"+dividerObj[2].x+\",\n    // \"+dividerObj[2].y+\" L\"+dividerObj[3].x+\",\"+dividerObj[3].y+\" Z\", 'fill':'none', 'stroke':\"#000\", 'strokeDashArray': ''});\n  }\n\n  //typeObj = color  dividerObj = text\n  if (classObj === 'text') {\n    construc.params.bindBox = true;\n    construc.params.move = true;\n    construc.params.rotate = true;\n    construc.push({\n      text: dividerObj.text,\n      x: '0',\n      y: '0',\n      fill: typeObj,\n      stroke: typeObj,\n      fontSize: dividerObj.size + 'px',\n      strokeWidth: '0px'\n    });\n  }\n  if (classObj === 'stair') {\n    construc.params.bindBox = true;\n    construc.params.move = true;\n    construc.params.resize = true;\n    construc.params.rotate = true;\n    construc.params.width = 60;\n    construc.params.height = 180;\n    if (typeObj === 'simpleStair') {\n      pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + -thickObj / 2 + ' L ' + -sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + thickObj / 2 + ' L ' + sizeObj / 2 + ',' + -thickObj / 2 + ' Z', '#fff', '#000', '');\n      const heightStep = thickObj / dividerObj;\n      for (let i = 1; i < dividerObj + 1; i++) {\n        pushToConstruc(construc, 'M ' + -sizeObj / 2 + ',' + (-thickObj / 2 + i * heightStep) + ' L ' + sizeObj / 2 + ',' + (-thickObj / 2 + i * heightStep), 'none', '#000', 'none');\n      }\n      construc.params.resizeLimit.width = {\n        min: 40,\n        max: 200\n      };\n      construc.params.resizeLimit.height = {\n        min: 40,\n        max: 400\n      };\n    }\n  }\n  if (classObj === 'energy') {\n    construc.params.bindBox = true;\n    construc.params.move = true;\n    construc.params.resize = false;\n    construc.params.rotate = false;\n    if (typeObj === 'gtl') {\n      pushToConstruc(construc, 'm -20,-20 l 40,0 l0,40 l-40,0 Z', '#fff', '#333', '');\n      construc.push({\n        text: 'GTL',\n        x: '0',\n        y: '5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.9em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 40;\n      construc.params.height = 40;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'switch') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#333', '');\n      pushToConstruc(construc, this.qSVG.circlePath(-2, 4, 5), 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,0 5,-9', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'doubleSwitch') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#333', '');\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 4), 'none', '#333', '');\n      pushToConstruc(construc, 'm 2,-3 5,-8 3,2', 'none', '#333', '');\n      pushToConstruc(construc, 'm -2,3 -5,8 -3,-2', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'dimmer') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#333', '');\n      pushToConstruc(construc, this.qSVG.circlePath(-2, 4, 5), 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,0 5,-9', 'none', '#333', '');\n      pushToConstruc(construc, 'M -2,-6 L 10,-4 L-2,-2 Z', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'plug') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M 10,-6 a 10,10 0 0 1 -5,8 10,10 0 0 1 -10,0 10,10 0 0 1 -5,-8', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,3 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,4 h 20', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'plug20') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M 10,-6 a 10,10 0 0 1 -5,8 10,10 0 0 1 -10,0 10,10 0 0 1 -5,-8', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,3 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,4 h 20', 'none', '#333', '');\n      construc.push({\n        text: '20A',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.65em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'plug32') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M 10,-6 a 10,10 0 0 1 -5,8 10,10 0 0 1 -10,0 10,10 0 0 1 -5,-8', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,3 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,4 h 20', 'none', '#333', '');\n      construc.push({\n        text: '32A',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.65em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'roofLight') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M -8,-8 L 8,8 M -8,8 L 8,-8', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'free';\n    }\n    if (typeObj === 'wallLight') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'M -8,-8 L 8,8 M -8,8 L 8,-8', 'none', '#333', '');\n      pushToConstruc(construc, 'M -10,10 L 10,10', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'www') {\n      pushToConstruc(construc, 'm -20,-20 l 40,0 l0,40 l-40,0 Z', '#fff', '#333', '');\n      construc.push({\n        text: '@',\n        x: '0',\n        y: '4',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '1.2em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 40;\n      construc.params.height = 40;\n      construc.family = 'free';\n    }\n    if (typeObj === 'rj45') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-10,5 l0,-10 m20,0 l0,10', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,5 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,5 h 20', 'none', '#333', '');\n      construc.push({\n        text: 'RJ45',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.5em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'tv') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-10,5 l0-10 m20,0 l0,10', 'none', '#333', '');\n      pushToConstruc(construc, 'm-7,-5 l0,7 l14,0 l0,-7', 'none', '#333', '');\n      pushToConstruc(construc, 'm 0,5 v 7', 'none', '#333', '');\n      pushToConstruc(construc, 'm -10,5 h 20', 'none', '#333', '');\n      construc.push({\n        text: 'TV',\n        x: '0',\n        y: '-5',\n        fill: '#333333',\n        stroke: 'none',\n        fontSize: '0.5em',\n        strokeWidth: '0.4px'\n      });\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'heater') {\n      pushToConstruc(construc, this.qSVG.circlePath(0, 0, 16), '#fff', '#000', '');\n      pushToConstruc(construc, 'm-15,-4 l30,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-14,-8 l28,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-11,-12 l22,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-16,0 l32,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-15,4 l30,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-14,8 l28,0', 'none', '#333', '');\n      pushToConstruc(construc, 'm-11,12 l22,0', 'none', '#333', '');\n      construc.params.width = 36;\n      construc.params.height = 36;\n      construc.family = 'stick';\n    }\n    if (typeObj === 'radiator') {\n      pushToConstruc(construc, 'm -20,-10 l 40,0 l0,20 l-40,0 Z', '#fff', '#333', '');\n      pushToConstruc(construc, 'M -15,-10 L -15,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M -10,-10 L -10,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M -5,-10 L -5,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M -0,-10 L -0,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M 5,-10 L 5,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M 10,-10 L 10,10', '#fff', '#333', '');\n      pushToConstruc(construc, 'M 15,-10 L 15,10', '#fff', '#333', '');\n      construc.params.width = 40;\n      construc.params.height = 20;\n      construc.family = 'stick';\n    }\n  }\n  if (classObj === 'furniture') {\n    construc.params.bindBox = true;\n    construc.params.move = true;\n    construc.params.resize = true;\n    construc.params.rotate = true;\n  }\n  return construc;\n};\nApplication.prototype.setBestEqPoint = function (bestEqPoint, distance, index, x, y, x1, y1, x2, y2, way) {\n  bestEqPoint.distance = distance;\n  bestEqPoint.node = index;\n  bestEqPoint.x = x;\n  bestEqPoint.y = y;\n  bestEqPoint.x1 = x1;\n  bestEqPoint.y1 = y1;\n  bestEqPoint.x2 = x2;\n  bestEqPoint.y2 = y2;\n  bestEqPoint.way = way;\n};\nApplication.prototype.pushToRibMaster = function (ribMaster, firstIndex, secondIndex, wallIndex, crossEdge, side, coords, distance) {\n  ribMaster[firstIndex][secondIndex].push({\n    wallIndex: wallIndex,\n    crossEdge: crossEdge,\n    side: side,\n    coords: coords,\n    distance: distance\n  });\n};\nApplication.prototype.mouseDown_mode_select = function (event) {\n  if (this.mode !== 'select_mode') {\n    return;\n  }\n  if (typeof this.binder != 'undefined' && (this.binder.type == 'segment' || this.binder.type == 'node' || this.binder.type == 'obj' || this.binder.type == 'boundingBox')) {\n    // REVIEW: Is this safe to do here? How is the subsequent mouse move effected?\n    this.mode = 'bind_mode';\n    if (this.binder.type == 'obj') {\n      this.action = 1;\n    }\n    if (this.binder.type == 'boundingBox') {\n      this.action = 1;\n    }\n\n    // INIT FOR HELP BINDER NODE MOVING H V (MOUSE DOWN)\n    if (this.binder.type == 'node') {\n      $('#boxScale').hide(100);\n      const node = this.binder.data;\n      this.pox = node.x;\n      this.poy = node.y;\n      const nodeControl = {\n        x: this.pox,\n        y: this.poy\n      };\n\n      // DETERMINATE DISTANCE OF OPPOSED NODE ON EDGE(s) PARENT(s) OF THIS NODE !!!! NODE 1 -- NODE 2 SYSTE% :-(\n      this.wallListObj = [];\n      var objWall;\n      this.wallListRun = [];\n      for (let ee = this.WALLS.length - 1; ee > -1; ee--) {\n        // SEARCH MOST YOUNG WALL COORDS IN NODE BINDER\n        if (isObjectsEquals(this.WALLS[ee].start, nodeControl) || isObjectsEquals(this.WALLS[ee].end, nodeControl)) {\n          this.wallListRun.push(this.WALLS[ee]);\n          break;\n        }\n      }\n      if (this.wallListRun[0].child != null) {\n        if (isObjectsEquals(this.wallListRun[0].child.start, nodeControl) || isObjectsEquals(this.wallListRun[0].child.end, nodeControl)) {\n          this.wallListRun.push(this.wallListRun[0].child);\n        }\n      }\n      if (this.wallListRun[0].parent != null) {\n        if (isObjectsEquals(this.wallListRun[0].parent.start, nodeControl) || isObjectsEquals(this.wallListRun[0].parent.end, nodeControl)) {\n          this.wallListRun.push(this.wallListRun[0].parent);\n        }\n      }\n      for (var k in this.wallListRun) {\n        if (isObjectsEquals(this.wallListRun[k].start, nodeControl) || isObjectsEquals(this.wallListRun[k].end, nodeControl)) {\n          let nodeTarget = this.wallListRun[k].start;\n          if (isObjectsEquals(this.wallListRun[k].start, nodeControl)) {\n            nodeTarget = this.wallListRun[k].end;\n          }\n          objWall = this.editor.objFromWall(this.wallListRun[k]); // LIST OBJ ON EDGE -- NOT INDEX !!!\n          var wall = this.wallListRun[k];\n          for (var ob = 0; ob < objWall.length; ob++) {\n            var objTarget = objWall[ob];\n            const distance = this.qSVG.measure(objTarget, nodeTarget);\n            wallListObj.push({\n              wall: wall,\n              from: nodeTarget,\n              distance: distance,\n              obj: objTarget,\n              indexObj: ob\n            });\n          }\n        }\n      }\n      this.magnetic = 0;\n      this.action = 1;\n    }\n    if (this.binder.type == 'segment') {\n      $('#boxScale').hide(100);\n      var wall = this.binder.wall;\n      this.binder.before = this.binder.wall.start;\n      this.equation2 = this.editor.createEquationFromWall(wall);\n      if (wall.parent != null) {\n        this.equation1 = this.editor.createEquationFromWall(wall.parent);\n        const angle12 = this.qSVG.angleBetweenEquations(this.equation1.A, this.equation2.A);\n        if (angle12 < 20 || angle12 > 160) {\n          var found = true;\n          for (var k in this.WALLS) {\n            if (this.qSVG.rayCasting(wall.start, this.WALLS[k].coords) && !isObjectsEquals(this.WALLS[k], wall.parent) && !isObjectsEquals(this.WALLS[k], wall)) {\n              if (wall.parent.parent != null && isObjectsEquals(wall, wall.parent.parent)) {\n                wall.parent.parent = null;\n              }\n              if (wall.parent.child != null && isObjectsEquals(wall, wall.parent.child)) {\n                wall.parent.child = null;\n              }\n              wall.parent = null;\n              found = false;\n              break;\n            }\n          }\n          if (found) {\n            var newWall;\n            if (isObjectsEquals(wall.parent.end, wall.start)) {\n              newWall = this.editor.wall(wall.parent.end, wall.start, 'normal', wall.thick);\n              this.WALLS.push(newWall);\n              newWall.parent = wall.parent;\n              newWall.child = wall;\n              wall.parent.child = newWall;\n              wall.parent = newWall;\n              this.equation1 = this.qSVG.perpendicularEquation(this.equation2, wall.start.x, wall.start.y);\n            } else if (isObjectsEquals(wall.parent.start, wall.start)) {\n              newWall = this.editor.wall(wall.parent.start, wall.start, 'normal', wall.thick);\n              this.WALLS.push(newWall);\n              newWall.parent = wall.parent;\n              newWall.child = wall;\n              wall.parent.parent = newWall;\n              wall.parent = newWall;\n              this.equation1 = this.qSVG.perpendicularEquation(this.equation2, wall.start.x, wall.start.y);\n            }\n            // CREATE NEW WALL\n          }\n        }\n      }\n\n      if (wall.parent == null) {\n        var foundEq = false;\n        for (var k in this.WALLS) {\n          if (this.qSVG.rayCasting(wall.start, this.WALLS[k].coords) && !isObjectsEquals(this.WALLS[k].coords, wall.coords)) {\n            var angleFollow = this.qSVG.angleBetweenEquations(this.WALLS[k].equations.base.A, this.equation2.A);\n            if (angleFollow < 20 || angleFollow > 160) {\n              break;\n            }\n            this.equation1 = this.editor.createEquationFromWall(this.WALLS[k]);\n            this.equation1.follow = this.WALLS[k];\n            this.equation1.backUp = {\n              coords: this.WALLS[k].coords,\n              start: this.WALLS[k].start,\n              end: this.WALLS[k].end,\n              child: this.WALLS[k].child,\n              parent: this.WALLS[k].parent\n            };\n            foundEq = true;\n            break;\n          }\n        }\n        if (!foundEq) {\n          this.equation1 = this.qSVG.perpendicularEquation(this.equation2, wall.start.x, wall.start.y);\n        }\n      }\n      if (wall.child != null) {\n        this.equation3 = this.editor.createEquationFromWall(wall.child);\n        const angle23 = this.qSVG.angleBetweenEquations(this.equation3.A, this.equation2.A);\n        if (angle23 < 20 || angle23 > 160) {\n          var found = true;\n          for (var k in this.WALLS) {\n            if (this.qSVG.rayCasting(wall.end, this.WALLS[k].coords) && !isObjectsEquals(this.WALLS[k], wall.child) && !isObjectsEquals(this.WALLS[k], wall)) {\n              if (wall.child.parent != null && isObjectsEquals(wall, wall.child.parent)) {\n                wall.child.parent = null;\n              }\n              if (wall.child.child != null && isObjectsEquals(wall, wall.child.child)) {\n                wall.child.child = null;\n              }\n              wall.child = null;\n              found = false;\n              break;\n            }\n          }\n          if (found) {\n            if (isObjectsEquals(wall.child.start, wall.end)) {\n              var newWall = this.editor.wall(wall.end, wall.child.start, 'new', wall.thick);\n              this.WALLS.push(newWall);\n              newWall.parent = wall;\n              newWall.child = wall.child;\n              wall.child.parent = newWall;\n              wall.child = newWall;\n              this.equation3 = this.qSVG.perpendicularEquation(equation2, wall.end.x, wall.end.y);\n            } else if (isObjectsEquals(wall.child.end, wall.end)) {\n              var newWall = this.editor.wall(wall.end, wall.child.end, 'normal', wall.thick);\n              this.WALLS.push(newWall);\n              newWall.parent = wall;\n              newWall.child = wall.child;\n              wall.child.child = newWall;\n              wall.child = newWall;\n              this.equation3 = this.qSVG.perpendicularEquation(this.equation2, wall.end.x, wall.end.y);\n            }\n            // CREATE NEW WALL\n          }\n        }\n      }\n\n      if (wall.child == null) {\n        var foundEq = false;\n        for (var k in this.WALLS) {\n          if (this.qSVG.rayCasting(wall.end, this.WALLS[k].coords) && !isObjectsEquals(this.WALLS[k].coords, wall.coords)) {\n            var angleFollow = this.qSVG.angleBetweenEquations(this.WALLS[k].equations.base.A, this.equation2.A);\n            if (angleFollow < 20 || angleFollow > 160) {\n              break;\n            }\n            this.equation3 = this.editor.createEquationFromWall(this.WALLS[k]);\n            this.equation3.follow = this.WALLS[k];\n            this.equation3.backUp = {\n              coords: this.WALLS[k].coords,\n              start: this.WALLS[k].start,\n              end: this.WALLS[k].end,\n              child: this.WALLS[k].child,\n              parent: this.WALLS[k].parent\n            };\n            foundEq = true;\n            break;\n          }\n        }\n        if (!foundEq) {\n          this.equation3 = this.qSVG.perpendicularEquation(this.equation2, wall.end.x, wall.end.y);\n        }\n      }\n      this.equationFollowers = [];\n      for (var k in this.WALLS) {\n        if (this.WALLS[k].child == null && this.qSVG.rayCasting(this.WALLS[k].end, wall.coords) && !isObjectsEquals(wall, this.WALLS[k])) {\n          this.equationFollowers.push({\n            wall: this.WALLS[k],\n            eq: this.editor.createEquationFromWall(this.WALLS[k]),\n            type: 'end'\n          });\n        }\n        if (this.WALLS[k].parent == null && this.qSVG.rayCasting(this.WALLS[k].start, wall.coords) && !isObjectsEquals(wall, this.WALLS[k])) {\n          this.equationFollowers.push({\n            wall: this.WALLS[k],\n            eq: this.editor.createEquationFromWall(this.WALLS[k]),\n            type: 'start'\n          });\n        }\n      }\n      this.equationsObj = [];\n      var objWall = this.editor.objFromWall(wall); // LIST OBJ ON EDGE\n      for (var ob = 0; ob < objWall.length; ob++) {\n        var objTarget = objWall[ob];\n        this.equationsObj.push({\n          obj: objTarget,\n          wall: wall,\n          eq: this.qSVG.perpendicularEquation(this.equation2, objTarget.x, objTarget.y)\n        });\n      }\n      this.action = 1;\n    }\n  } else {\n    this.action = 0;\n    this.drag = 'on';\n    const snap = this.calcul_snap(event, this.grid_snap);\n    this.pox = snap.xMouse;\n    this.poy = snap.yMouse;\n  }\n};\nApplication.prototype.mouseDown_mode_line_partition = function (event) {\n  if (this.mode !== 'line_mode' && this.mode !== 'partition_mode') {\n    return;\n  }\n  if (this.action == 0) {\n    const snap = this.calcul_snap(event, this.grid_snap);\n    this.pox = snap.x;\n    this.poy = snap.y;\n    if (this.wallStartConstruc = this.editor.nearWall(snap, 12)) {\n      // TO SNAP SEGMENT TO FINALIZE X2Y2\n      this.pox = this.wallStartConstruc.x;\n      this.poy = this.wallStartConstruc.y;\n    }\n  } else {\n    this.construc = 1;\n  }\n  this.action = 1;\n};\nApplication.prototype.mouseDown_mode_distance = function (event) {\n  if (this.mode !== 'distance_mode') {\n    return;\n  }\n  if (this.action == 0) {\n    this.action = 1;\n    const snap = this.calcul_snap(event, this.grid_snap);\n    this.pox = snap.x;\n    this.poy = snap.y;\n  }\n};\nApplication.prototype.mouseDown_mode_edit_door = function (event) {\n  if (this.mode !== 'edit_door_mode') {\n    return;\n  }\n\n  // ACTION 1 ACTIVATE EDITION OF THE DOOR\n  this.action = 1;\n  $('#lin').css('cursor', 'pointer');\n};\nApplication.prototype.mouseDownHandler = function (event) {\n  event.preventDefault();\n  this.mouseDown_mode_select(event);\n  this.mouseDown_mode_line_partition(event);\n  this.mouseDown_mode_distance(event);\n  this.mouseDown_mode_edit_door(event);\n};\nApplication.prototype.mouseMove_mode_select = function (event) {\n  if (this.mode !== 'select_mode') {\n    return;\n  }\n  if (this.drag === 'off') {\n    // FIRST TEST ON SELECT MODE (and drag OFF) to detect MOUSEOVER DOOR\n    const snap = this.calcul_snap(event, 'off');\n    let objTarget = false;\n    for (let i = 0; i < this.OBJDATA.length; i++) {\n      const objX1 = this.OBJDATA[i].bbox.left;\n      const objX2 = this.OBJDATA[i].bbox.right;\n      const objY1 = this.OBJDATA[i].bbox.top;\n      const objY2 = this.OBJDATA[i].bbox.bottom;\n      const realBboxCoords = this.OBJDATA[i].realBbox;\n      if (this.qSVG.rayCasting(snap, realBboxCoords)) {\n        objTarget = this.OBJDATA[i];\n      }\n    }\n    if (objTarget !== false) {\n      if (typeof this.binder != 'undefined' && this.binder.type == 'segment') {\n        this.binder.graph.remove();\n        this.binder = undefined;\n        cursor('default');\n      }\n      if (objTarget.params.bindBox) {\n        // OBJ -> BOUNDINGBOX TOOL\n        if (typeof this.binder == 'undefined') {\n          this.binder = this.editor.obj2D('free', 'boundingBox', '', objTarget.bbox.origin, objTarget.angle, 0, objTarget.size, 'normal', objTarget.thick, objTarget.realBbox);\n          this.binder.update();\n          this.binder.obj = objTarget;\n          this.binder.type = 'boundingBox';\n          this.binder.oldX = this.binder.x;\n          this.binder.oldY = this.binder.y;\n          $('#boxbind').append(this.binder.graph);\n          if (!objTarget.params.move) {\n            cursor('trash');\n          } // LIKE MEASURE ON PLAN\n          if (objTarget.params.move) {\n            cursor('move');\n          }\n        }\n      } else {\n        // DOOR, WINDOW, APERTURE.. -- OBJ WITHOUT BINDBOX (params.bindBox = False) -- !!!!\n        if (typeof this.binder == 'undefined') {\n          let wallList = this.editor.rayCastingWall(objTarget);\n          if (wallList.length > 1) {\n            wallList = wallList[0];\n          }\n          this.inWallRib(wallList);\n          const thickObj = wallList.thick;\n          const sizeObj = objTarget.size;\n          this.binder = this.editor.obj2D('inWall', 'socle', '', objTarget, objTarget.angle, 0, sizeObj, 'normal', thickObj);\n          this.binder.update();\n          this.binder.oldXY = {\n            x: objTarget.x,\n            y: objTarget.y\n          }; // FOR OBJECT MENU\n          $('#boxbind').append(this.binder.graph);\n        } else {\n          if (event.target == this.binder.graph.get(0).firstChild) {\n            cursor('move');\n            this.binder.graph.get(0).firstChild.setAttribute('class', 'circle_css_2');\n            this.binder.type = 'obj';\n            this.binder.obj = objTarget;\n          } else {\n            cursor('default');\n            this.binder.graph.get(0).firstChild.setAttribute('class', 'circle_css_1');\n            this.binder.type = false;\n          }\n        }\n      }\n    } else {\n      if (typeof this.binder != 'undefined') {\n        if (typeof this.binder.graph != 'undefined') {\n          this.binder.graph.remove();\n        }\n        if (this.binder.type == 'node') {\n          this.binder.remove();\n        }\n        this.binder = undefined;\n        cursor('default');\n        this.rib();\n      }\n    }\n\n    // BIND CIRCLE IF nearNode and GROUP ALL SAME XY SEG POINTS\n    if (this.wallNode = this.editor.nearWallNode(snap, 20)) {\n      if (typeof this.binder == 'undefined' || this.binder.type == 'segment') {\n        this.binder = this.qSVG.create('boxbind', 'circle', {\n          id: 'circlebinder',\n          class: 'circle_css_2',\n          cx: this.wallNode.x,\n          cy: this.wallNode.y,\n          r: this.Rcirclebinder\n        });\n        this.binder.data = this.wallNode;\n        this.binder.type = 'node';\n        if ($('#linebinder').length) {\n          $('#linebinder').remove();\n        }\n      } else {\n        // REMAKE CIRCLE_CSS ON BINDER AND TAKE DATA SEG GROUP\n        // if (typeof(binder) != 'undefined') {\n        //     binder.attr({\n        //         class: \"circle_css_2\"\n        //     });\n        // }\n      }\n      cursor('move');\n    } else {\n      if (typeof this.binder != 'undefined' && this.binder.type == 'node') {\n        this.binder.remove();\n        this.binder = undefined;\n        this.hideAllSize();\n        cursor('default');\n        this.rib();\n      }\n    }\n\n    // BIND WALL WITH NEARPOINT function ---> WALL BINDER CREATION\n    if (this.wallBind = this.editor.rayCastingWalls(snap, this.WALLS)) {\n      if (this.wallBind.length > 1) {\n        this.wallBind = this.wallBind[this.wallBind.length - 1];\n      }\n      if (this.wallBind && typeof this.binder == 'undefined') {\n        var objWall = this.editor.objFromWall(this.wallBind);\n        if (objWall.length > 0) {\n          this.editor.inWallRib2(this.wallBind);\n        }\n        this.binder = {};\n        this.binder.wall = this.wallBind;\n        this.inWallRib(this.binder.wall);\n        var line = this.qSVG.create('none', 'line', {\n          x1: this.binder.wall.start.x,\n          y1: this.binder.wall.start.y,\n          x2: this.binder.wall.end.x,\n          y2: this.binder.wall.end.y,\n          'stroke-width': 5,\n          stroke: '#5cba79'\n        });\n        var ball1 = this.qSVG.create('none', 'circle', {\n          class: 'circle_css',\n          cx: this.binder.wall.start.x,\n          cy: this.binder.wall.start.y,\n          r: this.Rcirclebinder / 1.8\n        });\n        var ball2 = this.qSVG.create('none', 'circle', {\n          class: 'circle_css',\n          cx: this.binder.wall.end.x,\n          cy: this.binder.wall.end.y,\n          r: this.Rcirclebinder / 1.8\n        });\n        this.binder.graph = this.qSVG.create('none', 'g');\n        this.binder.graph.append(line);\n        this.binder.graph.append(ball1);\n        this.binder.graph.append(ball2);\n        $('#boxbind').append(this.binder.graph);\n        this.binder.type = 'segment';\n        cursor('pointer');\n      }\n    } else {\n      if (this.wallBind = this.editor.nearWall(snap, 6)) {\n        if (this.wallBind && typeof this.binder == 'undefined') {\n          this.wallBind = this.wallBind.wall;\n          var objWall = this.editor.objFromWall(this.wallBind);\n          if (objWall.length > 0) {\n            this.editor.inWallRib2(this.wallBind);\n          }\n          this.binder = {};\n          this.binder.wall = this.wallBind;\n          this.inWallRib(this.binder.wall);\n          var line = this.qSVG.create('none', 'line', {\n            x1: this.binder.wall.start.x,\n            y1: this.binder.wall.start.y,\n            x2: this.binder.wall.end.x,\n            y2: this.binder.wall.end.y,\n            'stroke-width': 5,\n            stroke: '#5cba79'\n          });\n          var ball1 = this.qSVG.create('none', 'circle', {\n            class: 'circle_css',\n            cx: this.binder.wall.start.x,\n            cy: this.binder.wall.start.y,\n            r: this.Rcirclebinder / 1.8\n          });\n          var ball2 = this.qSVG.create('none', 'circle', {\n            class: 'circle_css',\n            cx: this.binder.wall.end.x,\n            cy: this.binder.wall.end.y,\n            r: this.Rcirclebinder / 1.8\n          });\n          this.binder.graph = this.qSVG.create('none', 'g');\n          this.binder.graph.append(line);\n          this.binder.graph.append(ball1);\n          this.binder.graph.append(ball2);\n          $('#boxbind').append(this.binder.graph);\n          this.binder.type = 'segment';\n          cursor('pointer');\n        }\n      } else {\n        if (typeof this.binder != 'undefined' && this.binder.type == 'segment') {\n          this.binder.graph.remove();\n          this.binder = undefined;\n          this.hideAllSize();\n          cursor('default');\n          this.rib();\n        }\n      }\n    }\n  } else if (this.drag === 'on') {\n    $('#lin').css('cursor', 'move');\n    const xxx_mouse = event.pageX * this.scaleFactor - this.offset.left * this.scaleFactor + this.originX_viewbox;\n    const yyy_mouse = event.pageY * this.scaleFactor - this.offset.top * this.scaleFactor + this.originY_viewbox;\n    const distX = (xxx_mouse - this.pox) * this.scaleFactor;\n    const distY = (yyy_mouse - this.poy) * this.scaleFactor;\n    this.zoom_maker('zoomdrag', distX, distY);\n  }\n};\nApplication.prototype.mouseMove_mode_line_partition = function (event) {\n  if (this.mode !== 'line_mode' && this.mode !== 'partition_mode') {\n    return;\n  }\n  if (this.action == 0) {\n    const snap = this.calcul_snap(event, 'off');\n    cursor('grab');\n    this.pox = snap.x;\n    this.poy = snap.y;\n    if (this.helpConstruc = this.intersection(snap, 25)) {\n      if (this.helpConstruc.distance < 10) {\n        this.pox = this.helpConstruc.x;\n        this.poy = this.helpConstruc.y;\n        cursor('grab');\n      } else {\n        cursor('crosshair');\n      }\n    }\n    if (this.wallNode = this.editor.nearWallNode(snap, 20)) {\n      this.pox = this.wallNode.x;\n      this.poy = this.wallNode.y;\n      cursor('grab');\n      if (typeof this.binder == 'undefined') {\n        this.binder = this.qSVG.create('boxbind', 'circle', {\n          id: 'circlebinder',\n          class: 'circle_css_2',\n          cx: this.wallNode.x,\n          cy: this.wallNode.y,\n          r: this.Rcirclebinder / 1.5\n        });\n      }\n      this.intersectionOff();\n    } else {\n      if (!this.helpConstruc) {\n        cursor('crosshair');\n      }\n      if (typeof this.binder != 'undefined') {\n        if (this.binder.graph) {\n          this.binder.graph.remove();\n        } else {\n          this.binder.remove();\n        }\n        this.binder = undefined;\n      }\n    }\n  } else if (this.action == 1) {\n    const snap = this.calcul_snap(event, this.grid_snap);\n    this.x = snap.x;\n    this.y = snap.y;\n    const starter = minMoveGrid(snap, this.pox, this.poy);\n    if (!$('#line_construc').length) {\n      if (this.wallNode = this.editor.nearWallNode(snap, 20)) {\n        this.pox = this.wallNode.x;\n        this.poy = this.wallNode.y;\n        this.wallStartConstruc = false;\n        if (this.wallNode.bestWall == this.WALLS.length - 1) {\n          cursor('validation');\n        } else {\n          cursor('grab');\n        }\n      } else {\n        cursor('crosshair');\n      }\n    }\n    if (starter > this.grid) {\n      if (!$('#line_construc').length) {\n        let ws = 20;\n        if (this.mode == 'partition_mode') {\n          ws = 10;\n        }\n        lineconstruc = this.qSVG.create('boxbind', 'line', {\n          id: 'line_construc',\n          x1: this.pox,\n          y1: this.poy,\n          x2: this.x,\n          y2: this.y,\n          'stroke-width': ws,\n          'stroke-linecap': 'butt',\n          'stroke-opacity': 0.7,\n          stroke: '#9fb2e2'\n        });\n        svgadd = this.qSVG.create('boxbind', 'line', {\n          // ORANGE TEMP LINE FOR ANGLE 0 90 45 -+\n          id: 'linetemp',\n          x1: this.pox,\n          y1: this.poy,\n          x2: this.x,\n          y2: this.y,\n          stroke: 'transparent',\n          'stroke-width': 0.5,\n          'stroke-opacity': '0.9'\n        });\n      } else {\n        // THE LINES AND BINDER ARE CREATED\n\n        $('#linetemp').attr({\n          x2: this.x,\n          y2: this.y\n        });\n        if (helpConstrucEnd = this.intersection(snap, 10)) {\n          this.x = helpConstrucEnd.x;\n          this.y = helpConstrucEnd.y;\n        }\n        if (wallEndConstruc = this.editor.nearWall(snap, 12)) {\n          // TO SNAP SEGMENT TO FINALIZE X2Y2\n          this.x = wallEndConstruc.x;\n          this.y = wallEndConstruc.y;\n          cursor('grab');\n        } else {\n          cursor('crosshair');\n        }\n\n        // nearNode helped to attach the end of the construc line\n        if (this.wallNode = this.editor.nearWallNode(snap, 20)) {\n          if (typeof this.binder == 'undefined') {\n            this.binder = this.qSVG.create('boxbind', 'circle', {\n              id: 'circlebinder',\n              class: 'circle_css_2',\n              cx: this.wallNode.x,\n              cy: this.wallNode.y,\n              r: this.Rcirclebinder / 1.5\n            });\n          }\n          $('#line_construc').attr({\n            x2: this.wallNode.x,\n            y2: this.wallNode.y\n          });\n          this.x = this.wallNode.x;\n          this.y = this.wallNode.y;\n          wallEndConstruc = true;\n          this.intersectionOff();\n          if (this.wallNode.bestWall == this.WALLS.length - 1 && document.getElementById('multi').checked) {\n            cursor('validation');\n          } else {\n            cursor('grab');\n          }\n        } else {\n          if (typeof this.binder != 'undefined') {\n            this.binder.remove();\n            this.binder = undefined;\n          }\n          if (wallEndConstruc === false) {\n            cursor('crosshair');\n          }\n        }\n        // LINETEMP AND LITLLE SNAPPING FOR HELP TO CONSTRUC ANGLE 0 90 45 *****************************************\n        const fltt = this.qSVG.angle(this.pox, this.poy, this.x, this.y);\n        const flt = Math.abs(fltt.deg);\n        const coeff = fltt.deg / flt; // -45 -> -1     45 -> 1\n        const phi = this.poy - coeff * this.pox;\n        const Xdiag = (this.y - phi) / coeff;\n        if (typeof this.binder == 'undefined') {\n          // HELP FOR H LINE\n          let found = false;\n          if (flt < 15 && Math.abs(this.poy - this.y) < 25) {\n            this.y = this.poy;\n            found = true;\n          } // HELP FOR V LINE\n          if (flt > 75 && Math.abs(this.pox - this.x) < 25) {\n            this.x = this.pox;\n            found = true;\n          } // HELP FOR DIAG LINE\n          if (flt < 55 && flt > 35 && Math.abs(Xdiag - this.x) < 20) {\n            this.x = Xdiag;\n            found = true;\n          }\n          if (found) {\n            $('#line_construc').attr({\n              'stroke-opacity': 1\n            });\n          } else {\n            $('#line_construc').attr({\n              'stroke-opacity': 0.7\n            });\n          }\n        }\n        $('#line_construc').attr({\n          x2: this.x,\n          y2: this.y\n        });\n\n        // SHOW WALL SIZE -------------------------------------------------------------------------\n        const startText = this.qSVG.middle(this.pox, this.poy, this.x, this.y);\n        const angleText = this.qSVG.angle(this.pox, this.poy, this.x, this.y);\n        const valueText = (this.qSVG.measure({\n          x: this.pox,\n          y: this.poy\n        }, {\n          x: this.x,\n          y: this.y\n        }) / 60).toFixed(2);\n        if (typeof this.lengthTemp == 'undefined') {\n          this.lengthTemp = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n          this.lengthTemp.setAttributeNS(null, 'x', startText.x);\n          this.lengthTemp.setAttributeNS(null, 'y', startText.y - 15);\n          this.lengthTemp.setAttributeNS(null, 'text-anchor', 'middle');\n          this.lengthTemp.setAttributeNS(null, 'stroke', 'none');\n          this.lengthTemp.setAttributeNS(null, 'stroke-width', '0.6px');\n          this.lengthTemp.setAttributeNS(null, 'fill', '#777777');\n          this.lengthTemp.textContent = valueText + 'm';\n          $('#boxbind').append(this.lengthTemp);\n        }\n        if (typeof this.lengthTemp != 'undefined' && valueText > 0.1) {\n          this.lengthTemp.setAttributeNS(null, 'x', startText.x);\n          this.lengthTemp.setAttributeNS(null, 'y', startText.y - 15);\n          this.lengthTemp.setAttribute('transform', 'rotate(' + angleText.deg + ' ' + startText.x + ',' + startText.y + ')');\n          this.lengthTemp.textContent = valueText + ' m';\n        }\n        if (typeof this.lengthTemp != 'undefined' && valueText < 0.1) {\n          this.lengthTemp.textContent = '';\n        }\n      }\n    }\n  }\n};\nApplication.prototype.mouseMove_mode_door = function (event) {\n  if (this.mode !== 'door_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (wallSelect = this.editor.nearWall(snap)) {\n    const wall = wallSelect.wall;\n    if (wall.type != 'separate') {\n      if (typeof this.binder == 'undefined') {\n        // family, classe, type, pos, angle, angleSign, size, hinge, thick\n        this.binder = this.editor.obj2D('inWall', 'doorWindow', this.modeOption, wallSelect, 0, 0, 60, 'normal', wall.thick);\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        if (Math.sign(newAngle) == 1) {\n          angleWall += 180;\n          this.binder.angleSign = 1;\n        }\n        const startCoords = this.qSVG.middle(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        this.binder.x = startCoords.x;\n        this.binder.y = startCoords.y;\n        this.binder.angle = angleWall;\n        this.binder.update();\n        $('#boxbind').append(this.binder.graph);\n      } else {\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        this.binder.angleSign = 0;\n        if (Math.sign(this.newAngle) == 1) {\n          this.binder.angleSign = 1;\n          angleWall += 180;\n        }\n        const limits = limitObj(wall.equations.base, this.binder.size, wallSelect);\n        if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y) && this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n          this.binder.x = wallSelect.x;\n          this.binder.y = wallSelect.y;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.limit = limits;\n          this.binder.update();\n        }\n        if (wallSelect.x == wall.start.x && wallSelect.y == wall.start.y || wallSelect.x == wall.end.x && wallSelect.y == wall.end.y) {\n          if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[0].x;\n            this.binder.y = limits[0].y;\n          }\n          if (this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[1].x;\n            this.binder.y = limits[1].y;\n          }\n          this.binder.limit = limits;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.update();\n        }\n      }\n    }\n  } else {\n    if (typeof this.binder != 'undefined') {\n      this.binder.graph.remove();\n      this.binder = undefined;\n    }\n  }\n};\nApplication.prototype.mouseMove_mode_network = function (event) {\n  if (this.mode !== 'network_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (wallSelect = this.editor.nearWall(snap)) {\n    const wall = wallSelect.wall;\n    if (wall.type != 'separate') {\n      if (typeof this.binder == 'undefined') {\n        // family, classe, type, pos, angle, angleSign, size, hinge, thick\n        this.binder = this.editor.obj2D('inWall', 'network', this.modeOption, wallSelect, 0, 0, 60, 'normal', wall.thick);\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        if (Math.sign(newAngle) == 1) {\n          angleWall += 180;\n          this.binder.angleSign = 1;\n        }\n        const startCoords = this.qSVG.middle(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        this.binder.x = startCoords.x;\n        this.binder.y = startCoords.y;\n        this.binder.angle = angleWall;\n        this.binder.update();\n        $('#boxbind').append(this.binder.graph);\n      } else {\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        this.binder.angleSign = 0;\n        if (Math.sign(newAngle) == 1) {\n          this.binder.angleSign = 1;\n          angleWall += 180;\n        }\n        const limits = limitObj(wall.equations.base, this.binder.size, wallSelect);\n        if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y) && this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n          this.binder.x = wallSelect.x;\n          this.binder.y = wallSelect.y;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.limit = limits;\n          this.binder.update();\n        }\n        if (wallSelect.x == wall.start.x && wallSelect.y == wall.start.y || wallSelect.x == wall.end.x && wallSelect.y == wall.end.y) {\n          if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[0].x;\n            this.binder.y = limits[0].y;\n          }\n          if (this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[1].x;\n            this.binder.y = limits[1].y;\n          }\n          this.binder.limit = limits;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.update();\n        }\n      }\n    }\n  } else {\n    if (typeof this.binder != 'undefined') {\n      this.binder.graph.remove();\n      this.binder = undefined;\n    }\n  }\n};\nApplication.prototype.mouseMove_mode_electrical = function (event) {\n  if (this.mode !== 'electrical_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (wallSelect = this.editor.nearWall(snap)) {\n    const wall = wallSelect.wall;\n    if (wall.type != 'separate') {\n      if (typeof this.binder == 'undefined') {\n        // family, classe, type, pos, angle, angleSign, size, hinge, thick\n        this.binder = this.editor.obj2D('inWall', 'electrical', this.modeOption, wallSelect, 0, 0, 60, 'normal', wall.thick);\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        if (Math.sign(newAngle) == 1) {\n          angleWall += 180;\n          this.binder.angleSign = 1;\n        }\n        const startCoords = this.qSVG.middle(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        this.binder.x = startCoords.x;\n        this.binder.y = startCoords.y;\n        this.binder.angle = angleWall;\n        this.binder.update();\n        $('#boxbind').append(this.binder.graph);\n      } else {\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        var v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        var v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        var newAngle = this.qSVG.vectorDeter(v1, v2);\n        this.binder.angleSign = 0;\n        if (Math.sign(newAngle) == 1) {\n          this.binder.angleSign = 1;\n          angleWall += 180;\n        }\n        const limits = limitObj(wall.equations.base, this.binder.size, wallSelect);\n        if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y) && this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n          this.binder.x = wallSelect.x;\n          this.binder.y = wallSelect.y;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.limit = limits;\n          this.binder.update();\n        }\n        if (wallSelect.x == wall.start.x && wallSelect.y == wall.start.y || wallSelect.x == wall.end.x && wallSelect.y == wall.end.y) {\n          if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[0].x;\n            this.binder.y = limits[0].y;\n          }\n          if (this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[1].x;\n            this.binder.y = limits[1].y;\n          }\n          this.binder.limit = limits;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          this.binder.update();\n        }\n      }\n    }\n  } else {\n    if (typeof this.binder != 'undefined') {\n      this.binder.graph.remove();\n      this.binder = undefined;\n    }\n  }\n};\nApplication.prototype.mouseMove_mode_distance = function (event) {\n  if (this.mode !== 'distance_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (typeof this.binder == 'undefined') {\n    cross = this.qSVG.create('boxbind', 'path', {\n      d: 'M-3000,0 L3000,0 M0,-3000 L0,3000',\n      'stroke-width': 0.5,\n      'stroke-opacity': '0.8',\n      stroke: '#e2b653',\n      fill: '#e2b653'\n    });\n    this.binder = this.editor.obj2D('free', 'measure', '', {\n      x: 0,\n      y: 0\n    }, 0, 0, 0, 'normal', 0, '');\n    labelMeasure = this.qSVG.create('none', 'text', {\n      x: 0,\n      y: -10,\n      'font-size': '1.2em',\n      stroke: '#ffffff',\n      'stroke-width': '0.4px',\n      'font-family': 'roboto',\n      'text-anchor': 'middle',\n      fill: '#3672d9'\n    });\n    this.binder.graph.append(labelMeasure);\n    $('#boxbind').append(this.binder.graph);\n  } else {\n    this.x = snap.x;\n    this.y = snap.y;\n    cross.attr({\n      transform: 'translate(' + snap.x + ',' + snap.y + ')'\n    });\n    if (action == 1) {\n      const startText = this.qSVG.middle(this.pox, this.poy, this.x, this.y);\n      const angleText = this.qSVG.angle(this.pox, this.poy, this.x, this.y);\n      let valueText = this.qSVG.measure({\n        x: this.pox,\n        y: this.poy\n      }, {\n        x: this.x,\n        y: this.y\n      });\n      this.binder.size = valueText;\n      this.binder.x = startText.x;\n      this.binder.y = startText.y;\n      this.binder.angle = angleText.deg;\n      valueText = (valueText / this.meter).toFixed(2) + ' m';\n      //labelMeasure.context.textContent = valueText;\n      labelMeasure[0].textContent = valueText;\n      this.binder.update();\n    }\n  }\n};\n\n// \"cut\" functionality\nApplication.prototype.mouseMove_mode_node = function (event) {\n  if (this.mode !== 'node_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (typeof this.binder == 'undefined') {\n    if (addNode = this.editor.nearWall(snap, 30)) {\n      var x2 = addNode.wall.end.x;\n      var y2 = addNode.wall.end.y;\n      var x1 = addNode.wall.start.x;\n      var y1 = addNode.wall.start.y;\n      angleWall = this.qSVG.angle(x1, y1, x2, y2);\n      this.binder = this.qSVG.create('boxbind', 'path', {\n        id: 'circlebinder',\n        d: 'M-20,-10 L-13,0 L-20,10 Z M-13,0 L13,0 M13,0 L20,-10 L20,10 Z',\n        stroke: '#5cba79',\n        fill: '#5cba79',\n        'stroke-width': '1.5px'\n      });\n      this.binder.attr({\n        transform: 'translate(' + addNode.x + ',' + addNode.y + ') rotate(' + (angleWall.deg + 90) + ',0,0)'\n      });\n      this.binder.data = addNode;\n      this.binder.x1 = x1;\n      this.binder.x2 = x2;\n      this.binder.y1 = y1;\n      this.binder.y2 = y2;\n    }\n  } else {\n    if (addNode = this.editor.nearWall(snap, 30)) {\n      if (addNode) {\n        var x2 = addNode.wall.end.x;\n        var y2 = addNode.wall.end.y;\n        var x1 = addNode.wall.start.x;\n        var y1 = addNode.wall.start.y;\n        angleWall = this.qSVG.angle(x1, y1, x2, y2);\n        this.binder.attr({\n          transform: 'translate(' + addNode.x + ',' + addNode.y + ') rotate(' + (angleWall.deg + 90) + ',0,0)'\n        });\n        this.binder.data = addNode;\n      } else {\n        this.binder.remove();\n        this.binder = undefined;\n      }\n    } else {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n  }\n};\n\n// This is for when an SVG element is being interacted with\nApplication.prototype.mouseMove_mode_bind = function (event) {\n  if (this.mode !== 'bind_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (this.binder.type == 'node') {\n    const coords = snap;\n    let magnetic = false;\n    for (var k in this.wallListRun) {\n      if (isObjectsEquals(this.wallListRun[k].end, this.binder.data)) {\n        if (Math.abs(this.wallListRun[k].start.x - snap.x) < 20) {\n          coords.x = this.wallListRun[k].start.x;\n          magnetic = 'H';\n        }\n        if (Math.abs(this.wallListRun[k].start.y - snap.y) < 20) {\n          coords.y = this.wallListRun[k].start.y;\n          magnetic = 'V';\n        }\n      }\n      if (isObjectsEquals(this.wallListRun[k].start, this.binder.data)) {\n        if (Math.abs(this.wallListRun[k].end.x - snap.x) < 20) {\n          coords.x = this.wallListRun[k].end.x;\n          magnetic = 'H';\n        }\n        if (Math.abs(this.wallListRun[k].end.y - snap.y) < 20) {\n          coords.y = this.wallListRun[k].end.y;\n          magnetic = 'V';\n        }\n      }\n    }\n    if (nodeMove = this.editor.nearWallNode(snap, 15, this.wallListRun)) {\n      coords.x = nodeMove.x;\n      coords.y = nodeMove.y;\n      $('#circlebinder').attr({\n        class: 'circleGum',\n        cx: coords.x,\n        cy: coords.y\n      });\n      cursor('grab');\n    } else {\n      if (magnetic != false) {\n        if (magnetic == 'H') {\n          snap.x = coords.x;\n        } else {\n          snap.y = coords.y;\n        }\n      }\n      if (this.helpConstruc = this.intersection(snap, 10, this.wallListRun)) {\n        coords.x = this.helpConstruc.x;\n        coords.y = this.helpConstruc.y;\n        snap.x = this.helpConstruc.x;\n        snap.y = this.helpConstruc.y;\n        if (magnetic != false) {\n          if (magnetic == 'H') {\n            snap.x = coords.x;\n          } else {\n            snap.y = coords.y;\n          }\n        }\n        cursor('grab');\n      } else {\n        cursor('move');\n      }\n      this.binder.remove();\n      //$('#circlebinder').attr({\"class\": \"circle_css\", cx: coords.x, cy: coords.y});\n    }\n\n    for (var k in this.wallListRun) {\n      if (isObjectsEquals(this.wallListRun[k].start, this.binder.data)) {\n        this.wallListRun[k].start.x = coords.x;\n        this.wallListRun[k].start.y = coords.y;\n      }\n      if (isObjectsEquals(this.wallListRun[k].end, this.binder.data)) {\n        this.wallListRun[k].end.x = coords.x;\n        this.wallListRun[k].end.y = coords.y;\n      }\n    }\n    this.binder.data = coords;\n    this.editor.wallsComputing(this.WALLS, false); // UPDATE FALSE\n\n    for (var k in this.wallListObj) {\n      var wall = this.wallListObj[k].wall;\n      var objTarget = this.wallListObj[k].obj;\n      var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n      var limits = limitObj(wall.equations.base, 2 * this.wallListObj[k].distance, this.wallListObj[k].from); // COORDS OBJ AFTER ROTATION\n      let indexLimits = 0;\n      if (this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n        indexLimits = 1;\n      }\n      // NEW COORDS OBJDATA[obj]\n      objTarget.x = limits[indexLimits].x;\n      objTarget.y = limits[indexLimits].y;\n      objTarget.angle = angleWall;\n      if (objTarget.angleSign == 1) {\n        objTarget.angle = angleWall + 180;\n      }\n      const limitBtwn = limitObj(wall.equations.base, objTarget.size); // OBJ SIZE OK BTWN xy1/xy2\n\n      if (this.qSVG.btwn(limitBtwn[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limitBtwn[0].y, wall.start.y, wall.end.y) && this.qSVG.btwn(limitBtwn[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limitBtwn[1].y, wall.start.y, wall.end.y)) {\n        objTarget.limit = limitBtwn;\n        objTarget.update();\n      } else {\n        objTarget.graph.remove();\n        objTarget = undefined;\n        OBJDATA.splice(wall.indexObj, 1);\n        wallListObj.splice(k, 1);\n      }\n    }\n    // for (k in toClean)\n    $('#boxRoom').empty();\n    $('#boxSurface').empty();\n    Rooms = this.qSVG.polygonize(this.WALLS);\n    this.editor.roomMaker(Rooms);\n  }\n\n  // WALL MOVING ----BINDER TYPE SEGMENT-------- FUNCTION FOR H,V and Calculate Vectorial Translation\n\n  if (this.binder.type == 'segment' && this.action == 1) {\n    this.rib();\n    if (this.equation2.A == 'v') {\n      this.equation2.B = snap.x;\n    } else if (this.equation2.A == 'h') {\n      this.equation2.B = snap.y;\n    } else {\n      this.equation2.B = snap.y - snap.x * this.equation2.A;\n    }\n    const intersection1 = this.qSVG.intersectionOfEquations(this.equation1, this.equation2, 'obj');\n    const intersection2 = this.qSVG.intersectionOfEquations(this.equation2, this.equation3, 'obj');\n    const intersection3 = this.qSVG.intersectionOfEquations(this.equation1, this.equation3, 'obj');\n    if (this.binder.wall.parent != null) {\n      if (isObjectsEquals(this.binder.wall.parent.end, this.binder.wall.start)) {\n        this.binder.wall.parent.end = intersection1;\n      } else if (isObjectsEquals(this.binder.wall.parent.start, this.binder.wall.start)) {\n        this.binder.wall.parent.start = intersection1;\n      } else {\n        this.binder.wall.parent.end = intersection1;\n      }\n    }\n    if (this.binder.wall.child != null) {\n      if (isObjectsEquals(this.binder.wall.child.start, this.binder.wall.end)) {\n        this.binder.wall.child.start = intersection2;\n      } else if (isObjectsEquals(this.binder.wall.child.end, this.binder.wall.end)) {\n        this.binder.wall.child.end = intersection2;\n      } else {\n        this.binder.wall.child.start = intersection2;\n      }\n    }\n    this.binder.wall.start = intersection1;\n    this.binder.wall.end = intersection2;\n    this.binder.graph.remove();\n    // binder.graph[0].children[0].setAttribute(\"x1\",intersection1.x);\n    // binder.graph[0].children[0].setAttribute(\"x2\",intersection2.x);\n    // binder.graph[0].children[0].setAttribute(\"y1\",intersection1.y);\n    // binder.graph[0].children[0].setAttribute(\"y2\",intersection2.y);\n    // binder.graph[0].children[1].setAttribute(\"cx\",intersection1.x);\n    // binder.graph[0].children[1].setAttribute(\"cy\",intersection1.y);\n    // binder.graph[0].children[2].setAttribute(\"cx\",intersection2.x);\n    // binder.graph[0].children[2].setAttribute(\"cy\",intersection2.y);\n\n    // THE EQ FOLLOWED BY eq (PARENT EQ1 --- CHILD EQ3)\n    if (this.equation1.follow != undefined) {\n      if (!this.qSVG.rayCasting(intersection1, this.equation1.backUp.coords)) {\n        // IF OUT OF WALL FOLLOWED\n        var distanceFromStart = this.qSVG.gap(this.equation1.backUp.start, intersection1);\n        var distanceFromEnd = this.qSVG.gap(this.equation1.backUp.end, intersection1);\n        if (distanceFromStart > distanceFromEnd) {\n          // NEAR FROM End\n          this.equation1.follow.end = intersection1;\n        } else {\n          this.equation1.follow.start = intersection1;\n        }\n      } else {\n        this.equation1.follow.end = this.equation1.backUp.end;\n        this.equation1.follow.start = this.equation1.backUp.start;\n      }\n    }\n    if (this.equation3.follow != undefined) {\n      if (!this.qSVG.rayCasting(intersection2, this.equation3.backUp.coords)) {\n        // IF OUT OF WALL FOLLOWED\n        var distanceFromStart = this.qSVG.gap(this.equation3.backUp.start, intersection2);\n        var distanceFromEnd = this.qSVG.gap(this.equation3.backUp.end, intersection2);\n        if (distanceFromStart > distanceFromEnd) {\n          // NEAR FROM End\n          this.equation3.follow.end = intersection2;\n        } else {\n          this.equation3.follow.start = intersection2;\n        }\n      } else {\n        this.equation3.follow.end = this.equation3.backUp.end;\n        this.equation3.follow.start = this.equation3.backUp.start;\n      }\n    }\n\n    // EQ FOLLOWERS WALL MOVING\n    for (let i = 0; i < this.equationFollowers.length; i++) {\n      const intersectionFollowers = this.qSVG.intersectionOfEquations(this.equationFollowers[i].eq, this.equation2, 'obj');\n      if (this.qSVG.btwn(intersectionFollowers.x, this.binder.wall.start.x, this.binder.wall.end.x, 'round') && this.qSVG.btwn(intersectionFollowers.y, this.binder.wall.start.y, this.binder.wall.end.y, 'round')) {\n        const size = this.qSVG.measure(this.equationFollowers[i].wall.start, this.equationFollowers[i].wall.end);\n        if (this.equationFollowers[i].type == 'start') {\n          this.equationFollowers[i].wall.start = intersectionFollowers;\n          if (size < 5) {\n            if (this.equationFollowers[i].wall.child == null) {\n              this.WALLS.splice(this.WALLS.indexOf(this.equationFollowers[i].wall), 1);\n              this.equationFollowers.splice(i, 1);\n            }\n          }\n        }\n        if (this.equationFollowers[i].type == 'end') {\n          this.equationFollowers[i].wall.end = intersectionFollowers;\n          if (size < 5) {\n            if (this.equationFollowers[i].wall.parent == null) {\n              this.WALLS.splice(this.WALLS.indexOf(this.equationFollowers[i].wall), 1);\n              this.equationFollowers.splice(i, 1);\n            }\n          }\n        }\n      }\n    }\n    // WALL COMPUTING, BLOCK FAMILY OF BINDERWALL IF NULL (START OR END) !!!!!\n    this.editor.wallsComputing(this.WALLS, 'move');\n    Rooms = this.qSVG.polygonize(this.WALLS);\n\n    // OBJDATA(s) FOLLOW 90° EDGE SELECTED\n    for (let rp = 0; rp < this.equationsObj.length; rp++) {\n      var objTarget = this.equationsObj[rp].obj;\n      const intersectionObj = this.qSVG.intersectionOfEquations(this.equationsObj[rp].eq, this.equation2);\n      // NEW COORDS OBJDATA[o]\n      objTarget.x = intersectionObj[0];\n      objTarget.y = intersectionObj[1];\n      var limits = limitObj(this.equation2, objTarget.size, objTarget);\n      if (this.qSVG.btwn(limits[0].x, this.binder.wall.start.x, this.binder.wall.end.x) && this.qSVG.btwn(limits[0].y, this.binder.wall.start.y, this.binder.wall.end.y) && this.qSVG.btwn(limits[1].x, this.binder.wall.start.x, this.binder.wall.end.x) && this.qSVG.btwn(limits[1].y, this.binder.wall.start.y, this.binder.wall.end.y)) {\n        objTarget.limit = limits;\n        objTarget.update();\n      }\n    }\n    // DELETING ALL OBJECT \"INWALL\" OVERSIZED INTO ITS EDGE (EDGE BY EDGE CONTROL)\n    for (var k in this.WALLS) {\n      var objWall = this.editor.objFromWall(this.WALLS[k]); // LIST OBJ ON EDGE\n      for (var ob in objWall) {\n        var objTarget = objWall[ob];\n        const eq = this.editor.createEquationFromWall(this.WALLS[k]);\n        var limits = limitObj(eq, objTarget.size, objTarget);\n        if (!this.qSVG.btwn(limits[0].x, this.WALLS[k].start.x, this.WALLS[k].end.x) || !this.qSVG.btwn(limits[0].y, this.WALLS[k].start.y, this.WALLS[k].end.y) || !this.qSVG.btwn(limits[1].x, this.WALLS[k].start.x, this.WALLS[k].end.x) || !this.qSVG.btwn(limits[1].y, this.WALLS[k].start.y, this.WALLS[k].end.y)) {\n          objTarget.graph.remove();\n          objTarget = undefined;\n          const indexObj = this.OBJDATA.indexOf(objTarget);\n          this.OBJDATA.splice(indexObj, 1);\n        }\n      }\n    }\n    this.equationsObj = []; // REINIT eqObj -> MAYBE ONE OR PLUS OF OBJDATA REMOVED !!!!\n    var objWall = this.editor.objFromWall(this.binder.wall); // LIST OBJ ON EDGE\n    for (var ob = 0; ob < objWall.length; ob++) {\n      var objTarget = objWall[ob];\n      this.equationsObj.push({\n        obj: objTarget,\n        wall: this.binder.wall,\n        eq: this.qSVG.perpendicularEquation(this.equation2, objTarget.x, objTarget.y)\n      });\n    }\n    $('#boxRoom').empty();\n    $('#boxSurface').empty();\n    this.editor.roomMaker(Rooms);\n    $('#lin').css('cursor', 'pointer');\n  }\n\n  // **********************************************************************\n  // ----------------------  BOUNDING BOX ------------------------------\n  // **********************************************************************\n  // binder.obj.params.move ---> FOR MEASURE DONT MOVE\n  if (this.binder.type == 'boundingBox' && this.action == 1 && this.binder.obj.params.move) {\n    this.binder.x = snap.x;\n    this.binder.y = snap.y;\n    this.binder.obj.x = snap.x;\n    this.binder.obj.y = snap.y;\n    this.binder.obj.update();\n    this.binder.update();\n  }\n\n  // **********************************************************************\n  // OBJ MOVING\n  // **********************************************************************\n  if (this.binder.type == 'obj' && this.action == 1) {\n    if (wallSelect = this.editor.nearWall(snap)) {\n      if (wallSelect.wall.type != 'separate') {\n        this.inWallRib(wallSelect.wall);\n        var objTarget = this.binder.obj;\n        var wall = wallSelect.wall;\n        var angleWall = this.qSVG.angleDeg(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        const v1 = this.qSVG.vectorXY({\n          x: wall.start.x,\n          y: wall.start.y\n        }, {\n          x: wall.end.x,\n          y: wall.end.y\n        });\n        const v2 = this.qSVG.vectorXY({\n          x: wall.end.x,\n          y: wall.end.y\n        }, snap);\n        const newAngle = this.qSVG.vectorDeter(v1, v2);\n        this.binder.angleSign = 0;\n        objTarget.angleSign = 0;\n        if (Math.sign(newAngle) == 1) {\n          angleWall += 180;\n          this.binder.angleSign = 1;\n          objTarget.angleSign = 1;\n        }\n        var limits = limitObj(wall.equations.base, this.binder.size, wallSelect);\n        if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y) && this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n          this.binder.x = wallSelect.x;\n          this.binder.y = wallSelect.y;\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          objTarget.x = wallSelect.x;\n          objTarget.y = wallSelect.y;\n          objTarget.angle = angleWall;\n          objTarget.thick = wall.thick;\n          objTarget.limit = limits;\n          this.binder.update();\n          objTarget.update();\n        }\n        if (wallSelect.x == wall.start.x && wallSelect.y == wall.start.y || wallSelect.x == wall.end.x && wallSelect.y == wall.end.y) {\n          if (this.qSVG.btwn(limits[0].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[0].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[0].x;\n            this.binder.y = limits[0].y;\n            objTarget.x = limits[0].x;\n            objTarget.y = limits[0].y;\n            objTarget.limit = limits;\n          }\n          if (this.qSVG.btwn(limits[1].x, wall.start.x, wall.end.x) && this.qSVG.btwn(limits[1].y, wall.start.y, wall.end.y)) {\n            this.binder.x = limits[1].x;\n            this.binder.y = limits[1].y;\n            objTarget.x = limits[1].x;\n            objTarget.y = limits[1].y;\n            objTarget.limit = limits;\n          }\n          this.binder.angle = angleWall;\n          this.binder.thick = wall.thick;\n          objTarget.angle = angleWall;\n          objTarget.thick = wall.thick;\n          this.binder.update();\n          objTarget.update();\n        }\n      }\n    }\n  }\n  if (this.binder.type != 'obj' && this.binder.type != 'segment') {\n    this.rib();\n  }\n};\nApplication.prototype.mouseMove_mode_text = function (event) {\n  if (this.mode !== 'text_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (this.action == 0) {\n    cursor('text');\n  } else {\n    cursor('none');\n  }\n};\nApplication.prototype.mouseMove_mode_object = function (event) {\n  if (this.mode !== 'object_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  if (typeof this.binder == 'undefined') {\n    $('#object_list').hide(200);\n    if (this.modeOption == 'simpleStair') {\n      this.binder = this.editor.obj2D('free', 'stair', 'simpleStair', snap, 0, 0, 0, 'normal', 0, 15);\n    } else {\n      const typeObj = this.modeOption;\n      this.binder = this.editor.obj2D('free', 'energy', typeObj, snap, 0, 0, 0, 'normal', 0);\n    }\n    $('#boxbind').append(this.binder.graph);\n  } else {\n    if (this.binder.family != 'stick' && this.binder.family != 'collision' || this.WALLS.length == 0) {\n      this.binder.x = snap.x;\n      this.binder.y = snap.y;\n      this.binder.oldX = this.binder.x;\n      this.binder.oldY = this.binder.y;\n      this.binder.update();\n    }\n    if (this.binder.family == 'collision') {\n      let found = false;\n      if (this.editor.rayCastingWalls({\n        x: this.binder.bbox.left,\n        y: this.binder.bbox.top\n      })) {\n        found = true;\n      }\n      if (!found && this.editor.rayCastingWalls({\n        x: this.binder.bbox.left,\n        y: this.binder.bbox.bottom\n      })) {\n        found = true;\n      }\n      if (!found && this.editor.rayCastingWalls({\n        x: this.binder.bbox.right,\n        y: this.binder.bbox.top\n      })) {\n        found = true;\n      }\n      if (!found && this.editor.rayCastingWalls({\n        x: this.binder.bbox.right,\n        y: this.binder.bbox.bottom\n      })) {\n        found = true;\n      }\n      if (!found) {\n        this.binder.x = snap.x;\n        this.binder.y = snap.y;\n        this.binder.oldX = this.binder.x;\n        this.binder.oldY = this.binder.y;\n        this.binder.update();\n      } else {\n        this.binder.x = this.binder.oldX;\n        this.binder.y = this.binder.oldY;\n        this.binder.update();\n      }\n    }\n    if (this.binder.family == 'stick') {\n      pos = this.editor.stickOnWall(snap);\n      this.binder.oldX = pos.x;\n      this.binder.oldY = pos.y;\n      let angleWall = this.qSVG.angleDeg(pos.wall.start.x, pos.wall.start.y, pos.wall.end.x, pos.wall.end.y);\n      const v1 = this.qSVG.vectorXY({\n        x: pos.wall.start.x,\n        y: pos.wall.start.y\n      }, {\n        x: pos.wall.end.x,\n        y: pos.wall.end.y\n      });\n      const v2 = this.qSVG.vectorXY({\n        x: pos.wall.end.x,\n        y: pos.wall.end.y\n      }, snap);\n      this.binder.x = pos.x - Math.sin(pos.wall.angle * (360 / 2 * Math.PI)) * this.binder.thick / 2;\n      this.binder.y = pos.y - Math.cos(pos.wall.angle * (360 / 2 * Math.PI)) * this.binder.thick / 2;\n      const newAngle = this.qSVG.vectorDeter(v1, v2);\n      if (Math.sign(newAngle) == 1) {\n        angleWall += 180;\n        this.binder.x = pos.x + Math.sin(pos.wall.angle * (360 / 2 * Math.PI)) * binder.thick / 2;\n        this.binder.y = pos.y + Math.cos(pos.wall.angle * (360 / 2 * Math.PI)) * binder.thick / 2;\n      }\n      this.binder.angle = angleWall;\n      this.binder.update();\n    }\n  }\n};\nApplication.prototype.mouseMove_mode_room = function (event) {\n  if (this.mode !== 'room_mode') {\n    return;\n  }\n  const snap = this.calcul_snap(event, this.grid_snap);\n  let roomTarget;\n  if (roomTarget = this.editor.rayCastingRoom(snap)) {\n    if (typeof this.binder != 'undefined') {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n    const pathSurface = roomTarget.coords;\n    let pathCreate = 'M' + pathSurface[0].x + ',' + pathSurface[0].y;\n    for (let p = 1; p < pathSurface.length - 1; p++) {\n      pathCreate = pathCreate + ' ' + 'L' + pathSurface[p].x + ',' + pathSurface[p].y;\n    }\n    pathCreate = pathCreate + 'Z';\n    if (roomTarget.inside.length > 0) {\n      for (let ins = 0; ins < roomTarget.inside.length; ins++) {\n        pathCreate = pathCreate + ' M' + Rooms.polygons[roomTarget.inside[ins]].coords[Rooms.polygons[roomTarget.inside[ins]].coords.length - 1].x + ',' + Rooms.polygons[roomTarget.inside[ins]].coords[Rooms.polygons[roomTarget.inside[ins]].coords.length - 1].y;\n        for (let free = Rooms.polygons[roomTarget.inside[ins]].coords.length - 2; free > -1; free--) {\n          pathCreate = pathCreate + ' L' + Rooms.polygons[roomTarget.inside[ins]].coords[free].x + ',' + Rooms.polygons[roomTarget.inside[ins]].coords[free].y;\n        }\n      }\n    }\n    this.binder = this.qSVG.create('boxbind', 'path', {\n      id: 'roomSelected',\n      d: pathCreate,\n      fill: '#c9c14c',\n      'fill-opacity': 0.5,\n      stroke: '#c9c14c',\n      'fill-rule': 'evenodd',\n      'stroke-width': 3\n    });\n    this.binder.type = 'room';\n    this.binder.area = roomTarget.area;\n    this.binder.id = this.ROOM.indexOf(roomTarget);\n  } else {\n    if (typeof this.binder != 'undefined') {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n  }\n};\nApplication.prototype.mouseMoveHandler = function (event) {\n  event.preventDefault();\n  $('.sub').hide(100);\n  this.mouseMove_mode_select(event);\n  this.mouseMove_mode_line_partition(event);\n  this.mouseMove_mode_door(event);\n  this.mouseMove_mode_electrical(event);\n  this.mouseMove_mode_network(event);\n  this.mouseMove_mode_distance(event);\n  this.mouseMove_mode_node(event);\n  this.mouseMove_mode_bind(event);\n  this.mouseMove_mode_text(event);\n  this.mouseMove_mode_object(event);\n  this.mouseMove_mode_room(event);\n};\nApplication.prototype.mouseUp_mode_select = function (event) {\n  if (this.mode !== 'select_mode') {\n    return;\n  }\n  if (typeof this.binder != 'undefined') {\n    this.binder.remove();\n    this.binder = undefined;\n    this.save();\n  }\n};\nApplication.prototype.mouseUp_mode_line_partition = function (event) {\n  if (this.mode !== 'line_mode' && this.mode !== 'partition_mode') {\n    return;\n  }\n  $('#linetemp').remove(); // DEL LINE HELP CONSTRUC 0 45 90\n  this.intersectionOff();\n  let sizeWall = this.qSVG.measure({\n    x: this.x,\n    y: this.y\n  }, {\n    x: this.pox,\n    y: this.poy\n  });\n  sizeWall = sizeWall / this.meter;\n  if ($('#line_construc').length && sizeWall > 0.3) {\n    sizeWall = this.wallSize;\n    if (this.mode == 'partition_mode') {\n      sizeWall = partitionSize;\n    }\n    const wall = this.editor.wall({\n      x: this.pox,\n      y: this.poy\n    }, {\n      x: this.x,\n      y: this.y\n    }, 'normal', sizeWall);\n    this.WALLS.push(wall);\n    this.editor.architect(this.WALLS);\n    if (document.getElementById('multi').checked && !wallEndConstruc) {\n      cursor('validation');\n      this.action = 1;\n    } else {\n      this.action = 0;\n    }\n    $('#boxinfo').html(\"Wall added <span style='font-size:0.6em'>Moy. \" + (this.qSVG.measure({\n      x: this.pox,\n      y: this.poy\n    }, {\n      x: this.x,\n      y: this.y\n    }) / 60).toFixed(2) + ' m</span>');\n    $('#line_construc').remove(); // DEL LINE CONSTRUC HELP TO VIEW NEW SEG PATH\n    this.lengthTemp.remove();\n    this.lengthTemp = undefined;\n    construc = 0;\n    if (wallEndConstruc) {\n      this.action = 0;\n    }\n    wallEndConstruc = undefined;\n    this.pox = this.x;\n    this.poy = this.y;\n    this.save();\n  } else {\n    this.action = 0;\n    this.construc = 0;\n    $('#boxinfo').html('Select mode');\n    this.fonc_button('select_mode');\n    if (typeof this.binder != 'undefined') {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n    const snap = this.calcul_snap(event, this.grid_snap);\n    this.pox = snap.x;\n    this.poy = snap.y;\n  }\n};\nApplication.prototype.mouseUp_mode_electrical = function (event) {\n  if (this.mode !== 'electrical_mode') {\n    return;\n  }\n  if (typeof this.binder == 'undefined') {\n    $('#boxinfo').html('The plan currently contains no wall.');\n    this.fonc_button('select_mode');\n    return false;\n  }\n  this.OBJDATA.push(this.binder);\n  this.binder.graph.remove();\n  $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n  this.binder = undefined;\n  $('#boxinfo').html('Element added');\n  this.fonc_button('select_mode');\n  this.save();\n};\nApplication.prototype.mouseUp_mode_network = function (event) {\n  if (this.mode !== 'network_mode') {\n    return;\n  }\n  if (typeof this.binder == 'undefined') {\n    $('#boxinfo').html('The plan currently contains no wall.');\n    this.fonc_button('select_mode');\n    return false;\n  }\n  this.OBJDATA.push(this.binder);\n  this.binder.graph.remove();\n  $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n  this.binder = undefined;\n  $('#boxinfo').html('Element added');\n  this.fonc_button('select_mode');\n  this.save();\n};\nApplication.prototype.mouseUp_mode_door = function (event) {\n  if (this.mode !== 'door_mode') {\n    return;\n  }\n  if (typeof this.binder == 'undefined') {\n    $('#boxinfo').html('The plan currently contains no wall.');\n    this.fonc_button('select_mode');\n    return false;\n  }\n  this.OBJDATA.push(this.binder);\n  this.binder.graph.remove();\n  $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n  this.binder = undefined;\n  $('#boxinfo').html('Element added');\n  this.fonc_button('select_mode');\n  this.save();\n};\nApplication.prototype.mouseUp_mode_distance = function (event) {\n  if (this.mode !== 'distance_mode') {\n    return;\n  }\n  if (this.action == 1) {\n    this.action = 0;\n    // MODIFY BBOX FOR BINDER ZONE (TXT)\n    const bbox = this.labelMeasure.get(0).getBoundingClientRect();\n    bbox.x = bbox.x * this.scaleFactor - this.offset.left * this.scaleFactor + this.originX_viewbox;\n    bbox.y = bbox.y * this.scaleFactor - this.offset.top * this.scaleFactor + this.originY_viewbox;\n    bbox.origin = {\n      x: bbox.x + bbox.width / 2,\n      y: bbox.y + bbox.height / 2\n    };\n    this.binder.bbox = bbox;\n    this.binder.realBbox = [{\n      x: this.binder.bbox.x,\n      y: this.binder.bbox.y\n    }, {\n      x: this.binder.bbox.x + this.binder.bbox.width,\n      y: this.binder.bbox.y\n    }, {\n      x: this.binder.bbox.x + this.binder.bbox.width,\n      y: this.binder.bbox.y + this.binder.bbox.height\n    }, {\n      x: this.binder.bbox.x,\n      y: this.binder.bbox.y + this.binder.bbox.height\n    }];\n    this.binder.size = this.binder.bbox.width;\n    this.binder.thick = this.binder.bbox.height;\n    this.binder.graph.append(this.labelMeasure);\n    this.OBJDATA.push(this.binder);\n    this.binder.graph.remove();\n    $('#boxcarpentry').append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n    this.binder = undefined;\n    this.labelMeasure = undefined;\n    this.cross.remove();\n    this.cross = undefined;\n    $('#boxinfo').html('Measure added');\n    this.fonc_button('select_mode');\n    this.save();\n  }\n};\n\n// \"cut\" functionality\nApplication.prototype.mouseUp_mode_node = function (event) {\n  if (this.mode !== 'node_mode') {\n    return;\n  }\n  if (typeof this.binder != 'undefined') {\n    // ALSO ON MOUSEUP WITH HAVE CIRCLEBINDER ON ADDPOINT\n    const newWall = this.editor.wall({\n      x: this.binder.data.x,\n      y: this.binder.data.y\n    }, this.binder.data.wall.end, 'normal', this.binder.data.wall.thick);\n    this.WALLS.push(newWall);\n    this.binder.data.wall.end = {\n      x: this.binder.data.x,\n      y: this.binder.data.y\n    };\n    this.binder.remove();\n    this.binder = undefined;\n    this.editor.architect(this.WALLS);\n    this.save();\n  }\n  this.fonc_button('select_mode');\n};\n\n// This is for when an SVG element is being interacted with\nApplication.prototype.mouseUp_mode_bind = function (event) {\n  if (this.mode !== 'bind_mode') {\n    return;\n  }\n  this.action = 0;\n  this.construc = 0; // CONSTRUC 0 TO FREE BINDER GROUP NODE WALL MOVING\n  if (typeof this.binder != 'undefined') {\n    this.fonc_button('select_mode');\n    if (this.binder.type == 'node') {} // END BINDER NODE\n\n    if (this.binder.type == 'segment') {\n      let found = false;\n      if (this.binder.wall.start == this.binder.before) {\n        found = true;\n      }\n      if (found) {\n        $('#panel').hide(100);\n        const objWall = this.editor.objFromWall(this.wallBind);\n        $('#boxinfo').html('Modify a wall<br/><span style=\"font-size:0.7em;color:#de9b43\">This wall can\\'t become a separation (contains doors or windows) !</span>');\n        if (objWall.length > 0) {\n          $('#separate').hide();\n        } else if (this.binder.wall.type == 'separate') {\n          $('#separate').hide();\n          $('#rangeThick').hide();\n          $('#recombine').show();\n          $('#cutWall').hide();\n          document.getElementById('titleWallTools').textContent = 'Modify the separation';\n        } else {\n          $('#cutWall').show();\n          $('#separate').show();\n          $('#rangeThick').show();\n          $('#recombine').hide();\n          document.getElementById('titleWallTools').textContent = 'Modify the wall';\n          $('#boxinfo').html('Modify the wall');\n        }\n        $('#wallTools').show(200);\n        document.getElementById('wallWidth').setAttribute('min', 7);\n        document.getElementById('wallWidth').setAttribute('max', 50);\n        document.getElementById('wallWidthScale').textContent = '7-50';\n        document.getElementById('wallWidth').value = this.binder.wall.thick;\n        document.getElementById('wallWidthVal').textContent = this.binder.wall.thick;\n        this.mode = 'edit_wall_mode';\n      }\n      this.equation1 = undefined;\n      this.equation2 = undefined;\n      this.equation3 = undefined;\n      this.intersectionFollowers = undefined;\n    }\n    if (this.binder.type == 'obj') {\n      var moveObj = Math.abs(this.binder.oldXY.x - this.binder.x) + Math.abs(this.binder.oldXY.y - this.binder.y);\n      if (moveObj < 1) {\n        $('#panel').hide(100);\n        $('#objTools').show('200', function () {\n          $('#lin').css('cursor', 'default');\n          $('#boxinfo').html('Config. the door/window');\n          document.getElementById('doorWindowWidth').setAttribute('min', this.binder.obj.params.resizeLimit.width.min);\n          document.getElementById('doorWindowWidth').setAttribute('max', this.binder.obj.params.resizeLimit.width.max);\n          document.getElementById('doorWindowWidthScale').textContent = this.binder.obj.params.resizeLimit.width.min + '-' + this.binder.obj.params.resizeLimit.width.max;\n          document.getElementById('doorWindowWidth').value = this.binder.obj.size;\n          document.getElementById('doorWindowWidthVal').textContent = this.binder.obj.size;\n        });\n        this.mode = 'edit_door_mode';\n      } else {\n        this.mode = 'select_mode';\n        this.action = 0;\n        this.binder.graph.remove();\n        this.binder = undefined;\n      }\n    }\n    if (typeof this.binder != 'undefined' && this.binder.type == 'boundingBox') {\n      var moveObj = Math.abs(this.binder.oldX - this.binder.x) + Math.abs(this.binder.oldY - this.binder.y);\n      const objTarget = this.binder.obj;\n      if (!objTarget.params.move) {\n        // TO REMOVE MEASURE ON PLAN\n        objTarget.graph.remove();\n        OBJDATA.splice(OBJDATA.indexOf(objTarget), 1);\n        $('#boxinfo').html('Measure deleted !');\n      }\n      if (moveObj < 1 && objTarget.params.move) {\n        if (!objTarget.params.resize) {\n          $('#objBoundingBoxScale').hide();\n        } else {\n          $('#objBoundingBoxScale').show();\n        }\n        if (!objTarget.params.rotate) {\n          $('#objBoundingBoxRotation').hide();\n        } else {\n          $('#objBoundingBoxRotation').show();\n        }\n        $('#panel').hide(100);\n        $('#objBoundingBox').show('200', function () {\n          $('#lin').css('cursor', 'default');\n          $('#boxinfo').html('Modify the object');\n          document.getElementById('bboxWidth').setAttribute('min', objTarget.params.resizeLimit.width.min);\n          document.getElementById('bboxWidth').setAttribute('max', objTarget.params.resizeLimit.width.max);\n          document.getElementById('bboxWidthScale').textContent = objTarget.params.resizeLimit.width.min + '-' + objTarget.params.resizeLimit.height.max;\n          document.getElementById('bboxHeight').setAttribute('min', objTarget.params.resizeLimit.height.min);\n          document.getElementById('bboxHeight').setAttribute('max', objTarget.params.resizeLimit.height.max);\n          document.getElementById('bboxHeightScale').textContent = objTarget.params.resizeLimit.height.min + '-' + objTarget.params.resizeLimit.height.max;\n          $('#stepsCounter').hide();\n          if (objTarget.classObj == 'stair') {\n            document.getElementById('bboxStepsVal').textContent = objTarget.value;\n            $('#stepsCounter').show();\n          }\n          document.getElementById('bboxWidth').value = objTarget.width * 100;\n          document.getElementById('bboxWidthVal').textContent = objTarget.width * 100;\n          document.getElementById('bboxHeight').value = objTarget.height * 100;\n          document.getElementById('bboxHeightVal').textContent = objTarget.height * 100;\n          document.getElementById('bboxRotation').value = objTarget.angle;\n          document.getElementById('bboxRotationVal').textContent = objTarget.angle;\n        });\n        this.mode = 'edit_boundingBox_mode';\n      } else {\n        this.mode = 'select_mode';\n        this.action = 0;\n        this.binder.graph.remove();\n        this.binder = undefined;\n      }\n    }\n    if (this.mode == 'bind_mode') {\n      this.binder.remove();\n      this.binder = undefined;\n    }\n  }\n  this.save();\n};\nApplication.prototype.mouseUp_mode_text = function (event) {\n  if (this.mode !== 'text_mode') {\n    return;\n  }\n  if (this.action == 0) {\n    this.action = 1;\n    const textModal = new bootstrap.Modal($('#textToLayer'));\n    textModal.show();\n    this.mode = 'edit_text_mode';\n  }\n};\nApplication.prototype.mouseUp_mode_object = function (event) {\n  if (this.mode !== 'object_mode') {\n    return;\n  }\n  this.OBJDATA.push(this.binder);\n  this.binder.graph.remove();\n  let targetBox = 'boxcarpentry';\n  if (this.OBJDATA[this.OBJDATA.length - 1].classObj == 'energy') {\n    targetBox = 'boxEnergy';\n  }\n  if (this.OBJDATA[this.OBJDATA.length - 1].classObj == 'furniture') {\n    targetBox = 'boxFurniture';\n  }\n  $('#' + targetBox).append(this.OBJDATA[this.OBJDATA.length - 1].graph);\n  this.binder = undefined;\n  $('#boxinfo').html('Object added');\n  this.fonc_button('select_mode');\n  this.save();\n};\nApplication.prototype.mouseUp_mode_room = function (event) {\n  if (this.mode !== 'room_mode') {\n    return;\n  }\n  if (typeof this.binder == 'undefined') {\n    return false;\n  }\n  const area = this.binder.area / 3600;\n  this.binder.attr({\n    fill: 'none',\n    stroke: '#ddf00a',\n    'stroke-width': 7\n  });\n  $('.size').html(area.toFixed(2) + ' m²');\n  $('#roomIndex').val(this.binder.id);\n  if (this.ROOM[this.binder.id].surface != '') {\n    $('#roomSurface').val(this.ROOM[this.binder.id].surface);\n  } else {\n    $('#roomSurface').val('');\n  }\n  document.querySelector('#seeArea').checked = this.ROOM[this.binder.id].showSurface;\n  document.querySelector('#roomBackground').value = this.ROOM[this.binder.id].color;\n  const roomName = ROOM[this.binder.id].name;\n  document.querySelector('#roomName').value = roomName;\n  if (this.ROOM[this.binder.id].name != '') {\n    document.querySelector('#roomLabel').innerHTML = roomName + ' <span class=\"caret\"></span>';\n  } else {\n    document.querySelector('#roomLabel').innerHTML = 'None <span class=\"caret\"></span>';\n  }\n  const actionToDo = this.ROOM[this.binder.id].action;\n  document.querySelector('#' + actionToDo + 'Action').checked = true;\n  $('#panel').hide(100);\n  $('#roomTools').show('300', function () {\n    $('#lin').css('cursor', 'default');\n    $('#boxinfo').html('Config. the room');\n  });\n  this.mode = 'edit_room_mode';\n  this.save();\n};\nApplication.prototype.mouseUpHandler = function (event) {\n  // if (showRib) $('#boxScale').show(200)\n\n  this.drag = 'off';\n  cursor('default');\n  this.mouseUp_mode_select(event);\n  this.mouseUp_mode_line_partition(event);\n  this.mouseUp_mode_door(event);\n  this.mouseUp_mode_network(event);\n  this.mouseUp_mode_electrical(event);\n  this.mouseUp_mode_distance(event);\n  this.mouseUp_mode_node(event);\n  this.mouseUp_mode_bind(event);\n  this.mouseUp_mode_text(event);\n  this.mouseUp_mode_object(event);\n  this.mouseUp_mode_room(event);\n  if (this.mode != 'edit_room_mode') {\n    this.editor.showScaleBox();\n    this.rib();\n  }\n};\nApplication.prototype.qSVGFactory = function () {\n  return {\n    create: (id, shape, attrs) => {\n      var shape = $(document.createElementNS('http://www.w3.org/2000/svg', shape));\n      for (const k in attrs) {\n        shape.attr(k, attrs[k]);\n      }\n      if (id != 'none') {\n        $('#' + id).append(shape);\n      }\n      return shape;\n    },\n    angleDeg: (cx, cy, ex, ey) => {\n      const dy = ey - cy;\n      const dx = ex - cx;\n      let theta = Math.atan2(dy, dx); // range (-PI, PI]\n      theta *= 180 / Math.PI; // rads to degs, range (-180, 180]\n      if (theta < 0) {\n        theta = 360 + theta;\n      } // range [0, 360)\n      return theta;\n    },\n    angle: (x1, y1, x2, y2, x3, y3) => {\n      var x1 = parseInt(x1);\n      var y1 = parseInt(y1);\n      var x2 = parseInt(x2);\n      var y2 = parseInt(y2);\n      let anglerad;\n      if (!x3) {\n        if (x1 - x2 == 0) {\n          anglerad = Math.PI / 2;\n        } else {\n          anglerad = Math.atan((y1 - y2) / (x1 - x2));\n        }\n        var angledeg = anglerad * 180 / Math.PI;\n      } else {\n        var x3 = parseInt(x3);\n        var y3 = parseInt(y3);\n        const a = Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\n        const b = Math.sqrt(Math.pow(Math.abs(x2 - x3), 2) + Math.pow(Math.abs(y2 - y3), 2));\n        const c = Math.sqrt(Math.pow(Math.abs(x3 - x1), 2) + Math.pow(Math.abs(y3 - y1), 2));\n        if (a == 0 || b == 0) {\n          anglerad = Math.PI / 2;\n        } else {\n          anglerad = Math.acos((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / (2 * a * b));\n        }\n        angledeg = 360 * anglerad / (2 * Math.PI);\n      }\n      return {\n        rad: anglerad,\n        deg: angledeg\n      };\n    },\n    getAngle: (el1, el2) => {\n      return {\n        rad: Math.atan2(el2.y - el1.y, el2.x - el1.x),\n        deg: Math.atan2(el2.y - el1.y, el2.x - el1.x) * 180 / Math.PI\n      };\n    },\n    middle: (xo, yo, xd, yd) => {\n      const x1 = parseInt(xo);\n      const y1 = parseInt(yo);\n      const x2 = parseInt(xd);\n      const y2 = parseInt(yd);\n      const middleX = Math.abs(x1 + x2) / 2;\n      const middleY = Math.abs(y1 + y2) / 2;\n      return {\n        x: middleX,\n        y: middleY\n      };\n    },\n    triangleArea: (fp, sp, tp) => {\n      let A = 0;\n      let B = 0;\n      let C = 0;\n      let p = 0;\n      A = this.qSVG.measure(fp, sp);\n      B = this.qSVG.measure(sp, tp);\n      C = this.qSVG.measure(tp, fp);\n      p = (A + B + C) / 2;\n      return Math.sqrt(p * (p - A) * (p - B) * (p - C));\n    },\n    measure: (po, pt) => {\n      return Math.sqrt(Math.pow(po.x - pt.x, 2) + Math.pow(po.y - pt.y, 2));\n    },\n    gap: (po, pt) => {\n      return Math.pow(po.x - pt.x, 2) + Math.pow(po.y - pt.y, 2);\n    },\n    pDistance: (point, pointA, pointB) => {\n      const x = point.x;\n      const y = point.y;\n      const x1 = pointA.x;\n      const y1 = pointA.y;\n      const x2 = pointB.x;\n      const y2 = pointB.y;\n      const A = x - x1;\n      const B = y - y1;\n      const C = x2 - x1;\n      const D = y2 - y1;\n      const dot = A * C + B * D;\n      const len_sq = C * C + D * D;\n      let param = -1;\n      if (len_sq != 0) {\n        //in case of 0 length line\n        param = dot / len_sq;\n      }\n      let xx, yy;\n      if (param < 0) {\n        xx = x1;\n        yy = y1;\n      } else if (param > 1) {\n        xx = x2;\n        yy = y2;\n      } else {\n        xx = x1 + param * C;\n        yy = y1 + param * D;\n      }\n      const dx = x - xx;\n      const dy = y - yy;\n      return {\n        x: xx,\n        y: yy,\n        distance: Math.sqrt(dx * dx + dy * dy)\n      };\n    },\n    nearPointOnEquation: (equation, point) => {\n      // Y = Ax + B ---- equation {A:val, B:val}\n      const pointA = {};\n      const pointB = {};\n      if (equation.A == 'h') {\n        return {\n          x: point.x,\n          y: equation.B,\n          distance: Math.abs(equation.B - point.y)\n        };\n      } else if (equation.A == 'v') {\n        return {\n          x: equation.B,\n          y: point.y,\n          distance: Math.abs(equation.B - point.x)\n        };\n      } else {\n        pointA.x = point.x;\n        pointA.y = equation.A * point.x + equation.B;\n        pointB.x = (point.y - equation.B) / equation.A;\n        pointB.y = point.y;\n        return this.qSVG.pDistance(point, pointA, pointB);\n      }\n    },\n    circlePath: (cx, cy, r) => {\n      return 'M ' + cx + ' ' + cy + ' m -' + r + ', 0 a ' + r + ',' + r + ' 0 1,0 ' + r * 2 + ',0 a ' + r + ',' + r + ' 0 1,0 -' + r * 2 + ',0';\n    },\n    createEquation: (x0, y0, x1, y1) => {\n      if (x1 - x0 == 0) {\n        return {\n          A: 'v',\n          B: x0\n        };\n      } else if (y1 - y0 == 0) {\n        return {\n          A: 'h',\n          B: y0\n        };\n      } else {\n        return {\n          A: (y1 - y0) / (x1 - x0),\n          B: y1 - x1 * ((y1 - y0) / (x1 - x0))\n        };\n      }\n    },\n    perpendicularEquation: (equation, x1, y1) => {\n      if (typeof equation.A != 'string') {\n        return {\n          A: -1 / equation.A,\n          B: y1 - -1 / equation.A * x1\n        };\n      }\n      if (equation.A == 'h') {\n        return {\n          A: 'v',\n          B: x1\n        };\n      }\n      if (equation.A == 'v') {\n        return {\n          A: 'h',\n          B: y1\n        };\n      }\n    },\n    angleBetweenEquations: (m1, m2) => {\n      if (m1 == 'h') {\n        m1 = 0;\n      }\n      if (m2 == 'h') {\n        m2 = 0;\n      }\n      if (m1 == 'v') {\n        m1 = 10000;\n      }\n      if (m2 == 'v') {\n        m2 = 10000;\n      }\n      const angleRad = Math.atan(Math.abs((m2 - m1) / (1 + m1 * m2)));\n      return 360 * angleRad / (2 * Math.PI);\n    },\n    intersectionOfEquations: (equation1, equation2, type = 'array', message = false) => {\n      // type array return [x,y] ---- type object return {x:x, y:y}\n      let retArray;\n      let retObj;\n      if (equation1.A == equation2.A) {\n        retArray = false;\n        retObj = false;\n      }\n      if (equation1.A == 'v' && equation2.A == 'h') {\n        retArray = [equation1.B, equation2.B];\n        retObj = {\n          x: equation1.B,\n          y: equation2.B\n        };\n      }\n      if (equation1.A == 'h' && equation2.A == 'v') {\n        retArray = [equation2.B, equation1.B];\n        retObj = {\n          x: equation2.B,\n          y: equation1.B\n        };\n      }\n      if (equation1.A == 'h' && equation2.A != 'v' && equation2.A != 'h') {\n        retArray = [(equation1.B - equation2.B) / equation2.A, equation1.B];\n        retObj = {\n          x: (equation1.B - equation2.B) / equation2.A,\n          y: equation1.B\n        };\n      }\n      if (equation1.A == 'v' && equation2.A != 'v' && equation2.A != 'h') {\n        retArray = [equation1.B, equation2.A * equation1.B + equation2.B];\n        retObj = {\n          x: equation1.B,\n          y: equation2.A * equation1.B + equation2.B\n        };\n      }\n      if (equation2.A == 'h' && equation1.A != 'v' && equation1.A != 'h') {\n        retArray = [(equation2.B - equation1.B) / equation1.A, equation2.B];\n        retObj = {\n          x: (equation2.B - equation1.B) / equation1.A,\n          y: equation2.B\n        };\n      }\n      if (equation2.A == 'v' && equation1.A != 'v' && equation1.A != 'h') {\n        retArray = [equation2.B, equation1.A * equation2.B + equation1.B];\n        retObj = {\n          x: equation2.B,\n          y: equation1.A * equation2.B + equation1.B\n        };\n      }\n      if (equation1.A != 'h' && equation1.A != 'v' && equation2.A != 'v' && equation2.A != 'h') {\n        const xT = (equation2.B - equation1.B) / (equation1.A - equation2.A);\n        const yT = equation1.A * xT + equation1.B;\n        retArray = [xT, yT];\n        retObj = {\n          x: xT,\n          y: yT\n        };\n      }\n      if (type == 'array') {\n        return retArray;\n      } else {\n        return retObj;\n      }\n    },\n    vectorXY: (obj1, obj2) => {\n      return {\n        x: obj2.x - obj1.x,\n        y: obj2.y - obj1.y\n      };\n    },\n    vectorAngle: (v1, v2) => {\n      return (Math.atan2(v2.y - v1.y, v2.x - v1.x) + Math.PI / 2) * (180 / Math.PI);\n    },\n    vectorDeter: (v1, v2) => {\n      return v1.x * v2.y - v1.y * v2.x;\n    },\n    btwn: (a, b1, b2, round = false) => {\n      if (round) {\n        a = Math.round(a);\n        b1 = Math.round(b1);\n        b2 = Math.round(b2);\n      }\n      if (a >= b1 && a <= b2) {\n        return true;\n      }\n      if (a >= b2 && a <= b1) {\n        return true;\n      }\n      return false;\n    },\n    nearPointFromPath: (Pathsvg, point, range = Infinity) => {\n      const pathLength = Pathsvg.getTotalLength();\n      if (pathLength > 0) {\n        let precision = 40;\n        let best;\n        let bestLength;\n        let bestDistance = Infinity;\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n          scan = Pathsvg.getPointAtLength(scanLength);\n          scanDistance = this.qSVG.gap(scan, point);\n          if (scanDistance < bestDistance) {\n            ;\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n          }\n        }\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 1) {\n          var before, after, beforeLength, afterLength, beforeDistance, afterDistance;\n          if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = this.qSVG.gap(before = Pathsvg.getPointAtLength(beforeLength), point)) < bestDistance) {\n            ;\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n          } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = this.qSVG.gap(after = Pathsvg.getPointAtLength(afterLength), point)) < bestDistance) {\n            ;\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n          } else {\n            precision /= 2;\n          }\n        }\n        if (bestDistance <= range * range) {\n          return {\n            x: best.x,\n            y: best.y,\n            length: bestLength,\n            distance: bestDistance,\n            seg: Pathsvg.getPathSegAtLength(bestLength)\n          };\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    },\n    getNodeFromPath: (Pathsvg, point, except = ['']) => {\n      //  ON PATH RETURN FALSE IF 0 NODE ON PATHSVG WITH POINT coords\n      //  RETURN INDEX ARRAY OF NODEs onPoint\n      const nodeList = Pathsvg.getPathData();\n      let k = 0;\n      const nodes = [];\n      let countNode = 0;\n      for (k = 0; k < nodeList.length; k++) {\n        if (nodeList[k].values[0] == point.x && nodeList[k].values[1] == point.y && nodeList[k].type != 'Z') {\n          if (except.indexOf(k) == -1) {\n            countNode++;\n            nodes.push(k);\n          }\n        }\n      }\n      if (countNode == 0) {\n        return false;\n      } else {\n        return nodes;\n      }\n    },\n    polygonIntoWalls: (vertex, surface) => {\n      // RETURN ARRAY [{x,y}, {x,y}, ...] OF REAL COORDS POLYGON INTO WALLS, THICKNESS PARAM\n      const vertexArray = surface;\n      const wall = [];\n      const polygon = [];\n      for (let rr = 0; rr < vertexArray.length; rr++) {\n        polygon.push({\n          x: vertex[vertexArray[rr]].x,\n          y: vertex[vertexArray[rr]].y\n        });\n      }\n      // FIND EDGE (WALLS HERE) OF THESE TWO VERTEX\n      for (var i = 0; i < vertexArray.length - 1; i++) {\n        for (let segStart = 0; segStart < vertex[vertexArray[i + 1]].segment.length; segStart++) {\n          for (let segEnd = 0; segEnd < vertex[vertexArray[i]].segment.length; segEnd++) {\n            if (vertex[vertexArray[i + 1]].segment[segStart] == vertex[vertexArray[i]].segment[segEnd]) {\n              wall.push({\n                x1: vertex[vertexArray[i]].x,\n                y1: vertex[vertexArray[i]].y,\n                x2: vertex[vertexArray[i + 1]].x,\n                y2: vertex[vertexArray[i + 1]].y,\n                segment: vertex[vertexArray[i + 1]].segment[segStart]\n              });\n            }\n          }\n        }\n      }\n      // CALC INTERSECS OF EQ PATHS OF THESE TWO WALLS.\n      const inside = [];\n      const outside = [];\n      for (var i = 0; i < wall.length; i++) {\n        const inter = [];\n        const edge = wall[i];\n        if (i < wall.length - 1) {\n          var nextEdge = wall[i + 1];\n        } else {\n          var nextEdge = wall[0];\n        }\n        let angleEdge = Math.atan2(edge.y2 - edge.y1, edge.x2 - edge.x1);\n        let angleNextEdge = Math.atan2(nextEdge.y2 - nextEdge.y1, nextEdge.x2 - nextEdge.x1);\n        const edgeThicknessX = this.WALLS[edge.segment].thick / 2 * Math.sin(angleEdge);\n        const edgeThicknessY = this.WALLS[edge.segment].thick / 2 * Math.cos(angleEdge);\n        const nextEdgeThicknessX = this.WALLS[nextEdge.segment].thick / 2 * Math.sin(angleNextEdge);\n        const nextEdgeThicknessY = this.WALLS[nextEdge.segment].thick / 2 * Math.cos(angleNextEdge);\n        const eqEdgeUp = this.qSVG.createEquation(edge.x1 + edgeThicknessX, edge.y1 - edgeThicknessY, edge.x2 + edgeThicknessX, edge.y2 - edgeThicknessY);\n        const eqEdgeDw = this.qSVG.createEquation(edge.x1 - edgeThicknessX, edge.y1 + edgeThicknessY, edge.x2 - edgeThicknessX, edge.y2 + edgeThicknessY);\n        const eqNextEdgeUp = this.qSVG.createEquation(nextEdge.x1 + nextEdgeThicknessX, nextEdge.y1 - nextEdgeThicknessY, nextEdge.x2 + nextEdgeThicknessX, nextEdge.y2 - nextEdgeThicknessY);\n        const eqNextEdgeDw = this.qSVG.createEquation(nextEdge.x1 - nextEdgeThicknessX, nextEdge.y1 + nextEdgeThicknessY, nextEdge.x2 - nextEdgeThicknessX, nextEdge.y2 + nextEdgeThicknessY);\n        angleEdge = angleEdge * (180 / Math.PI);\n        angleNextEdge = angleNextEdge * (180 / Math.PI);\n        if (eqEdgeUp.A != eqNextEdgeUp.A) {\n          inter.push(this.qSVG.intersectionOfEquations(eqEdgeUp, eqNextEdgeUp, 'object'));\n          inter.push(this.qSVG.intersectionOfEquations(eqEdgeDw, eqNextEdgeDw, 'object'));\n        } else {\n          inter.push({\n            x: edge.x2 + edgeThicknessX,\n            y: edge.y2 - edgeThicknessY\n          });\n          inter.push({\n            x: edge.x2 - edgeThicknessX,\n            y: edge.y2 + edgeThicknessY\n          });\n        }\n        for (let ii = 0; ii < inter.length; ii++) {\n          if (this.qSVG.rayCasting(inter[ii], polygon)) {\n            inside.push(inter[ii]);\n          } else {\n            outside.push(inter[ii]);\n          }\n        }\n      }\n      inside.push(inside[0]);\n      outside.push(outside[0]);\n      return {\n        inside: inside,\n        outside: outside\n      };\n    },\n    area: coordss => {\n      if (coordss.length < 2) {\n        return false;\n      }\n      let realArea = 0;\n      let j = coordss.length - 1;\n      for (let i = 0; i < coordss.length; i++) {\n        realArea = realArea + (coordss[j].x + coordss[i].x) * (coordss[j].y - coordss[i].y);\n        j = i;\n      }\n      realArea = realArea / 2;\n      return Math.abs(realArea.toFixed(2));\n    },\n    areaRoom: (vertex, coords, digit = 2) => {\n      const vertexArray = coords;\n      let roughArea = 0;\n      let j = vertexArray.length - 2;\n      for (let i = 0; i < vertexArray.length - 1; i++) {\n        roughArea = roughArea + (vertex[vertexArray[j]].x + vertex[vertexArray[i]].x) * (vertex[vertexArray[j]].y - vertex[vertexArray[i]].y);\n        j = i;\n      }\n      roughArea = roughArea / 2;\n      return Math.abs(roughArea.toFixed(digit));\n    },\n    perimeterRoom: (coords, digit = 2) => {\n      const vertexArray = coords;\n      let roughRoom = 0;\n      for (i = 0; i < vertexArray.length - 1; i++) {\n        added = this.qSVG.measure(vertex[vertexArray[i]], vertex[vertexArray[i + 1]]);\n        roughRoom = roughRoom + added;\n      }\n      return roughRoom.toFixed(digit);\n    },\n    junctionList: WALLS => {\n      // H && V PROBLEM WHEN TWO SEGMENT ARE v/-> == I/->\n      const junction = [];\n      const segmentJunction = [];\n      const junctionChild = [];\n      // JUNCTION ARRAY LIST ALL SEGMENT INTERSECTIONS\n      for (let i = 0; i < WALLS.length; i++) {\n        const equation1 = this.qSVG.createEquation(WALLS[i].start.x, WALLS[i].start.y, WALLS[i].end.x, WALLS[i].end.y);\n        for (let v = 0; v < WALLS.length; v++) {\n          if (v != i) {\n            const equation2 = this.qSVG.createEquation(WALLS[v].start.x, WALLS[v].start.y, WALLS[v].end.x, WALLS[v].end.y);\n            var intersec;\n            if (intersec = this.qSVG.intersectionOfEquations(equation1, equation2)) {\n              if (WALLS[i].end.x == WALLS[v].start.x && WALLS[i].end.y == WALLS[v].start.y || WALLS[i].start.x == WALLS[v].end.x && WALLS[i].start.y == WALLS[v].end.y) {\n                if (WALLS[i].end.x == WALLS[v].start.x && WALLS[i].end.y == WALLS[v].start.y) {\n                  junction.push({\n                    segment: i,\n                    child: v,\n                    values: [WALLS[v].start.x, WALLS[v].start.y],\n                    type: 'natural'\n                  });\n                }\n                if (WALLS[i].start.x == WALLS[v].end.x && WALLS[i].start.y == WALLS[v].end.y) {\n                  junction.push({\n                    segment: i,\n                    child: v,\n                    values: [WALLS[i].start.x, WALLS[i].start.y],\n                    type: 'natural'\n                  });\n                }\n              } else {\n                if (this.qSVG.btwn(intersec[0], WALLS[i].start.x, WALLS[i].end.x, 'round') && this.qSVG.btwn(intersec[1], WALLS[i].start.y, WALLS[i].end.y, 'round') && this.qSVG.btwn(intersec[0], WALLS[v].start.x, WALLS[v].end.x, 'round') && this.qSVG.btwn(intersec[1], WALLS[v].start.y, WALLS[v].end.y, 'round')) {\n                  intersec[0] = intersec[0];\n                  intersec[1] = intersec[1];\n                  junction.push({\n                    segment: i,\n                    child: v,\n                    values: [intersec[0], intersec[1]],\n                    type: 'intersection'\n                  });\n                }\n              }\n            }\n            // IF EQ1 == EQ 2 FIND IF START OF SECOND SEG == END OF FIRST seg (eq.A maybe values H ou V)\n            if ((Math.abs(equation1.A) == Math.abs(equation2.A) || equation1.A == equation2.A) && equation1.B == equation2.B) {\n              if (WALLS[i].end.x == WALLS[v].start.x && WALLS[i].end.y == WALLS[v].start.y) {\n                junction.push({\n                  segment: i,\n                  child: v,\n                  values: [WALLS[v].start.x, WALLS[v].start.y],\n                  type: 'natural'\n                });\n              }\n              if (WALLS[i].start.x == WALLS[v].end.x && WALLS[i].start.y == WALLS[v].end.y) {\n                junction.push({\n                  segment: i,\n                  child: v,\n                  values: [WALLS[i].start.x, WALLS[i].start.y],\n                  type: 'natural'\n                });\n              }\n            }\n          }\n        }\n      }\n      return junction;\n    },\n    vertexList: (junction, segment) => {\n      const vertex = [];\n      const vertextest = [];\n      for (let jj = 0; jj < junction.length; jj++) {\n        var found = true;\n        for (let vv = 0; vv < vertex.length; vv++) {\n          if (Math.round(junction[jj].values[0]) == Math.round(vertex[vv].x) && Math.round(junction[jj].values[1]) == Math.round(vertex[vv].y)) {\n            found = false;\n            vertex[vv].segment.push(junction[jj].segment);\n            break;\n          } else {\n            found = true;\n          }\n        }\n        if (found) {\n          vertex.push({\n            x: Math.round(junction[jj].values[0]),\n            y: Math.round(junction[jj].values[1]),\n            segment: [junction[jj].segment],\n            bypass: 0,\n            type: junction[jj].type\n          });\n        }\n      }\n      let toClean = [];\n      for (let ss = 0; ss < vertex.length; ss++) {\n        vertex[ss].child = [];\n        vertex[ss].removed = [];\n        for (let sg = 0; sg < vertex[ss].segment.length; sg++) {\n          for (let sc = 0; sc < vertex.length; sc++) {\n            if (sc != ss) {\n              for (let scg = 0; scg < vertex[sc].segment.length; scg++) {\n                if (vertex[sc].segment[scg] == vertex[ss].segment[sg]) {\n                  vertex[ss].child.push({\n                    id: sc,\n                    angle: Math.floor(this.qSVG.getAngle(vertex[ss], vertex[sc]).deg)\n                  });\n                }\n              }\n            }\n          }\n        }\n        toClean = [];\n        for (let fr = 0; fr < vertex[ss].child.length - 1; fr++) {\n          for (let ft = fr + 1; ft < vertex[ss].child.length; ft++) {\n            if (fr != ft && typeof vertex[ss].child[fr] != 'undefined') {\n              found = true;\n              if (this.qSVG.btwn(vertex[ss].child[ft].angle, vertex[ss].child[fr].angle + 3, vertex[ss].child[fr].angle - 3, 'round') && found) {\n                const dOne = this.qSVG.gap(vertex[ss], vertex[vertex[ss].child[ft].id]);\n                const dTwo = this.qSVG.gap(vertex[ss], vertex[vertex[ss].child[fr].id]);\n                if (dOne > dTwo) {\n                  toClean.push(ft);\n                } else {\n                  toClean.push(fr);\n                }\n              }\n            }\n          }\n        }\n        toClean.sort(function (a, b) {\n          return b - a;\n        });\n        toClean.push(-1);\n        for (let cc = 0; cc < toClean.length - 1; cc++) {\n          if (toClean[cc] > toClean[cc + 1]) {\n            vertex[ss].removed.push(vertex[ss].child[toClean[cc]].id);\n            vertex[ss].child.splice(toClean[cc], 1);\n          }\n        }\n      }\n      vertexTest = vertex;\n      return vertex;\n    },\n    arrayCompare: (arr1, arr2, app) => {\n      //*******************************************************\n      //* @arr1, arr2 = Array to compare                      *\n      //* @app = add function pop() or shift() to @arr1, arr2 *\n      //* False if arr1.length != arr2.length                 *\n      //* False if value into arr1[] != arr2[] - no order     *\n      //* *****************************************************\n      // if (arr1.length != arr2.length) return false;\n      let minus = 0;\n      let start = 0;\n      if (app == 'pop') {\n        minus = 1;\n      }\n      if (app == 'shift') {\n        start = 1;\n      }\n      let coordCounter = arr1.length - minus - start;\n      for (let iFirst = start; iFirst < arr1.length - minus; iFirst++) {\n        for (let iSecond = start; iSecond < arr2.length - minus; iSecond++) {\n          if (arr1[iFirst] == arr2[iSecond]) {\n            coordCounter--;\n          }\n        }\n      }\n      if (coordCounter == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    vectorVertex: (vex1, vex2, vex3) => {\n      const vCurr = this.qSVG.vectorXY(vex1, vex2);\n      const vNext = this.qSVG.vectorXY(vex2, vex3);\n      const Na = Math.sqrt(vCurr.x * vCurr.x + vCurr.y * vCurr.y);\n      const Nb = Math.sqrt(vNext.x * vNext.x + vNext.y * vNext.y);\n      const C = (vCurr.x * vNext.x + vCurr.y * vNext.y) / (Na * Nb);\n      const S = vCurr.x * vNext.y - vCurr.y * vNext.x;\n      const BAC = Math.sign(S) * Math.acos(C);\n      return BAC * (180 / Math.PI);\n    },\n    segmentTree: (VERTEX_NUMBER, vertex) => {\n      const TREELIST = [VERTEX_NUMBER];\n      WAY = [];\n      const COUNT = vertex.length;\n      const ORIGIN = VERTEX_NUMBER;\n      const tree = (TREELIST, ORIGIN, COUNT) => {\n        if (TREELIST.length == 0) {\n          return;\n        }\n        const TREETEMP = [];\n        COUNT--;\n        for (let k = 0; k < TREELIST.length; k++) {\n          let found = true;\n          const WRO = TREELIST[k];\n          const WRO_ARRAY = WRO.toString().split('-');\n          const WR = WRO_ARRAY[WRO_ARRAY.length - 1];\n          for (var v = 0; v < vertex[WR].child.length; v++) {\n            if (vertex[WR].child[v].id == ORIGIN && COUNT < vertex.length - 1 && WRO_ARRAY.length > 2) {\n              // WAYS HYPER\n              WAY.push(WRO + '-' + ORIGIN); // WAYS\n              found = false;\n              break;\n            }\n          }\n          if (found) {\n            var bestToAdd;\n            const bestDet = 0;\n            let nextVertex = -1;\n            // var nextVertexValue = 360;\n            let nextDeterValue = Infinity;\n            let nextDeterVal = 0;\n            let nextFlag = 0;\n            if (vertex[WR].child.length == 1) {\n              if (WR == ORIGIN && COUNT == vertex.length - 1) {\n                TREETEMP.push(WRO + '-' + vertex[WR].child[0].id);\n              }\n              if (WR != ORIGIN && COUNT < vertex.length - 1) {\n                TREETEMP.push(WRO + '-' + vertex[WR].child[0].id);\n              }\n            } else {\n              for (var v = 0; v < vertex[WR].child.length && vertex[WR].child.length > 0; v++) {\n                if (WR == ORIGIN && COUNT == vertex.length - 1) {\n                  // TO INIT FUNCTION -> // CLOCKWISE Research\n                  var vDet = this.qSVG.vectorVertex({\n                    x: 0,\n                    y: -1\n                  }, vertex[WR], vertex[vertex[WR].child[v].id]);\n                  if (vDet >= nextDeterVal) {\n                    nextFlag = 1;\n                    nextDeterVal = vDet;\n                    nextVertex = vertex[WR].child[v].id;\n                  }\n                  if (Math.sign(vDet) == -1 && nextFlag == 0) {\n                    if (vDet < nextDeterValue && Math.sign(nextDeterValue) > -1) {\n                      nextDeterValue = vDet;\n                      nextVertex = vertex[WR].child[v].id;\n                    }\n                    if (vDet > nextDeterValue && Math.sign(nextDeterValue) == -1) {\n                      nextDeterValue = vDet;\n                      nextVertex = vertex[WR].child[v].id;\n                    }\n                  }\n                }\n                if (WR != ORIGIN && WRO_ARRAY[WRO_ARRAY.length - 2] != vertex[WR].child[v].id && COUNT < vertex.length - 1) {\n                  // COUNTERCLOCKWISE Research\n                  var vDet = this.qSVG.vectorVertex(vertex[WRO_ARRAY[WRO_ARRAY.length - 2]], vertex[WR], vertex[vertex[WR].child[v].id]);\n                  if (vDet < nextDeterValue && nextFlag == 0) {\n                    nextDeterValue = vDet;\n                    nextVertex = vertex[WR].child[v].id;\n                  }\n                  if (Math.sign(vDet) == -1) {\n                    nextFlag = 1;\n                    if (vDet <= nextDeterValue) {\n                      nextDeterValue = vDet;\n                      nextVertex = vertex[WR].child[v].id;\n                    }\n                  }\n                }\n              }\n              if (nextVertex != -1) {\n                TREETEMP.push(WRO + '-' + nextVertex);\n              }\n            }\n          }\n        }\n        if (COUNT > 0) {\n          tree(TREETEMP, ORIGIN, COUNT);\n        }\n      };\n      tree(TREELIST, ORIGIN, COUNT);\n      return WAY;\n    },\n    polygonize: segment => {\n      junction = this.qSVG.junctionList(segment);\n      vertex = this.qSVG.vertexList(junction, segment);\n      const vertexCopy = this.qSVG.vertexList(junction, segment);\n      const edgesChild = [];\n      for (var j = 0; j < vertex.length; j++) {\n        for (let vv = 0; vv < vertex[j].child.length; vv++) {\n          edgesChild.push([j, vertex[j].child[vv].id]);\n        }\n      }\n      const polygons = [];\n      let WAYS;\n      for (let jc = 0; jc < edgesChild.length; jc++) {\n        let bestVertex = 0;\n        let bestVertexValue = Infinity;\n        for (var j = 0; j < vertex.length; j++) {\n          if (vertex[j].x < bestVertexValue && vertex[j].child.length > 1 && vertex[j].bypass == 0) {\n            bestVertexValue = vertex[j].x;\n            bestVertex = j;\n          }\n          if (vertex[j].x == bestVertexValue && vertex[j].child.length > 1 && vertex[j].bypass == 0) {\n            if (vertex[j].y > vertex[bestVertex].y) {\n              bestVertexValue = vertex[j].x;\n              bestVertex = j;\n            }\n          }\n        }\n\n        // console.log(\"%c%s\", \"background: yellow; font-size: 14px;\",\"RESEARCH WAY FOR STARTING VERTEX \"+bestVertex);\n        WAYS = this.qSVG.segmentTree(bestVertex, vertex);\n        if (WAYS.length == 0) {\n          vertex[bestVertex].bypass = 1;\n        }\n        if (WAYS.length > 0) {\n          const tempSurface = WAYS[0].split('-');\n          const lengthRoom = this.qSVG.areaRoom(vertex, tempSurface);\n          const bestArea = parseInt(lengthRoom);\n          var found = true;\n          for (let sss = 0; sss < polygons.length; sss++) {\n            if (this.qSVG.arrayCompare(polygons[sss].way, tempSurface, 'pop')) {\n              found = false;\n              vertex[bestVertex].bypass = 1;\n              break;\n            }\n          }\n          if (bestArea < 360) {\n            vertex[bestVertex].bypass = 1;\n          }\n          if (vertex[bestVertex].bypass == 0) {\n            // <-------- TO REVISE IMPORTANT !!!!!!!! bestArea Control ???\n            const realCoords = this.qSVG.polygonIntoWalls(vertex, tempSurface);\n            const realArea = this.qSVG.area(realCoords.inside);\n            const outsideArea = this.qSVG.area(realCoords.outside);\n            const coords = [];\n            for (let rr = 0; rr < tempSurface.length; rr++) {\n              coords.push({\n                x: vertex[tempSurface[rr]].x,\n                y: vertex[tempSurface[rr]].y\n              });\n            }\n            // WARNING -> FAKE\n            if (realCoords.inside.length != realCoords.outside) {\n              polygons.push({\n                way: tempSurface,\n                coords: coords,\n                coordsOutside: realCoords.outside,\n                coordsInside: realCoords.inside,\n                area: realArea,\n                outsideArea: outsideArea,\n                realArea: bestArea\n              });\n            } else {\n              // REAL INSIDE POLYGONE -> ROOM\n              polygons.push({\n                way: tempSurface,\n                coords: realCoords.inside,\n                coordsOutside: realCoords.outside,\n                area: realArea,\n                outsideArea: outsideArea,\n                realArea: bestArea\n              });\n            }\n\n            // REMOVE FIRST POINT OF WAY ON CHILDS FIRST VERTEX\n            for (var aa = 0; aa < vertex[bestVertex].child.length; aa++) {\n              if (vertex[bestVertex].child[aa].id == tempSurface[1]) {\n                vertex[bestVertex].child.splice(aa, 1);\n              }\n            }\n\n            // REMOVE FIRST VERTEX OF WAY ON CHILDS SECOND VERTEX\n            for (var aa = 0; aa < vertex[tempSurface[1]].child.length; aa++) {\n              if (vertex[tempSurface[1]].child[aa].id == bestVertex) {\n                vertex[tempSurface[1]].child.splice(aa, 1);\n              }\n            }\n            //REMOVE FILAMENTS ?????\n\n            do {\n              var looping = 0;\n              for (var aa = 0; aa < vertex.length; aa++) {\n                if (vertex[aa].child.length == 1) {\n                  looping = 1;\n                  vertex[aa].child = [];\n                  for (let ab = 0; ab < vertex.length; ab++) {\n                    // OR MAKE ONLY ON THE WAY tempSurface ?? BETTER ??\n                    for (let ac = 0; ac < vertex[ab].child.length; ac++) {\n                      if (vertex[ab].child[ac].id == aa) {\n                        vertex[ab].child.splice(ac, 1);\n                      }\n                    }\n                  }\n                }\n              }\n            } while (looping == 1);\n          }\n        }\n      }\n      //SUB AREA(s) ON POLYGON CONTAINS OTHERS FREE POLYGONS (polygon without commonSideEdge)\n      for (let pp = 0; pp < polygons.length; pp++) {\n        const inside = [];\n        for (let free = 0; free < polygons.length; free++) {\n          if (pp != free) {\n            const polygonFree = polygons[free].coords;\n            const countCoords = polygonFree.length;\n            var found = true;\n            for (pf = 0; pf < countCoords; pf++) {\n              found = this.qSVG.rayCasting(polygonFree[pf], polygons[pp].coords);\n              if (!found) {\n                break;\n              }\n            }\n            if (found) {\n              inside.push(free);\n              polygons[pp].area = polygons[pp].area - polygons[free].outsideArea;\n            }\n          }\n        }\n        polygons[pp].inside = inside;\n      }\n      return {\n        polygons: polygons,\n        vertex: vertex\n      };\n    },\n    diffArray: (arr1, arr2) => {\n      return arr1.concat(arr2).filter(function (val) {\n        if (!(arr1.includes(val) && arr2.includes(val))) {\n          return val;\n        }\n      });\n    },\n    diffObjIntoArray: (arr1, arr2) => {\n      let count = 0;\n      for (let k = 0; k < arr1.length - 1; k++) {\n        for (let n = 0; n < arr2.length - 1; n++) {\n          if (isObjectsEquals(arr1[k], arr2[n])) {\n            count++;\n          }\n          //* @arr1, arr2 = Array to compare                      *\n          //* @app = add function pop() or shift() to @arr1, arr2 *\n          //* False if arr1.length != arr2.length                 *\n          //* False if value into arr1[] != arr2[] - no order     *\n          //* ***********************************\n        }\n      }\n\n      let waiting = arr1.length - 1;\n      if (waiting < arr2.length - 1) {\n        waiting = arr2.length;\n      }\n      return waiting - count;\n    },\n    rayCasting: (point, polygon) => {\n      const x = point.x,\n        y = point.y;\n      let inside = false;\n      for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        const xi = polygon[i].x,\n          yi = polygon[i].y;\n        const xj = polygon[j].x,\n          yj = polygon[j].y;\n        const intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n      return inside;\n    },\n    polygonVisualCenter: room => {\n      //polygon = [{x1,y1}, {x2,y2}, ...]\n      const polygon = room.coords;\n      const insideArray = room.inside;\n      const sample = 80;\n      const grid = [];\n      //BOUNDING BOX OF POLYGON\n      let minX, minY, maxX, maxY;\n      for (let i = 0; i < polygon.length; i++) {\n        const p = polygon[i];\n        if (!i || p.x < minX) {\n          minX = p.x;\n        }\n        if (!i || p.y < minY) {\n          minY = p.y;\n        }\n        if (!i || p.x > maxX) {\n          maxX = p.x;\n        }\n        if (!i || p.y > maxY) {\n          maxY = p.y;\n        }\n      }\n      const width = maxX - minX;\n      const height = maxY - minY;\n      //INIT GRID\n      const sampleWidth = Math.floor(width / sample);\n      const sampleHeight = Math.floor(height / sample);\n      for (let hh = 0; hh < sample; hh++) {\n        for (let ww = 0; ww < sample; ww++) {\n          const posX = minX + ww * sampleWidth;\n          const posY = minY + hh * sampleHeight;\n          if (this.qSVG.rayCasting({\n            x: posX,\n            y: posY\n          }, polygon)) {\n            let found = true;\n            for (let ii = 0; ii < insideArray.length; ii++) {\n              if (this.qSVG.rayCasting({\n                x: posX,\n                y: posY\n              }, ROOM[insideArray[ii]].coordsOutside)) {\n                found = false;\n                break;\n              }\n            }\n            if (found) {\n              grid.push({\n                x: posX,\n                y: posY\n              });\n            }\n          }\n        }\n      }\n      let bestRange = 0;\n      let bestMatrix;\n      for (let matrix = 0; matrix < grid.length; matrix++) {\n        let minDistance = Infinity;\n        for (let pp = 0; pp < polygon.length - 1; pp++) {\n          const scanDistance = this.qSVG.pDistance(grid[matrix], polygon[pp], polygon[pp + 1]);\n          if (scanDistance.distance < minDistance) {\n            minDistance = scanDistance.distance;\n          }\n        }\n        if (minDistance > bestRange) {\n          bestMatrix = matrix;\n          bestRange = minDistance;\n        }\n      }\n      return grid[bestMatrix];\n    },\n    textOnDiv: (label, pos, styled, div) => {\n      if (typeof pos != 'undefined') {\n        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttributeNS(null, 'x', pos.x);\n        text.setAttributeNS(null, 'y', pos.y);\n        text.setAttribute('style', 'fill:' + styled.color + ';font-weight:' + styled.fontWeight + ';font-size:' + styled.fontSize);\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.textContent = label;\n        document.getElementById(div).appendChild(text);\n      }\n    }\n  };\n};\nApplication.prototype.editorFactory = function () {\n  return {\n    wall: (start, end, type, thick) => {\n      return {\n        thick,\n        start,\n        end,\n        type,\n        parent: null,\n        child: null,\n        angle: 0,\n        equations: {},\n        coords: [],\n        backUp: false\n      };\n    },\n    getWallNode: (coords, except = false) => {\n      // RETURN OBJECTS ARRAY INDEX OF WALLS [WALL1, WALL2, n...] WALLS WITH THIS NODE, EXCEPT PARAM = OBJECT WALL\n      const nodes = [];\n      for (const k in this.WALLS) {\n        if (!isObjectsEquals(this.WALLS[k], except)) {\n          if (isObjectsEquals(this.WALLS[k].start, coords)) {\n            nodes.push({\n              wall: this.WALLS[k],\n              type: 'start'\n            });\n          }\n          if (isObjectsEquals(this.WALLS[k].end, coords)) {\n            nodes.push({\n              wall: this.WALLS[k],\n              type: 'end'\n            });\n          }\n        }\n      }\n      if (nodes.length == 0) {\n        return false;\n      } else {\n        return nodes;\n      }\n    },\n    wallsComputing: (WALLS, action = false) => {\n      // IF ACTION == MOVE -> equation2 exist !!!!!\n      $('#boxwall').empty();\n      $('#boxArea').empty();\n      for (var vertice = 0; vertice < this.WALLS.length; vertice++) {\n        var wall = WALLS[vertice];\n        if (wall.parent != null) {\n          if (!isObjectsEquals(wall.parent.start, wall.start) && !isObjectsEquals(wall.parent.end, wall.start)) {\n            wall.parent = null;\n          }\n        }\n        if (wall.child != null) {\n          if (!isObjectsEquals(wall.child.start, wall.end) && !isObjectsEquals(wall.child.end, wall.end)) {\n            wall.child = null;\n          }\n        }\n      }\n      for (var vertice = 0; vertice < WALLS.length; vertice++) {\n        var wall = WALLS[vertice];\n        if (wall.parent != null) {\n          if (isObjectsEquals(wall.parent.start, wall.start)) {\n            var previousWall = wall.parent;\n            var previousWallStart = previousWall.end;\n            var previousWallEnd = previousWall.start;\n          }\n          if (isObjectsEquals(wall.parent.end, wall.start)) {\n            var previousWall = wall.parent;\n            var previousWallStart = previousWall.start;\n            var previousWallEnd = previousWall.end;\n          }\n        } else {\n          const S = this.editor.getWallNode(wall.start, wall);\n          // if (wallInhibation && isObjectsEquals(wall, wallInhibation)) S = false;\n          for (var k in S) {\n            var eqInter = this.editor.createEquationFromWall(S[k].wall);\n            var angleInter = 90; // TO PASS TEST\n            if (action == 'move') {\n              angleInter = this.qSVG.angleBetweenEquations(eqInter.A, this.equation2.A);\n            }\n            if (S[k].type == 'start' && S[k].wall.parent == null && angleInter > 20 && angleInter < 160) {\n              wall.parent = S[k].wall;\n              S[k].wall.parent = wall;\n              var previousWall = wall.parent;\n              var previousWallStart = previousWall.end;\n              var previousWallEnd = previousWall.start;\n            }\n            if (S[k].type == 'end' && S[k].wall.child == null && angleInter > 20 && angleInter < 160) {\n              wall.parent = S[k].wall;\n              S[k].wall.child = wall;\n              var previousWall = wall.parent;\n              var previousWallStart = previousWall.start;\n              var previousWallEnd = previousWall.end;\n            }\n          }\n        }\n        if (wall.child != null) {\n          if (isObjectsEquals(wall.child.end, wall.end)) {\n            var nextWall = wall.child;\n            var nextWallStart = nextWall.end;\n            var nextWallEnd = nextWall.start;\n          } else {\n            var nextWall = wall.child;\n            var nextWallStart = nextWall.start;\n            var nextWallEnd = nextWall.end;\n          }\n        } else {\n          const E = this.editor.getWallNode(wall.end, wall);\n          // if (wallInhibation && isObjectsEquals(wall, wallInhibation)) E = false;\n          for (var k in E) {\n            var eqInter = this.editor.createEquationFromWall(E[k].wall);\n            var angleInter = 90; // TO PASS TEST\n            if (action == 'move') {\n              angleInter = this.qSVG.angleBetweenEquations(eqInter.A, this.equation2.A);\n            }\n            if (E[k].type == 'end' && E[k].wall.child == null && angleInter > 20 && angleInter < 160) {\n              wall.child = E[k].wall;\n              E[k].wall.child = wall;\n              var nextWall = wall.child;\n              var nextWallStart = nextWall.end;\n              var nextWallEnd = nextWall.start;\n            }\n            if (E[k].type == 'start' && E[k].wall.parent == null && angleInter > 20 && angleInter < 160) {\n              wall.child = E[k].wall;\n              E[k].wall.parent = wall;\n              var nextWall = wall.child;\n              var nextWallStart = nextWall.start;\n              var nextWallEnd = nextWall.end;\n            }\n          }\n        }\n        const angleWall = Math.atan2(wall.end.y - wall.start.y, wall.end.x - wall.start.x);\n        wall.angle = angleWall;\n        const wallThickX = wall.thick / 2 * Math.sin(angleWall);\n        const wallThickY = wall.thick / 2 * Math.cos(angleWall);\n        const eqWallUp = this.qSVG.createEquation(wall.start.x + wallThickX, wall.start.y - wallThickY, wall.end.x + wallThickX, wall.end.y - wallThickY);\n        const eqWallDw = this.qSVG.createEquation(wall.start.x - wallThickX, wall.start.y + wallThickY, wall.end.x - wallThickX, wall.end.y + wallThickY);\n        const eqWallBase = this.qSVG.createEquation(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n        wall.equations = {\n          up: eqWallUp,\n          down: eqWallDw,\n          base: eqWallBase\n        };\n        var dWay;\n\n        // WALL STARTED\n        if (wall.parent == null) {\n          var eqP = this.qSVG.perpendicularEquation(eqWallUp, wall.start.x, wall.start.y);\n          var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqP, 'object');\n          var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqP, 'object');\n          wall.coords = [interUp, interDw];\n          dWay = 'M' + interUp.x + ',' + interUp.y + ' L' + interDw.x + ',' + interDw.y + ' ';\n        } else {\n          var eqP = this.qSVG.perpendicularEquation(eqWallUp, wall.start.x, wall.start.y);\n          // var previousWall = wall.parent;\n          //   var previousWallStart = previousWall.start;\n          //   var previousWallEnd = previousWall.end;\n          const anglePreviousWall = Math.atan2(previousWallEnd.y - previousWallStart.y, previousWallEnd.x - previousWallStart.x);\n          const previousWallThickX = previousWall.thick / 2 * Math.sin(anglePreviousWall);\n          const previousWallThickY = previousWall.thick / 2 * Math.cos(anglePreviousWall);\n          const eqPreviousWallUp = this.qSVG.createEquation(previousWallStart.x + previousWallThickX, previousWallStart.y - previousWallThickY, previousWallEnd.x + previousWallThickX, previousWallEnd.y - previousWallThickY);\n          const eqPreviousWallDw = this.qSVG.createEquation(previousWallStart.x - previousWallThickX, previousWallStart.y + previousWallThickY, previousWallEnd.x - previousWallThickX, previousWallEnd.y + previousWallThickY);\n          if (Math.abs(anglePreviousWall - angleWall) > 0.09) {\n            var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqPreviousWallUp, 'object');\n            var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqPreviousWallDw, 'object');\n            if (eqWallUp.A == eqPreviousWallUp.A) {\n              interUp = {\n                x: wall.start.x + wallThickX,\n                y: wall.start.y - wallThickY\n              };\n              interDw = {\n                x: wall.start.x - wallThickX,\n                y: wall.start.y + wallThickY\n              };\n            }\n            var miter = this.qSVG.gap(interUp, {\n              x: previousWallEnd.x,\n              y: previousWallEnd.y\n            });\n            if (miter > 1000) {\n              var interUp = this.qSVG.intersectionOfEquations(eqP, eqWallUp, 'object');\n              var interDw = this.qSVG.intersectionOfEquations(eqP, eqWallDw, 'object');\n            }\n          }\n          if (Math.abs(anglePreviousWall - angleWall) <= 0.09) {\n            var interUp = this.qSVG.intersectionOfEquations(eqP, eqWallUp, 'object');\n            var interDw = this.qSVG.intersectionOfEquations(eqP, eqWallDw, 'object');\n          }\n          wall.coords = [interUp, interDw];\n          dWay = 'M' + interUp.x + ',' + interUp.y + ' L' + interDw.x + ',' + interDw.y + ' ';\n        }\n\n        // WALL FINISHED\n        if (wall.child == null) {\n          var eqP = this.qSVG.perpendicularEquation(eqWallUp, wall.end.x, wall.end.y);\n          var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqP, 'object');\n          var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqP, 'object');\n          wall.coords.push(interDw, interUp);\n          dWay = dWay + 'L' + interDw.x + ',' + interDw.y + ' L' + interUp.x + ',' + interUp.y + ' Z';\n        } else {\n          var eqP = this.qSVG.perpendicularEquation(eqWallUp, wall.end.x, wall.end.y);\n          // var nextWall = wall.child;\n          //   var nextWallStart = nextWall.start;\n          //   var nextWallEnd = nextWall.end;\n          const angleNextWall = Math.atan2(nextWallEnd.y - nextWallStart.y, nextWallEnd.x - nextWallStart.x);\n          const nextWallThickX = nextWall.thick / 2 * Math.sin(angleNextWall);\n          const nextWallThickY = nextWall.thick / 2 * Math.cos(angleNextWall);\n          const eqNextWallUp = this.qSVG.createEquation(nextWallStart.x + nextWallThickX, nextWallStart.y - nextWallThickY, nextWallEnd.x + nextWallThickX, nextWallEnd.y - nextWallThickY);\n          const eqNextWallDw = this.qSVG.createEquation(nextWallStart.x - nextWallThickX, nextWallStart.y + nextWallThickY, nextWallEnd.x - nextWallThickX, nextWallEnd.y + nextWallThickY);\n          if (Math.abs(angleNextWall - angleWall) > 0.09) {\n            var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqNextWallUp, 'object');\n            var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqNextWallDw, 'object');\n            if (eqWallUp.A == eqNextWallUp.A) {\n              interUp = {\n                x: wall.end.x + wallThickX,\n                y: wall.end.y - wallThickY\n              };\n              interDw = {\n                x: wall.end.x - wallThickX,\n                y: wall.end.y + wallThickY\n              };\n            }\n            var miter = this.qSVG.gap(interUp, {\n              x: nextWallStart.x,\n              y: nextWallStart.y\n            });\n            if (miter > 1000) {\n              var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqP, 'object');\n              var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqP, 'object');\n            }\n          }\n          if (Math.abs(angleNextWall - angleWall) <= 0.09) {\n            var interUp = this.qSVG.intersectionOfEquations(eqWallUp, eqP, 'object');\n            var interDw = this.qSVG.intersectionOfEquations(eqWallDw, eqP, 'object');\n          }\n          wall.coords.push(interDw, interUp);\n          dWay = dWay + 'L' + interDw.x + ',' + interDw.y + ' L' + interUp.x + ',' + interUp.y + ' Z';\n        }\n        wall.graph = this.editor.makeWall(dWay);\n        $('#boxwall').append(wall.graph);\n      }\n    },\n    makeWall: way => {\n      const wallScreen = this.qSVG.create('none', 'path', {\n        d: way,\n        stroke: 'none',\n        fill: this.colorWall,\n        'stroke-width': 1,\n        'stroke-linecap': 'butt',\n        'stroke-linejoin': 'miter',\n        'stroke-miterlimit': 4,\n        'fill-rule': 'nonzero'\n      });\n      return wallScreen;\n    },\n    invisibleWall: (wallToInvisble = false) => {\n      if (!wallToInvisble) {\n        wallToInvisble = this.binder.wall;\n      }\n      const objWall = this.editor.objFromWall(wallBind);\n      if (objWall.length == 0) {\n        wallToInvisble.type = 'separate';\n        wallToInvisble.backUp = wallToInvisble.thick;\n        wallToInvisble.thick = 0.07;\n        this.editor.architect(this.WALLS);\n        this.mode = 'select_mode';\n        $('#panel').show(200);\n        this.save();\n        return true;\n      } else {\n        $('#boxinfo').html('Les murs contenant des portes ou des fenêtres ne peuvent être une séparation !');\n        return false;\n      }\n    },\n    visibleWall: (wallToInvisble = false) => {\n      if (!wallToInvisble) {\n        wallToInvisble = this.binder.wall;\n      }\n      wallToInvisble.type = 'normal';\n      wallToInvisble.thick = wallToInvisble.backUp;\n      wallToInvisble.backUp = false;\n      this.editor.architect(this.WALLS);\n      this.mode = 'select_mode';\n      $('#panel').show(200);\n      this.save();\n      return true;\n    },\n    architect: WALLS => {\n      this.editor.wallsComputing(this.WALLS);\n      const Rooms = this.qSVG.polygonize(this.WALLS);\n      $('#boxRoom').empty();\n      $('#boxSurface').empty();\n      this.editor.roomMaker(Rooms);\n      return true;\n    },\n    splitWall: (wallToSplit = false) => {\n      if (!wallToSplit) {\n        wallToSplit = this.binder.wall;\n      }\n      const eqWall = this.editor.createEquationFromWall(wallToSplit);\n      const wallToSplitLength = this.qSVG.gap(wallToSplit.start, wallToSplit.end);\n      const newWalls = [];\n      for (var k in this.WALLS) {\n        const eq = this.editor.createEquationFromWall(this.WALLS[k]);\n        const inter = this.qSVG.intersectionOfEquations(eqWall, eq, 'obj');\n        if (this.qSVG.btwn(inter.x, this.binder.wall.start.x, this.binder.wall.end.x, 'round') && this.qSVG.btwn(inter.y, this.binder.wall.start.y, this.binder.wall.end.y, 'round') && this.qSVG.btwn(inter.x, this.WALLS[k].start.x, this.WALLS[k].end.x, 'round') && this.qSVG.btwn(inter.y, this.WALLS[k].start.y, this.WALLS[k].end.y, 'round')) {\n          const distance = this.qSVG.gap(wallToSplit.start, inter);\n          if (distance > 5 && distance < wallToSplitLength) {\n            newWalls.push({\n              distance: distance,\n              coords: inter\n            });\n          }\n        }\n      }\n      newWalls.sort(function (a, b) {\n        return (a.distance - b.distance).toFixed(2);\n      });\n      let initCoords = wallToSplit.start;\n      const initThick = wallToSplit.thick;\n      // CLEAR THE WALL BEFORE PIECES RE-BUILDER\n      for (var k in this.WALLS) {\n        if (isObjectsEquals(this.WALLS[k].child, wallToSplit)) {\n          this.WALLS[k].child = null;\n        }\n        if (isObjectsEquals(this.WALLS[k].parent, wallToSplit)) {\n          this.WALLS[k].parent = null;\n        }\n      }\n      this.WALLS.splice(this.WALLS.indexOf(wallToSplit), 1);\n      let wall;\n      for (var k in newWalls) {\n        wall = this.editor.wall(initCoords, newWalls[k].coords, 'normal', initThick);\n        this.WALLS.push(wall);\n        wall.child = WALLS[WALLS.length];\n        initCoords = newWalls[k].coords;\n      }\n      // LAST WALL ->\n      wall = this.editor.wall(initCoords, wallToSplit.end, 'normal', initThick);\n      this.WALLS.push(wall);\n      this.editor.architect(this.WALLS);\n      this.mode = 'select_mode';\n      $('#panel').show(200);\n      this.save();\n      return true;\n    },\n    nearWallNode: (snap, range = Infinity, except = ['']) => {\n      let best;\n      let bestWall;\n      let scan;\n      const i = 0;\n      let scanDistance;\n      let bestDistance = Infinity;\n      for (let k = 0; k < this.WALLS.length; k++) {\n        if (except.indexOf(this.WALLS[k]) == -1) {\n          scanStart = this.WALLS[k].start;\n          scanEnd = this.WALLS[k].end;\n          scanDistance = this.qSVG.measure(scanStart, snap);\n          if (scanDistance < bestDistance) {\n            best = scanStart;\n            bestDistance = scanDistance;\n            bestWall = k;\n          }\n          scanDistance = this.qSVG.measure(scanEnd, snap);\n          if (scanDistance < bestDistance) {\n            best = scanEnd;\n            bestDistance = scanDistance;\n            bestWall = k;\n          }\n        }\n      }\n      if (bestDistance <= range) {\n        return {\n          x: best.x,\n          y: best.y,\n          bestWall: bestWall\n        };\n      } else {\n        return false;\n      }\n    },\n    rayCastingWall: snap => {\n      // USING WALLS SUPER WALL OBJECTS ARRAY\n      const wallList = [];\n      for (let i = 0; i < this.WALLS.length; i++) {\n        const polygon = [];\n        for (let pp = 0; pp < 4; pp++) {\n          polygon.push({\n            x: this.WALLS[i].coords[pp].x,\n            y: this.WALLS[i].coords[pp].y\n          }); // FOR Z\n        }\n\n        if (this.qSVG.rayCasting(snap, polygon)) {\n          wallList.push(this.WALLS[i]); // Return EDGES Index\n        }\n      }\n\n      if (wallList.length == 0) {\n        return false;\n      } else {\n        if (wallList.length == 1) {\n          return wallList[0];\n        } else {\n          return wallList;\n        }\n      }\n    },\n    stickOnWall: snap => {\n      if (this.WALLS.length == 0) {\n        return false;\n      }\n      let wallDistance = Infinity;\n      let wallSelected = {};\n      let result;\n      if (this.WALLS.length == 0) {\n        return false;\n      }\n      for (let e = 0; e < WALLS.length; e++) {\n        var eq1 = this.qSVG.createEquation(this.WALLS[e].coords[0].x, this.WALLS[e].coords[0].y, this.WALLS[e].coords[3].x, this.WALLS[e].coords[3].y);\n        result1 = this.qSVG.nearPointOnEquation(eq1, snap);\n        var eq2 = this.qSVG.createEquation(this.WALLS[e].coords[1].x, this.WALLS[e].coords[1].y, this.WALLS[e].coords[2].x, this.WALLS[e].coords[2].y);\n        result2 = this.qSVG.nearPointOnEquation(eq2, snap);\n        if (result1.distance < wallDistance && this.qSVG.btwn(result1.x, this.WALLS[e].coords[0].x, this.WALLS[e].coords[3].x) && this.qSVG.btwn(result1.y, this.WALLS[e].coords[0].y, this.WALLS[e].coords[3].y)) {\n          wallDistance = result1.distance;\n          wallSelected = {\n            wall: this.WALLS[e],\n            x: result1.x,\n            y: result1.y,\n            distance: result1.distance\n          };\n        }\n        if (result2.distance < wallDistance && this.qSVG.btwn(result2.x, this.WALLS[e].coords[1].x, this.WALLS[e].coords[2].x) && this.qSVG.btwn(result2.y, this.WALLS[e].coords[1].y, this.WALLS[e].coords[2].y)) {\n          wallDistance = result2.distance;\n          wallSelected = {\n            wall: this.WALLS[e],\n            x: result2.x,\n            y: result2.y,\n            distance: result2.distance\n          };\n        }\n      }\n      const vv = this.editor.nearVertice(snap);\n      if (vv.distance < wallDistance) {\n        var eq1 = this.qSVG.createEquation(vv.number.coords[0].x, vv.number.coords[0].y, vv.number.coords[3].x, vv.number.coords[3].y);\n        result1 = this.qSVG.nearPointOnEquation(eq1, vv);\n        var eq2 = this.qSVG.createEquation(vv.number.coords[1].x, vv.number.coords[1].y, vv.number.coords[2].x, vv.number.coords[2].y);\n        result2 = this.qSVG.nearPointOnEquation(eq2, vv);\n        if (result1.distance < wallDistance && this.qSVG.btwn(result1.x, vv.number.coords[0].x, vv.number.coords[3].x) && this.qSVG.btwn(result1.y, vv.number.coords[0].y, vv.number.coords[3].y)) {\n          wallDistance = result1.distance;\n          wallSelected = {\n            wall: vv.number,\n            x: result1.x,\n            y: result1.y,\n            distance: result1.distance\n          };\n        }\n        if (result2.distance < wallDistance && this.qSVG.btwn(result2.x, vv.number.coords[1].x, vv.number.coords[2].x) && this.qSVG.btwn(result2.y, vv.number.coords[1].y, vv.number.coords[2].y)) {\n          wallDistance = result2.distance;\n          wallSelected = {\n            wall: vv.number,\n            x: result2.x,\n            y: result2.y,\n            distance: result2.distance\n          };\n        }\n      }\n      return wallSelected;\n    },\n    objFromWall: (wall, typeObj = false) => {\n      // RETURN OBJDATA INDEX LIST FROM AN WALL\n      const objList = [];\n      for (let scan = 0; scan < this.OBJDATA.length; scan++) {\n        var search;\n        if (this.OBJDATA[scan].family == 'inWall') {\n          const eq = this.qSVG.createEquation(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n          search = this.qSVG.nearPointOnEquation(eq, this.OBJDATA[scan]);\n          if (search.distance < 0.01 && this.qSVG.btwn(this.OBJDATA[scan].x, wall.start.x, wall.end.x) && this.qSVG.btwn(this.OBJDATA[scan].y, wall.start.y, wall.end.y)) {\n            objList.push(this.OBJDATA[scan]);\n          }\n          // WARNING 0.01 TO NO COUNT OBJECT ON LIMITS OF THE EDGE !!!!!!!!!!!! UGLY CODE( MOUSE PRECISION)\n          // TRY WITH ANGLE MAYBE ???\n        }\n      }\n\n      return objList;\n    },\n    createEquationFromWall: wall => {\n      return this.qSVG.createEquation(wall.start.x, wall.start.y, wall.end.x, wall.end.y);\n    },\n    rayCastingWalls: snap => {\n      // WALLS SUPER ARRAY\n      const wallList = [];\n      for (let i = 0; i < this.WALLS.length; i++) {\n        const polygon = [];\n        for (let pp = 0; pp < 4; pp++) {\n          polygon.push({\n            x: this.WALLS[i].coords[pp].x,\n            y: this.WALLS[i].coords[pp].y\n          }); // FOR Z\n        }\n\n        if (this.qSVG.rayCasting(snap, polygon)) {\n          wallList.push(this.WALLS[i]); // Return EDGES Index\n        }\n      }\n\n      if (wallList.length == 0) {\n        return false;\n      } else {\n        if (wallList.length == 1) {\n          return wallList[0];\n        } else {\n          return wallList;\n        }\n      }\n    },\n    inWallRib2: (wall, option = false) => {\n      if (!option) {\n        $('#boxRib').empty();\n      }\n      ribMaster = [];\n      const emptyArray = [];\n      ribMaster.push(emptyArray);\n      ribMaster.push(emptyArray);\n      let inter;\n      let distance;\n      let cross;\n      const angleTextValue = wall.angle * (180 / Math.PI);\n      const objWall = this.editor.objFromWall(wall); // LIST OBJ ON EDGE\n      ribMaster[0].push({\n        wall: wall,\n        crossObj: false,\n        side: 'up',\n        coords: wall.coords[0],\n        distance: 0\n      });\n      ribMaster[1].push({\n        wall: wall,\n        crossObj: false,\n        side: 'down',\n        coords: wall.coords[1],\n        distance: 0\n      });\n      for (const ob in objWall) {\n        const objTarget = objWall[ob];\n        objTarget.up = [this.qSVG.nearPointOnEquation(wall.equations.up, objTarget.limit[0]), this.qSVG.nearPointOnEquation(wall.equations.up, objTarget.limit[1])];\n        objTarget.down = [this.qSVG.nearPointOnEquation(wall.equations.down, objTarget.limit[0]), this.qSVG.nearPointOnEquation(wall.equations.down, objTarget.limit[1])];\n        distance = this.qSVG.measure(wall.coords[0], objTarget.up[0]) / this.meter;\n        ribMaster[0].push({\n          wall: wall,\n          crossObj: ob,\n          side: 'up',\n          coords: objTarget.up[0],\n          distance: distance.toFixed(2)\n        });\n        distance = this.qSVG.measure(wall.coords[0], objTarget.up[1]) / this.meter;\n        ribMaster[0].push({\n          wall: wall,\n          crossObj: ob,\n          side: 'up',\n          coords: objTarget.up[1],\n          distance: distance.toFixed(2)\n        });\n        distance = this.qSVG.measure(wall.coords[1], objTarget.down[0]) / this.meter;\n        ribMaster[1].push({\n          wall: wall,\n          crossObj: ob,\n          side: 'down',\n          coords: objTarget.down[0],\n          distance: distance.toFixed(2)\n        });\n        distance = this.qSVG.measure(wall.coords[1], objTarget.down[1]) / this.meter;\n        ribMaster[1].push({\n          wall: wall,\n          crossObj: ob,\n          side: 'down',\n          coords: objTarget.down[1],\n          distance: distance.toFixed(2)\n        });\n      }\n      distance = this.qSVG.measure(wall.coords[0], wall.coords[3]) / this.meter;\n      ribMaster[0].push({\n        wall: wall,\n        crossObj: false,\n        side: 'up',\n        coords: wall.coords[3],\n        distance: distance\n      });\n      distance = this.qSVG.measure(wall.coords[1], wall.coords[2]) / this.meter;\n      ribMaster[1].push({\n        wall: wall,\n        crossObj: false,\n        side: 'down',\n        coords: wall.coords[2],\n        distance: distance\n      });\n      ribMaster[0].sort(function (a, b) {\n        return (a.distance - b.distance).toFixed(2);\n      });\n      ribMaster[1].sort(function (a, b) {\n        return (a.distance - b.distance).toFixed(2);\n      });\n      for (const t in ribMaster) {\n        for (let n = 1; n < ribMaster[t].length; n++) {\n          const found = true;\n          let shift = -5;\n          const valueText = Math.abs(ribMaster[t][n - 1].distance - ribMaster[t][n].distance);\n          let angleText = angleTextValue;\n          if (found) {\n            if (ribMaster[t][n - 1].side == 'down') {\n              shift = -shift + 10;\n            }\n            if (angleText > 89 || angleText < -89) {\n              angleText -= 180;\n              if (ribMaster[t][n - 1].side == 'down') {\n                shift = -5;\n              } else {\n                shift = -shift + 10;\n              }\n            }\n            this.sizeText[n] = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n            const startText = this.qSVG.middle(ribMaster[t][n - 1].coords.x, ribMaster[t][n - 1].coords.y, ribMaster[t][n].coords.x, ribMaster[t][n].coords.y);\n            this.sizeText[n].setAttributeNS(null, 'x', startText.x);\n            this.sizeText[n].setAttributeNS(null, 'y', startText.y + shift);\n            this.sizeText[n].setAttributeNS(null, 'text-anchor', 'middle');\n            this.sizeText[n].setAttributeNS(null, 'font-family', 'roboto');\n            this.sizeText[n].setAttributeNS(null, 'stroke', '#ffffff');\n            this.sizeText[n].textContent = valueText.toFixed(2);\n            if (this.sizeText[n].textContent < 1) {\n              this.sizeText[n].setAttributeNS(null, 'font-size', '0.8em');\n              this.sizeText[n].textContent = this.sizeText[n].textContent.substring(1, this.sizeText[n].textContent.length);\n            } else {\n              this.sizeText[n].setAttributeNS(null, 'font-size', '1em');\n            }\n            this.sizeText[n].setAttributeNS(null, 'stroke-width', '0.4px');\n            this.sizeText[n].setAttributeNS(null, 'fill', '#666666');\n            this.sizeText[n].setAttribute('transform', 'rotate(' + angleText + ' ' + startText.x + ',' + startText.y + ')');\n            $('#boxRib').append(this.sizeText[n]);\n          }\n        }\n      }\n    },\n    obj2D: (_family, _classObj, _type, _pos, _angle, _angleSign, _size, _hinge = 'normal', _thick, _value) => {\n      let angle = _angle;\n      let angleSign = _angleSign;\n      let classObj = _classObj; // door, window, energy, stair, measure, text ?\n      let family = _family; // inWall, stick, collision, free\n      let graph = this.qSVG.create('none', 'g');\n      let height = (_thick / this.meter).toFixed(2);\n      let hinge = _hinge; // normal, reverse\n      let limit = [];\n      let scale = {\n        x: 1,\n        y: 1\n      };\n      let size = _size;\n      let thick = _thick;\n      let type = _type; // simple, double, simpleSlide, aperture, doubleSlide, fixed, switch, lamp....\n      let value = _value; // value can be \"text label\", \"step number in stair\", etc...\n      let width = (_size / this.meter).toFixed(2);\n      let x = _pos.x;\n      let y = _pos.y;\n      let cc = this.carpentryCalc(classObj, type, size, thick, value);\n      let blank;\n      for (let tt = 0; tt < cc.length; tt++) {\n        if (cc[tt].path) {\n          blank = this.qSVG.create('none', 'path', {\n            d: cc[tt].path,\n            'stroke-width': 1,\n            fill: cc[tt].fill,\n            stroke: cc[tt].stroke,\n            'stroke-dasharray': cc[tt].strokeDashArray\n          });\n        }\n        if (cc[tt].text) {\n          blank = this.qSVG.create('none', 'text', {\n            x: cc[tt].x,\n            y: cc[tt].y,\n            'font-size': cc[tt].fontSize,\n            stroke: cc[tt].stroke,\n            'stroke-width': cc[tt].strokeWidth,\n            'font-family': 'roboto',\n            'text-anchor': 'middle',\n            fill: cc[tt].fill\n          });\n          blank[0].textContent = cc[tt].text;\n        }\n        graph.append(blank);\n      }\n      const bbox = graph.get(0).getBoundingClientRect();\n      bbox.x = bbox.x * this.scaleFactor - this.offset.left * this.scaleFactor + this.originX_viewbox;\n      bbox.y = bbox.y * this.scaleFactor - this.offset.top * this.scaleFactor + this.originY_viewbox;\n      bbox.origin = {\n        x: this.x,\n        y: this.y\n      };\n      const realBbox = [{\n        x: -size / 2,\n        y: -thick / 2\n      }, {\n        x: size / 2,\n        y: -thick / 2\n      }, {\n        x: size / 2,\n        y: thick / 2\n      }, {\n        x: -size / 2,\n        y: thick / 2\n      }];\n      if (family == 'byObject') {\n        family = cc.family;\n      }\n\n      // cc.params.width ? (size = cc.params.width) : (this.size = size)\n      // cc.params.height ? (thick = cc.params.height) : (this.thick = thick)\n      cc.params.width = size;\n      cc.params.height = thick;\n      const params = cc.params; // (bindBox, move, resize, rotate)\n\n      // This function seems like it wants to modify the instance returned in `obj2D`\n      // while also doing some other context specific work\n      const updateFactory = function (meter, scaleFactor, offset, originX_viewbox, originY_viewbox, carpentryCalc) {\n        return function () {\n          this.width = (this.size / meter).toFixed(2);\n          this.height = (this.thick / meter).toFixed(2);\n          const cc = carpentryCalc(this.classObj, this.type, this.size, this.thick, this.value);\n          for (let tt = 0; tt < cc.length; tt++) {\n            if (cc[tt].path) {\n              this.graph.find('path')[tt].setAttribute('d', cc[tt].path);\n            } else {\n              // this.graph.find('text').context.textContent = cc[tt].text;\n            }\n          }\n          const hingeStatus = this.hinge; // normal - reverse\n          let hingeUpdate;\n          if (hingeStatus == 'normal') {\n            hingeUpdate = 1;\n          } else {\n            hingeUpdate = -1;\n          }\n          this.graph.attr({\n            transform: 'translate(' + this.x + ',' + this.y + ') rotate(' + this.angle + ',0,0) scale(' + hingeUpdate + ', 1)'\n          });\n          const bbox = this.graph.get(0).getBoundingClientRect();\n          bbox.x = bbox.x * scaleFactor - offset.left * scaleFactor + originX_viewbox;\n          bbox.y = bbox.y * scaleFactor - offset.top * scaleFactor + originY_viewbox;\n          bbox.origin = {\n            x: this.x,\n            y: this.y\n          };\n          this.bbox = bbox;\n          if (this.classObj == 'text' && this.angle == 0) {\n            this.realBbox = [{\n              x: this.bbox.x,\n              y: this.bbox.y\n            }, {\n              x: this.bbox.x + this.bbox.width,\n              y: this.bbox.y\n            }, {\n              x: this.bbox.x + this.bbox.width,\n              y: this.bbox.y + this.bbox.height\n            }, {\n              x: this.bbox.x,\n              y: this.bbox.y + this.bbox.height\n            }];\n            this.size = this.bbox.width;\n            this.thick = this.bbox.height;\n          }\n          this.realBbox = [{\n            x: -this.size / 2,\n            y: -this.thick / 2\n          }, {\n            x: this.size / 2,\n            y: -this.thick / 2\n          }, {\n            x: this.size / 2,\n            y: this.thick / 2\n          }, {\n            x: -this.size / 2,\n            y: this.thick / 2\n          }];\n          const newRealBbox = [{\n            x: 0,\n            y: 0\n          }, {\n            x: 0,\n            y: 0\n          }, {\n            x: 0,\n            y: 0\n          }, {\n            x: 0,\n            y: 0\n          }];\n          const angleRadian = -this.angle * (Math.PI / 180);\n          newRealBbox[0].x = this.realBbox[0].y * Math.sin(angleRadian) + this.realBbox[0].x * Math.cos(angleRadian) + this.x;\n          newRealBbox[1].x = this.realBbox[1].y * Math.sin(angleRadian) + this.realBbox[1].x * Math.cos(angleRadian) + this.x;\n          newRealBbox[2].x = this.realBbox[2].y * Math.sin(angleRadian) + this.realBbox[2].x * Math.cos(angleRadian) + this.x;\n          newRealBbox[3].x = this.realBbox[3].y * Math.sin(angleRadian) + this.realBbox[3].x * Math.cos(angleRadian) + this.x;\n          newRealBbox[0].y = this.realBbox[0].y * Math.cos(angleRadian) - this.realBbox[0].x * Math.sin(angleRadian) + this.y;\n          newRealBbox[1].y = this.realBbox[1].y * Math.cos(angleRadian) - this.realBbox[1].x * Math.sin(angleRadian) + this.y;\n          newRealBbox[2].y = this.realBbox[2].y * Math.cos(angleRadian) - this.realBbox[2].x * Math.sin(angleRadian) + this.y;\n          newRealBbox[3].y = this.realBbox[3].y * Math.cos(angleRadian) - this.realBbox[3].x * Math.sin(angleRadian) + this.y;\n          this.realBbox = newRealBbox;\n        };\n      };\n      return {\n        angle,\n        angleSign,\n        bbox,\n        classObj,\n        family,\n        graph,\n        height,\n        hinge,\n        limit,\n        params,\n        realBbox,\n        scale,\n        size,\n        thick,\n        type,\n        update: updateFactory(this.meter, this.scaleFactor, this.offset, this.originX_viewbox, this.originY_viewbox, this.carpentryCalc.bind(this)),\n        value,\n        width,\n        x,\n        y\n      };\n    },\n    roomMaker: Rooms => {\n      globalArea = 0;\n      const oldVertexNumber = [];\n      if (Rooms.polygons.length == 0) {\n        this.ROOM = [];\n      }\n      for (var pp = 0; pp < Rooms.polygons.length; pp++) {\n        let foundRoom = false;\n        var roomId;\n        for (var rr = 0; rr < this.ROOM.length; rr++) {\n          roomId = rr;\n          let countCoords = Rooms.polygons[pp].coords.length;\n          var diffCoords = this.qSVG.diffObjIntoArray(Rooms.polygons[pp].coords, this.ROOM[rr].coords);\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 0 || diffCoords == 0) {\n              countCoords = 0;\n            }\n          }\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length + 1) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 1 || diffCoords == 2) {\n              countCoords = 0;\n            }\n          }\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length - 1) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 1) {\n              countCoords = 0;\n            }\n          }\n          if (countCoords == 0) {\n            foundRoom = true;\n            this.ROOM[rr].area = Rooms.polygons[pp].area;\n            this.ROOM[rr].inside = Rooms.polygons[pp].inside;\n            this.ROOM[rr].coords = Rooms.polygons[pp].coords;\n            this.ROOM[rr].coordsOutside = Rooms.polygons[pp].coordsOutside;\n            this.ROOM[rr].way = Rooms.polygons[pp].way;\n            this.ROOM[rr].coordsInside = Rooms.polygons[pp].coordsInside;\n            break;\n          }\n        }\n        if (!foundRoom) {\n          this.ROOM.push({\n            coords: Rooms.polygons[pp].coords,\n            coordsOutside: Rooms.polygons[pp].coordsOutside,\n            coordsInside: Rooms.polygons[pp].coordsInside,\n            inside: Rooms.polygons[pp].inside,\n            way: Rooms.polygons[pp].way,\n            area: Rooms.polygons[pp].area,\n            surface: '',\n            name: '',\n            color: 'gradientWhite',\n            showSurface: true,\n            action: 'add'\n          });\n        }\n      }\n      const toSplice = [];\n      for (var rr = 0; rr < this.ROOM.length; rr++) {\n        let found = true;\n        for (var pp = 0; pp < Rooms.polygons.length; pp++) {\n          let countRoom = this.ROOM[rr].coords.length;\n          var diffCoords = this.qSVG.diffObjIntoArray(Rooms.polygons[pp].coords, this.ROOM[rr].coords);\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 0 || diffCoords == 0) {\n              countRoom = 0;\n            }\n          }\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length + 1) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 1 || diffCoords == 2) {\n              countRoom = 0;\n            }\n          }\n          if (Rooms.polygons[pp].way.length == this.ROOM[rr].way.length - 1) {\n            if (this.qSVG.diffArray(Rooms.polygons[pp].way, this.ROOM[rr].way).length == 1) {\n              countRoom = 0;\n            }\n          }\n          if (countRoom == 0) {\n            found = true;\n            break;\n          } else {\n            found = false;\n          }\n        }\n        if (!found) {\n          toSplice.push(rr);\n        }\n      }\n      toSplice.sort(function (a, b) {\n        return b - a;\n      });\n      for (let ss = 0; ss < toSplice.length; ss++) {\n        this.ROOM.splice(toSplice[ss], 1);\n      }\n      $('#boxRoom').empty();\n      $('#boxSurface').empty();\n      $('#boxArea').empty();\n      for (var rr = 0; rr < this.ROOM.length; rr++) {\n        if (this.ROOM[rr].action == 'add') {\n          globalArea = globalArea + this.ROOM[rr].area;\n        }\n        const pathSurface = this.ROOM[rr].coords;\n        let pathCreate = 'M' + pathSurface[0].x + ',' + pathSurface[0].y;\n        for (let p = 1; p < pathSurface.length; p++) {\n          pathCreate = pathCreate + ' ' + 'L' + pathSurface[p].x + ',' + pathSurface[p].y;\n        }\n        if (this.ROOM[rr].inside.length > 0) {\n          for (let ins = 0; ins < this.ROOM[rr].inside.length; ins++) {\n            pathCreate = pathCreate + ' M' + Rooms.polygons[this.ROOM[rr].inside[ins]].coords[Rooms.polygons[this.ROOM[rr].inside[ins]].coords.length - 1].x + ',' + Rooms.polygons[this.ROOM[rr].inside[ins]].coords[Rooms.polygons[this.ROOM[rr].inside[ins]].coords.length - 1].y;\n            for (let free = Rooms.polygons[this.ROOM[rr].inside[ins]].coords.length - 2; free > -1; free--) {\n              pathCreate = pathCreate + ' L' + Rooms.polygons[this.ROOM[rr].inside[ins]].coords[free].x + ',' + Rooms.polygons[this.ROOM[rr].inside[ins]].coords[free].y;\n            }\n          }\n        }\n        this.qSVG.create('boxRoom', 'path', {\n          d: pathCreate,\n          fill: 'url(#' + this.ROOM[rr].color + ')',\n          'fill-opacity': 1,\n          stroke: 'none',\n          'fill-rule': 'evenodd',\n          class: 'room'\n        });\n        this.qSVG.create('boxSurface', 'path', {\n          d: pathCreate,\n          fill: '#fff',\n          'fill-opacity': 1,\n          stroke: 'none',\n          'fill-rule': 'evenodd',\n          class: 'room'\n        });\n        const centroid = this.qSVG.polygonVisualCenter(this.ROOM[rr]);\n        if (this.ROOM[rr].name != '') {\n          var styled = {\n            color: '#343938'\n          };\n          if (this.ROOM[rr].color == 'gradientBlack' || this.ROOM[rr].color == 'gradientBlue') {\n            styled.color = 'white';\n          }\n          this.qSVG.textOnDiv(this.ROOM[rr].name, centroid, styled, 'boxArea');\n        }\n        if (this.ROOM[rr].name != '') {\n          centroid.y = centroid.y + 20;\n        }\n        let area = (this.ROOM[rr].area / (this.meter * this.meter)).toFixed(2) + ' m²';\n        var styled = {\n          color: '#343938',\n          fontSize: '12.5px',\n          fontWeight: 'normal'\n        };\n        if (this.ROOM[rr].surface != '') {\n          styled.fontWeight = 'bold';\n          area = this.ROOM[rr].surface + ' m²';\n        }\n        if (this.ROOM[rr].color == 'gradientBlack' || this.ROOM[rr].color == 'gradientBlue') {\n          styled.color = 'white';\n        }\n        if (this.ROOM[rr].showSurface) {\n          this.qSVG.textOnDiv(area, centroid, styled, 'boxArea');\n        }\n      }\n      if (globalArea <= 0) {\n        globalArea = 0;\n        $('#areaValue').html('');\n      } else {\n        $('#areaValue').html('<i class=\"fa fa-map-o\" aria-hidden=\"true\"></i> ' + (globalArea / 3600).toFixed(1) + ' m²');\n      }\n    },\n    rayCastingRoom: point => {\n      const x = point.x,\n        y = point.y;\n      const roomGroup = [];\n      for (let polygon = 0; polygon < this.ROOM.length; polygon++) {\n        const inside = this.qSVG.rayCasting(point, this.ROOM[polygon].coords);\n        if (inside) {\n          roomGroup.push(polygon);\n        }\n      }\n      if (roomGroup.length > 0) {\n        let bestArea = this.ROOM[roomGroup[0]].area;\n        let roomTarget;\n        for (let siz = 0; siz < roomGroup.length; siz++) {\n          if (this.ROOM[roomGroup[siz]].area <= bestArea) {\n            bestArea = this.ROOM[roomGroup[siz]].area;\n            roomTarget = this.ROOM[roomGroup[siz]];\n          }\n        }\n        return roomTarget;\n      } else {\n        return false;\n      }\n    },\n    nearVertice: (snap, range = 10000) => {\n      let bestDistance = Infinity;\n      let bestVertice;\n      for (let i = 0; i < this.WALLS.length; i++) {\n        const distance1 = this.qSVG.gap(snap, {\n          x: this.WALLS[i].start.x,\n          y: this.WALLS[i].start.y\n        });\n        const distance2 = this.qSVG.gap(snap, {\n          x: this.WALLS[i].end.x,\n          y: this.WALLS[i].end.y\n        });\n        if (distance1 < distance2 && distance1 < bestDistance) {\n          bestDistance = distance1;\n          bestVertice = {\n            number: this.WALLS[i],\n            x: this.WALLS[i].start.x,\n            y: this.WALLS[i].start.y,\n            distance: Math.sqrt(bestDistance)\n          };\n        }\n        if (distance2 < distance1 && distance2 < bestDistance) {\n          bestDistance = distance2;\n          bestVertice = {\n            number: this.WALLS[i],\n            x: this.WALLS[i].end.x,\n            y: this.WALLS[i].end.y,\n            distance: Math.sqrt(bestDistance)\n          };\n        }\n      }\n      if (bestDistance < range * range) {\n        return bestVertice;\n      } else {\n        return false;\n      }\n    },\n    nearWall: (snap, range = Infinity) => {\n      let wallDistance = Infinity;\n      let wallSelected = {};\n      let result;\n      if (this.WALLS.length == 0) {\n        return false;\n      }\n      for (let e = 0; e < this.WALLS.length; e++) {\n        const eq = this.qSVG.createEquation(this.WALLS[e].start.x, this.WALLS[e].start.y, this.WALLS[e].end.x, this.WALLS[e].end.y);\n        result = this.qSVG.nearPointOnEquation(eq, snap);\n        if (result.distance < wallDistance && this.qSVG.btwn(result.x, this.WALLS[e].start.x, this.WALLS[e].end.x) && this.qSVG.btwn(result.y, this.WALLS[e].start.y, this.WALLS[e].end.y)) {\n          wallDistance = result.distance;\n          wallSelected = {\n            wall: this.WALLS[e],\n            x: result.x,\n            y: result.y,\n            distance: result.distance\n          };\n        }\n      }\n      const vv = this.editor.nearVertice(snap);\n      if (vv.distance < wallDistance) {\n        wallDistance = vv.distance;\n        wallSelected = {\n          wall: vv.number,\n          x: vv.x,\n          y: vv.y,\n          distance: vv.distance\n        };\n      }\n      if (wallDistance <= range) {\n        return wallSelected;\n      } else {\n        return false;\n      }\n    },\n    showScaleBox: () => {\n      if (this.ROOM.length > 0) {\n        let minX, minY, maxX, maxY;\n        for (let i = 0; i < this.WALLS.length; i++) {\n          var px = this.WALLS[i].start.x;\n          var py = this.WALLS[i].start.y;\n          if (!i || px < minX) {\n            minX = px;\n          }\n          if (!i || py < minY) {\n            minY = py;\n          }\n          if (!i || px > maxX) {\n            maxX = px;\n          }\n          if (!i || py > maxY) {\n            maxY = py;\n          }\n          var px = this.WALLS[i].end.x;\n          var py = this.WALLS[i].end.y;\n          if (!i || px < minX) {\n            minX = px;\n          }\n          if (!i || py < minY) {\n            minY = py;\n          }\n          if (!i || px > maxX) {\n            maxX = px;\n          }\n          if (!i || py > maxY) {\n            maxY = py;\n          }\n        }\n        const width = maxX - minX;\n        const height = maxY - minY;\n        const labelWidth = ((maxX - minX) / this.meter).toFixed(2);\n        const labelHeight = ((maxY - minY) / this.meter).toFixed(2);\n        let sideRight = 'm' + (maxX + 40) + ',' + minY;\n        sideRight = sideRight + ' l60,0 m-40,10 l10,-10 l10,10 m-10,-10';\n        sideRight = sideRight + ' l0,' + height;\n        sideRight = sideRight + ' m-30,0 l60,0 m-40,-10 l10,10 l10,-10';\n        sideRight = sideRight + 'M' + minX + ',' + (minY - 40);\n        sideRight = sideRight + ' l0,-60 m10,40 l-10,-10 l10,-10 m-10,10';\n        sideRight = sideRight + ' l' + width + ',0';\n        sideRight = sideRight + ' m0,30 l0,-60 m-10,40 l10,-10 l-10,-10';\n        $('#boxScale').empty();\n        this.qSVG.create('boxScale', 'path', {\n          d: sideRight,\n          stroke: '#555',\n          fill: 'none',\n          'stroke-width': 0.3,\n          'stroke-linecap': 'butt',\n          'stroke-linejoin': 'miter',\n          'stroke-miterlimit': 4,\n          'fill-rule': 'nonzero'\n        });\n        var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttributeNS(null, 'x', maxX + 70);\n        text.setAttributeNS(null, 'y', (maxY + minY) / 2 + 35);\n        text.setAttributeNS(null, 'fill', '#555');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.textContent = labelHeight + ' m';\n        text.setAttribute('transform', 'rotate(270 ' + (maxX + 70) + ',' + (maxY + minY) / 2 + ')');\n        $('#boxScale').append(text);\n        var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttributeNS(null, 'x', (maxX + minX) / 2);\n        text.setAttributeNS(null, 'y', minY - 95);\n        text.setAttributeNS(null, 'fill', '#555');\n        text.setAttributeNS(null, 'text-anchor', 'middle');\n        text.textContent = labelWidth + ' m';\n        $('#boxScale').append(text);\n      }\n    }\n  };\n};\nfunction DomReady(fn, context) {\n  function onReady(event) {\n    window.removeEventListener('DOMContentLoaded', onReady);\n    fn.call(context, event);\n  }\n  function onReadyIe(event) {\n    if (window.readyState === 'complete') {\n      window.detachEvent('onreadystatechange', onReadyIe);\n      fn.call(context, event);\n    }\n  }\n  ;\n  window.addEventListener && window.addEventListener('DOMContentLoaded', onReady, false) || window.attachEvent && window.attachEvent('onreadystatechange', onReadyIe, false);\n}\nconst inst = new Application();\nDomReady(function () {\n  inst.initialize();\n});\nwindow.Floorplan = inst;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJleHBvcnRGbG9vcnBsYW4iLCJyZXF1aXJlIiwiTUlOX1pPT00iLCJNQVhfWk9PTSIsIkFwcGxpY2F0aW9uIiwiV0FMTFMiLCJPQkpEQVRBIiwiUk9PTSIsIkhJU1RPUlkiLCJ3YWxsU2l6ZSIsInBhcnRpdGlvblNpemUiLCJ2aXNpYmxlTGF5ZXJzIiwiU2V0IiwiYWN0aXZlTGF5ZXIiLCJkcmFnIiwiYWN0aW9uIiwibWFnbmV0aWMiLCJjb25zdHJ1YyIsIlJjaXJjbGViaW5kZXIiLCJtb2RlIiwibW9kZU9wdGlvbiIsImxpbkVsZW1lbnQiLCIkIiwidGFpbGxlX3ciLCJ3aWR0aCIsInRhaWxsZV9oIiwiaGVpZ2h0Iiwib2Zmc2V0IiwiZ3JpZCIsInNob3dBcmVhIiwibWV0ZXIiLCJncmlkX3NuYXAiLCJjb2xvcmJhY2tncm91bmQiLCJjb2xvcmxpbmUiLCJjb2xvcnJvb20iLCJjb2xvcldhbGwiLCJwb3giLCJwb3kiLCJzZWdtZW50IiwieHBhdGgiLCJ5cGF0aCIsInRhY3RpbGUiLCJ3aWR0aF92aWV3Ym94IiwiaGVpZ2h0X3ZpZXdib3giLCJyYXRpb192aWV3Ym94Iiwib3JpZ2luWF92aWV3Ym94Iiwib3JpZ2luWV92aWV3Ym94Iiwic2l6ZVRleHQiLCJzaG93QWxsU2l6ZVN0YXR1cyIsImVkaXRvciIsImVkaXRvckZhY3RvcnkiLCJxU1ZHIiwicVNWR0ZhY3RvcnkiLCJ6b29tIiwic2NhbGVGYWN0b3IiLCJwcm90b3R5cGUiLCJpbml0aWFsaXplIiwidGV4dEVkaXRvckNvbG9yQnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicm9vbUNvbG9yQnRuIiwib2JqVHJhc2hCdG4iLCJkcm9wZG93bk1lbnUiLCJnZXRFbGVtZW50QnlJZCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJiaW5kZXIiLCJvYmoiLCJncmFwaCIsInJlbW92ZSIsInNwbGljZSIsImluZGV4T2YiLCJoaWRlIiwic2hvdyIsImZvbmNfYnV0dG9uIiwiaHRtbCIsInVuZGVmaW5lZCIsInJpYiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkZWx0YVkiLCJ6b29tX21ha2VyIiwid2FsbCIsImsiLCJpc09iamVjdHNFcXVhbHMiLCJjaGlsZCIsInBhcmVudCIsImFyY2hpdGVjdCIsImNsaWNrIiwiY3NzIiwibXVsdGkiLCJlIiwiY3VycmVudFRhcmdldCIsImdldEF0dHJpYnV0ZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJoaXN0b3J5VGVtcCIsIkpTT04iLCJwYXJzZSIsImxvYWQiLCJsZW5ndGgiLCJzYXZlIiwia2V5Q29kZSIsInF1ZXJ5U2VsZWN0b3IiLCJtb3VzZURvd25IYW5kbGVyIiwiYmluZCIsIm1vdXNlTW92ZUhhbmRsZXIiLCJtb3VzZVVwSGFuZGxlciIsImxlbmd0aFRlbXAiLCJzdHlsZSIsImNvbG9yIiwiZGF0YSIsInZhbCIsImF0dHIiLCJmaWxsIiwic2VsVGV4dCIsInRleHRDb250ZW50IiwicGFyZW50cyIsImZpbmQiLCJpbml0SGlzdG9yeSIsImJvb3QiLCJpbmRleCIsInJlbW92ZUl0ZW0iLCJwdXNoIiwib2JqRGF0YSIsIndhbGxEYXRhIiwidGhpY2siLCJzdGFydCIsIngiLCJ5IiwiZW5kIiwidHlwZSIsImFuZ2xlIiwiZXF1YXRpb25zIiwidXAiLCJBIiwiQiIsImRvd24iLCJiYXNlIiwiY29vcmRzIiwiY29udGV4dCIsInJvb21EYXRhIiwiY29vcmRzT3V0c2lkZSIsImNvb3Jkc0luc2lkZSIsImluc2lkZSIsIndheSIsImFyZWEiLCJzdXJmYWNlIiwibmFtZSIsInNob3dTdXJmYWNlIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsImltcG9ydEZsb29ycGxhbiIsImZsb29ycGxhbkpzb24iLCJPTyIsIm9iajJEIiwiZmFtaWx5IiwiY2xhc3NPYmoiLCJhbmdsZVNpZ24iLCJzaXplIiwiaGluZ2UiLCJ2YWx1ZSIsImxpbWl0IiwiYXBwZW5kIiwidXBkYXRlIiwic2hvd1NjYWxlQm94IiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIm9wZXJhdGlvbiIsInhtb3ZlIiwieHZpZXciLCJjYWxjdWxfc25hcCIsInN0YXRlIiwiZVgiLCJlWSIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJ4X21vdXNlIiwibGVmdCIsInlfbW91c2UiLCJ0b3AiLCJ4X2dyaWQiLCJ5X2dyaWQiLCJNYXRoIiwicm91bmQiLCJ4TW91c2UiLCJ5TW91c2UiLCJpbnRlcnNlY3Rpb25PZmYiLCJsaW5lSW50ZXJzZWN0aW9uUCIsImludGVyc2VjdGlvbiIsInNuYXAiLCJyYW5nZSIsIkluZmluaXR5IiwiZXhjZXB0IiwiYmVzdEVxUG9pbnQiLCJlcXVhdGlvbiIsImRpc3RhbmNlIiwiY3JlYXRlIiwiZCIsInN0cm9rZSIsIngxIiwieTEiLCJ4MiIsInkyIiwiYWJzIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJlcSIsIm5lYXJQb2ludE9uRXF1YXRpb24iLCJzZXRCZXN0RXFQb2ludCIsIm5vZGUiLCJoaWRlQWxsU2l6ZSIsImVtcHR5IiwiaW5XYWxsUmliIiwib3B0aW9uIiwicmliTWFzdGVyIiwiaW50ZXIiLCJjcm9zcyIsImFuZ2xlVGV4dFZhbHVlIiwiUEkiLCJvYmpXYWxsIiwib2JqRnJvbVdhbGwiLCJjcm9zc09iaiIsInNpZGUiLCJvYmpUYXJnZXQiLCJvYiIsIm1lYXN1cmUiLCJ0b0ZpeGVkIiwic29ydCIsImEiLCJiIiwidCIsIm4iLCJmb3VuZCIsInNoaWZ0IiwidmFsdWVUZXh0IiwiYW5nbGVUZXh0IiwiY3JlYXRlRWxlbWVudE5TIiwic3RhcnRUZXh0IiwibWlkZGxlIiwic2V0QXR0cmlidXRlTlMiLCJzdWJzdHJpbmciLCJpIiwicHVzaFRvUmliTWFzdGVyIiwicCIsImludGVyc2VjdGlvbk9mRXF1YXRpb25zIiwiYnR3biIsIndhbGxJbmRleCIsImVkZ2UiLCJjcm9zc0VkZ2UiLCJwb2x5Z29uIiwicHAiLCJyYXlDYXN0aW5nIiwic2hpZnRWYWx1ZSIsIm1vZGVzZXR0aW5nIiwicmF6X2J1dHRvbiIsImNhcnBlbnRyeUNhbGMiLCJ0eXBlT2JqIiwic2l6ZU9iaiIsInRoaWNrT2JqIiwiZGl2aWRlck9iaiIsInBhcmFtcyIsImJpbmRCb3giLCJtb3ZlIiwicmVzaXplIiwicmVzaXplTGltaXQiLCJtaW4iLCJtYXgiLCJyb3RhdGUiLCJwdXNoVG9Db25zdHJ1YyIsImNpcmNsZVBhdGgiLCJ0ZXh0IiwiZm9udFNpemUiLCJzdHJva2VXaWR0aCIsImhlaWdodFN0ZXAiLCJmaXJzdEluZGV4Iiwic2Vjb25kSW5kZXgiLCJtb3VzZURvd25fbW9kZV9zZWxlY3QiLCJub2RlQ29udHJvbCIsIndhbGxMaXN0T2JqIiwid2FsbExpc3RSdW4iLCJlZSIsIm5vZGVUYXJnZXQiLCJmcm9tIiwiaW5kZXhPYmoiLCJiZWZvcmUiLCJlcXVhdGlvbjIiLCJjcmVhdGVFcXVhdGlvbkZyb21XYWxsIiwiZXF1YXRpb24xIiwiYW5nbGUxMiIsImFuZ2xlQmV0d2VlbkVxdWF0aW9ucyIsIm5ld1dhbGwiLCJwZXJwZW5kaWN1bGFyRXF1YXRpb24iLCJmb3VuZEVxIiwiYW5nbGVGb2xsb3ciLCJmb2xsb3ciLCJiYWNrVXAiLCJlcXVhdGlvbjMiLCJhbmdsZTIzIiwiZXF1YXRpb25Gb2xsb3dlcnMiLCJlcXVhdGlvbnNPYmoiLCJtb3VzZURvd25fbW9kZV9saW5lX3BhcnRpdGlvbiIsIndhbGxTdGFydENvbnN0cnVjIiwibmVhcldhbGwiLCJtb3VzZURvd25fbW9kZV9kaXN0YW5jZSIsIm1vdXNlRG93bl9tb2RlX2VkaXRfZG9vciIsIm1vdXNlTW92ZV9tb2RlX3NlbGVjdCIsIm9ialgxIiwiYmJveCIsIm9ialgyIiwicmlnaHQiLCJvYmpZMSIsIm9ialkyIiwiYm90dG9tIiwicmVhbEJib3hDb29yZHMiLCJyZWFsQmJveCIsImN1cnNvciIsIm9yaWdpbiIsIm9sZFgiLCJvbGRZIiwid2FsbExpc3QiLCJyYXlDYXN0aW5nV2FsbCIsIm9sZFhZIiwidGFyZ2V0IiwiZ2V0IiwiZmlyc3RDaGlsZCIsIndhbGxOb2RlIiwibmVhcldhbGxOb2RlIiwiaWQiLCJjbGFzcyIsImN4IiwiY3kiLCJyIiwid2FsbEJpbmQiLCJyYXlDYXN0aW5nV2FsbHMiLCJpbldhbGxSaWIyIiwibGluZSIsImJhbGwxIiwiYmFsbDIiLCJ4eHhfbW91c2UiLCJ5eXlfbW91c2UiLCJkaXN0WCIsImRpc3RZIiwibW91c2VNb3ZlX21vZGVfbGluZV9wYXJ0aXRpb24iLCJoZWxwQ29uc3RydWMiLCJzdGFydGVyIiwibWluTW92ZUdyaWQiLCJiZXN0V2FsbCIsIndzIiwibGluZWNvbnN0cnVjIiwic3ZnYWRkIiwiaGVscENvbnN0cnVjRW5kIiwid2FsbEVuZENvbnN0cnVjIiwiY2hlY2tlZCIsImZsdHQiLCJmbHQiLCJkZWciLCJjb2VmZiIsInBoaSIsIlhkaWFnIiwibW91c2VNb3ZlX21vZGVfZG9vciIsIndhbGxTZWxlY3QiLCJhbmdsZVdhbGwiLCJhbmdsZURlZyIsInYxIiwidmVjdG9yWFkiLCJ2MiIsIm5ld0FuZ2xlIiwidmVjdG9yRGV0ZXIiLCJzaWduIiwic3RhcnRDb29yZHMiLCJsaW1pdHMiLCJsaW1pdE9iaiIsIm1vdXNlTW92ZV9tb2RlX25ldHdvcmsiLCJtb3VzZU1vdmVfbW9kZV9lbGVjdHJpY2FsIiwibW91c2VNb3ZlX21vZGVfZGlzdGFuY2UiLCJsYWJlbE1lYXN1cmUiLCJ0cmFuc2Zvcm0iLCJtb3VzZU1vdmVfbW9kZV9ub2RlIiwiYWRkTm9kZSIsIm1vdXNlTW92ZV9tb2RlX2JpbmQiLCJub2RlTW92ZSIsIndhbGxzQ29tcHV0aW5nIiwiaW5kZXhMaW1pdHMiLCJsaW1pdEJ0d24iLCJSb29tcyIsInBvbHlnb25pemUiLCJyb29tTWFrZXIiLCJpbnRlcnNlY3Rpb24xIiwiaW50ZXJzZWN0aW9uMiIsImludGVyc2VjdGlvbjMiLCJkaXN0YW5jZUZyb21TdGFydCIsImdhcCIsImRpc3RhbmNlRnJvbUVuZCIsImludGVyc2VjdGlvbkZvbGxvd2VycyIsInJwIiwiaW50ZXJzZWN0aW9uT2JqIiwibW91c2VNb3ZlX21vZGVfdGV4dCIsIm1vdXNlTW92ZV9tb2RlX29iamVjdCIsInBvcyIsInN0aWNrT25XYWxsIiwic2luIiwiY29zIiwibW91c2VNb3ZlX21vZGVfcm9vbSIsInJvb21UYXJnZXQiLCJyYXlDYXN0aW5nUm9vbSIsInBhdGhTdXJmYWNlIiwicGF0aENyZWF0ZSIsImlucyIsInBvbHlnb25zIiwiZnJlZSIsIm1vdXNlVXBfbW9kZV9zZWxlY3QiLCJtb3VzZVVwX21vZGVfbGluZV9wYXJ0aXRpb24iLCJzaXplV2FsbCIsIm1vdXNlVXBfbW9kZV9lbGVjdHJpY2FsIiwibW91c2VVcF9tb2RlX25ldHdvcmsiLCJtb3VzZVVwX21vZGVfZG9vciIsIm1vdXNlVXBfbW9kZV9kaXN0YW5jZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1vdXNlVXBfbW9kZV9ub2RlIiwibW91c2VVcF9tb2RlX2JpbmQiLCJtb3ZlT2JqIiwibW91c2VVcF9tb2RlX3RleHQiLCJ0ZXh0TW9kYWwiLCJib290c3RyYXAiLCJNb2RhbCIsIm1vdXNlVXBfbW9kZV9vYmplY3QiLCJ0YXJnZXRCb3giLCJtb3VzZVVwX21vZGVfcm9vbSIsInJvb21OYW1lIiwiaW5uZXJIVE1MIiwiYWN0aW9uVG9EbyIsInNoYXBlIiwiYXR0cnMiLCJleCIsImV5IiwiZHkiLCJkeCIsInRoZXRhIiwiYXRhbjIiLCJ4MyIsInkzIiwicGFyc2VJbnQiLCJhbmdsZXJhZCIsImF0YW4iLCJhbmdsZWRlZyIsInNxcnQiLCJwb3ciLCJjIiwiYWNvcyIsInJhZCIsImdldEFuZ2xlIiwiZWwxIiwiZWwyIiwieG8iLCJ5byIsInhkIiwieWQiLCJtaWRkbGVYIiwibWlkZGxlWSIsInRyaWFuZ2xlQXJlYSIsImZwIiwic3AiLCJ0cCIsInBvIiwicHQiLCJwRGlzdGFuY2UiLCJwb2ludCIsInBvaW50QSIsInBvaW50QiIsImRvdCIsImxlbl9zcSIsInBhcmFtIiwieHgiLCJ5eSIsImNyZWF0ZUVxdWF0aW9uIiwieDAiLCJ5MCIsIm0xIiwibTIiLCJhbmdsZVJhZCIsIm1lc3NhZ2UiLCJyZXRBcnJheSIsInJldE9iaiIsInhUIiwieVQiLCJvYmoxIiwib2JqMiIsInZlY3RvckFuZ2xlIiwiYjEiLCJiMiIsIm5lYXJQb2ludEZyb21QYXRoIiwiUGF0aHN2ZyIsInBhdGhMZW5ndGgiLCJnZXRUb3RhbExlbmd0aCIsInByZWNpc2lvbiIsImJlc3QiLCJiZXN0TGVuZ3RoIiwiYmVzdERpc3RhbmNlIiwic2NhbiIsInNjYW5MZW5ndGgiLCJzY2FuRGlzdGFuY2UiLCJnZXRQb2ludEF0TGVuZ3RoIiwiYWZ0ZXIiLCJiZWZvcmVMZW5ndGgiLCJhZnRlckxlbmd0aCIsImJlZm9yZURpc3RhbmNlIiwiYWZ0ZXJEaXN0YW5jZSIsInNlZyIsImdldFBhdGhTZWdBdExlbmd0aCIsImdldE5vZGVGcm9tUGF0aCIsIm5vZGVMaXN0IiwiZ2V0UGF0aERhdGEiLCJub2RlcyIsImNvdW50Tm9kZSIsInZhbHVlcyIsInBvbHlnb25JbnRvV2FsbHMiLCJ2ZXJ0ZXgiLCJ2ZXJ0ZXhBcnJheSIsInJyIiwic2VnU3RhcnQiLCJzZWdFbmQiLCJvdXRzaWRlIiwibmV4dEVkZ2UiLCJhbmdsZUVkZ2UiLCJhbmdsZU5leHRFZGdlIiwiZWRnZVRoaWNrbmVzc1giLCJlZGdlVGhpY2tuZXNzWSIsIm5leHRFZGdlVGhpY2tuZXNzWCIsIm5leHRFZGdlVGhpY2tuZXNzWSIsImVxRWRnZVVwIiwiZXFFZGdlRHciLCJlcU5leHRFZGdlVXAiLCJlcU5leHRFZGdlRHciLCJpaSIsImNvb3Jkc3MiLCJyZWFsQXJlYSIsImoiLCJhcmVhUm9vbSIsImRpZ2l0Iiwicm91Z2hBcmVhIiwicGVyaW1ldGVyUm9vbSIsInJvdWdoUm9vbSIsImFkZGVkIiwianVuY3Rpb25MaXN0IiwianVuY3Rpb24iLCJzZWdtZW50SnVuY3Rpb24iLCJqdW5jdGlvbkNoaWxkIiwidiIsImludGVyc2VjIiwidmVydGV4TGlzdCIsInZlcnRleHRlc3QiLCJqaiIsInZ2IiwiYnlwYXNzIiwidG9DbGVhbiIsInNzIiwicmVtb3ZlZCIsInNnIiwic2MiLCJzY2ciLCJmbG9vciIsImZyIiwiZnQiLCJkT25lIiwiZFR3byIsImNjIiwidmVydGV4VGVzdCIsImFycmF5Q29tcGFyZSIsImFycjEiLCJhcnIyIiwiYXBwIiwibWludXMiLCJjb29yZENvdW50ZXIiLCJpRmlyc3QiLCJpU2Vjb25kIiwidmVjdG9yVmVydGV4IiwidmV4MSIsInZleDIiLCJ2ZXgzIiwidkN1cnIiLCJ2TmV4dCIsIk5hIiwiTmIiLCJTIiwiQkFDIiwic2VnbWVudFRyZWUiLCJWRVJURVhfTlVNQkVSIiwiVFJFRUxJU1QiLCJXQVkiLCJDT1VOVCIsIk9SSUdJTiIsInRyZWUiLCJUUkVFVEVNUCIsIldSTyIsIldST19BUlJBWSIsInRvU3RyaW5nIiwic3BsaXQiLCJXUiIsImJlc3RUb0FkZCIsImJlc3REZXQiLCJuZXh0VmVydGV4IiwibmV4dERldGVyVmFsdWUiLCJuZXh0RGV0ZXJWYWwiLCJuZXh0RmxhZyIsInZEZXQiLCJ2ZXJ0ZXhDb3B5IiwiZWRnZXNDaGlsZCIsIldBWVMiLCJqYyIsImJlc3RWZXJ0ZXgiLCJiZXN0VmVydGV4VmFsdWUiLCJ0ZW1wU3VyZmFjZSIsImxlbmd0aFJvb20iLCJiZXN0QXJlYSIsInNzcyIsInJlYWxDb29yZHMiLCJvdXRzaWRlQXJlYSIsImFhIiwibG9vcGluZyIsImFiIiwiYWMiLCJwb2x5Z29uRnJlZSIsImNvdW50Q29vcmRzIiwicGYiLCJkaWZmQXJyYXkiLCJjb25jYXQiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsImRpZmZPYmpJbnRvQXJyYXkiLCJjb3VudCIsIndhaXRpbmciLCJ4aSIsInlpIiwieGoiLCJ5aiIsImludGVyc2VjdCIsInBvbHlnb25WaXN1YWxDZW50ZXIiLCJyb29tIiwiaW5zaWRlQXJyYXkiLCJzYW1wbGUiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwic2FtcGxlV2lkdGgiLCJzYW1wbGVIZWlnaHQiLCJoaCIsInd3IiwicG9zWCIsInBvc1kiLCJiZXN0UmFuZ2UiLCJiZXN0TWF0cml4IiwibWF0cml4IiwibWluRGlzdGFuY2UiLCJ0ZXh0T25EaXYiLCJsYWJlbCIsInN0eWxlZCIsImRpdiIsImZvbnRXZWlnaHQiLCJhcHBlbmRDaGlsZCIsImdldFdhbGxOb2RlIiwidmVydGljZSIsInByZXZpb3VzV2FsbCIsInByZXZpb3VzV2FsbFN0YXJ0IiwicHJldmlvdXNXYWxsRW5kIiwiZXFJbnRlciIsImFuZ2xlSW50ZXIiLCJuZXh0V2FsbCIsIm5leHRXYWxsU3RhcnQiLCJuZXh0V2FsbEVuZCIsIndhbGxUaGlja1giLCJ3YWxsVGhpY2tZIiwiZXFXYWxsVXAiLCJlcVdhbGxEdyIsImVxV2FsbEJhc2UiLCJkV2F5IiwiZXFQIiwiaW50ZXJVcCIsImludGVyRHciLCJhbmdsZVByZXZpb3VzV2FsbCIsInByZXZpb3VzV2FsbFRoaWNrWCIsInByZXZpb3VzV2FsbFRoaWNrWSIsImVxUHJldmlvdXNXYWxsVXAiLCJlcVByZXZpb3VzV2FsbER3IiwibWl0ZXIiLCJhbmdsZU5leHRXYWxsIiwibmV4dFdhbGxUaGlja1giLCJuZXh0V2FsbFRoaWNrWSIsImVxTmV4dFdhbGxVcCIsImVxTmV4dFdhbGxEdyIsIm1ha2VXYWxsIiwid2FsbFNjcmVlbiIsImludmlzaWJsZVdhbGwiLCJ3YWxsVG9JbnZpc2JsZSIsInZpc2libGVXYWxsIiwic3BsaXRXYWxsIiwid2FsbFRvU3BsaXQiLCJlcVdhbGwiLCJ3YWxsVG9TcGxpdExlbmd0aCIsIm5ld1dhbGxzIiwiaW5pdENvb3JkcyIsImluaXRUaGljayIsInNjYW5TdGFydCIsInNjYW5FbmQiLCJ3YWxsRGlzdGFuY2UiLCJ3YWxsU2VsZWN0ZWQiLCJyZXN1bHQiLCJlcTEiLCJyZXN1bHQxIiwiZXEyIiwicmVzdWx0MiIsIm5lYXJWZXJ0aWNlIiwibnVtYmVyIiwib2JqTGlzdCIsInNlYXJjaCIsImVtcHR5QXJyYXkiLCJfZmFtaWx5IiwiX2NsYXNzT2JqIiwiX3R5cGUiLCJfcG9zIiwiX2FuZ2xlIiwiX2FuZ2xlU2lnbiIsIl9zaXplIiwiX2hpbmdlIiwiX3RoaWNrIiwiX3ZhbHVlIiwic2NhbGUiLCJibGFuayIsInR0IiwicGF0aCIsInN0cm9rZURhc2hBcnJheSIsInVwZGF0ZUZhY3RvcnkiLCJoaW5nZVN0YXR1cyIsImhpbmdlVXBkYXRlIiwibmV3UmVhbEJib3giLCJhbmdsZVJhZGlhbiIsImdsb2JhbEFyZWEiLCJvbGRWZXJ0ZXhOdW1iZXIiLCJmb3VuZFJvb20iLCJyb29tSWQiLCJkaWZmQ29vcmRzIiwidG9TcGxpY2UiLCJjb3VudFJvb20iLCJjZW50cm9pZCIsInJvb21Hcm91cCIsInNpeiIsImJlc3RWZXJ0aWNlIiwiZGlzdGFuY2UxIiwiZGlzdGFuY2UyIiwicHgiLCJweSIsImxhYmVsV2lkdGgiLCJsYWJlbEhlaWdodCIsInNpZGVSaWdodCIsIkRvbVJlYWR5IiwiZm4iLCJvblJlYWR5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbGwiLCJvblJlYWR5SWUiLCJyZWFkeVN0YXRlIiwiZGV0YWNoRXZlbnQiLCJhdHRhY2hFdmVudCIsImluc3QiLCJGbG9vcnBsYW4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFDSkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUNBQVUsQ0FBQztBQUV2QixNQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNsQixNQUFNQyxRQUFRLEdBQUcsR0FBRztBQUVwQixTQUFTQyxXQUFXLEdBQUc7RUFDckI7RUFDQSxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0VBQ2YsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtFQUNqQixJQUFJLENBQUNDLElBQUksR0FBRyxFQUFFO0VBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtFQUNqQixJQUFJLENBQUNDLFFBQVEsR0FBRyxFQUFFO0VBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLENBQUM7RUFDdEIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDdkMsSUFBSSxDQUFDQyxXQUFX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Q2pCdHFCLE1BQU0sQ0FBQ3NxQixXQUFXLENBQUMsb0JBQW9CLEVBQUVILFNBQVMsRUFBRSxLQUFLLENBQUU7QUFDakU7QUFFQSxNQUFNSSxJQUFJLEdBQUcsSUFBSWp3QixXQUFXLEVBQUU7QUFDOUJ3dkIsUUFBUSxDQUFDLFlBQVk7RUFDbkJTLElBQUksQ0FBQzdzQixVQUFVLEVBQUU7QUFDbkIsQ0FBQyxDQUFDO0FBRUZzQyxNQUFNLENBQUN3cUIsU0FBUyxHQUFHRCxJQUFJIiwiZmlsZSI6Ii4vc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICBleHBvcnRGbG9vcnBsYW5cbn0gPSByZXF1aXJlKCcuL3Njb3BlZCcpXG5cbmNvbnN0IE1JTl9aT09NID0gMFxuY29uc3QgTUFYX1pPT00gPSAxMDBcblxuZnVuY3Rpb24gQXBwbGljYXRpb24oKSB7XG4gIC8vIFJFVklFVzogV2hpY2ggb2YgdGhlc2UgYXJlIGFjdHVhbGx5IHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uP1xuICB0aGlzLldBTExTID0gW11cbiAgdGhpcy5PQkpEQVRBID0gW11cbiAgdGhpcy5ST09NID0gW11cbiAgdGhpcy5ISVNUT1JZID0gW11cbiAgdGhpcy53YWxsU2l6ZSA9IDIwXG4gIHRoaXMucGFydGl0aW9uU2l6ZSA9IDhcbiAgdGhpcy52aXNpYmxlTGF5ZXJzID0gbmV3IFNldChbJ3dhbGxzJ10pXG4gIHRoaXMuYWN0aXZlTGF5ZXIgPSAnd2FsbHMnXG4gIHRoaXMuZHJhZyA9ICdvZmYnXG4gIHRoaXMuYWN0aW9uID0gMFxuICB0aGlzLm1hZ25ldGljID0gMFxuICB0aGlzLmNvbnN0cnVjID0gMFxuICB0aGlzLlJjaXJjbGViaW5kZXIgPSA4XG4gIHRoaXMubW9kZSA9ICdzZWxlY3RfbW9kZSdcbiAgdGhpcy5tb2RlT3B0aW9uXG4gIHRoaXMubGluRWxlbWVudCA9ICQoJyNsaW4nKVxuICB0aGlzLnRhaWxsZV93ID0gdGhpcy5saW5FbGVtZW50LndpZHRoKClcbiAgdGhpcy50YWlsbGVfaCA9IHRoaXMubGluRWxlbWVudC5oZWlnaHQoKVxuICB0aGlzLm9mZnNldCA9IHRoaXMubGluRWxlbWVudC5vZmZzZXQoKVxuICB0aGlzLmdyaWQgPSAyMFxuICAvLyBzaG93UmliID0gdHJ1ZVxuICB0aGlzLnNob3dBcmVhID0gdHJ1ZVxuICB0aGlzLm1ldGVyID0gNjBcbiAgdGhpcy5ncmlkX3NuYXAgPSAnb2ZmJ1xuICB0aGlzLmNvbG9yYmFja2dyb3VuZCA9ICcjZmZmZmZmJ1xuICB0aGlzLmNvbG9ybGluZSA9ICcjZmZmJ1xuICB0aGlzLmNvbG9ycm9vbSA9ICcjZjBkYWFmJ1xuICB0aGlzLmNvbG9yV2FsbCA9ICcjNjY2J1xuICB0aGlzLnBveCA9IDBcbiAgdGhpcy5wb3kgPSAwXG4gIHRoaXMuc2VnbWVudCA9IDBcbiAgdGhpcy54cGF0aCA9IDBcbiAgdGhpcy55cGF0aCA9IDBcbiAgdGhpcy50YWN0aWxlID0gZmFsc2VcbiAgdGhpcy53aWR0aF92aWV3Ym94ID0gdGhpcy50YWlsbGVfd1xuICB0aGlzLmhlaWdodF92aWV3Ym94ID0gdGhpcy50YWlsbGVfaFxuICB0aGlzLnJhdGlvX3ZpZXdib3ggPSB0aGlzLmhlaWdodF92aWV3Ym94IC8gdGhpcy53aWR0aF92aWV3Ym94XG4gIHRoaXMub3JpZ2luWF92aWV3Ym94ID0gMFxuICB0aGlzLm9yaWdpbllfdmlld2JveCA9IDBcbiAgdGhpcy5zaXplVGV4dCA9IFtdXG4gIHRoaXMuc2hvd0FsbFNpemVTdGF0dXMgPSAwXG4gIHRoaXMuZWRpdG9yID0gdGhpcy5lZGl0b3JGYWN0b3J5KClcbiAgdGhpcy5xU1ZHID0gdGhpcy5xU1ZHRmFjdG9yeSgpXG5cbiAgLy8gVXNlZCB0byB0cmFjayBUaGlzIGlzIHRoZSBpbml0aWFsIHpvb20gbGV2ZWxcbiAgdGhpcy56b29tID0gNTBcbiAgLy8gVGhlIHJhdGlvIHRoZSBzY3JlZW4gaXMgc2NhbGVkXG4gIHRoaXMuc2NhbGVGYWN0b3IgPSAxXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCB0ZXh0RWRpdG9yQ29sb3JCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dEVkaXRvckNvbG9yJylcbiAgY29uc3Qgcm9vbUNvbG9yQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJvb21Db2xvcicpXG4gIGNvbnN0IG9ialRyYXNoQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm9ialRyYXNoJylcbiAgY29uc3QgZHJvcGRvd25NZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRyb3Bkb3duLW1lbnUgbGkgYScpXG5cbiAgZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudEJ5SWQoJ2xpbicpXG4gICAgLnNldEF0dHJpYnV0ZShcbiAgICAgICd2aWV3Qm94JyxcbiAgICAgIGAke3RoaXMub3JpZ2luWF92aWV3Ym94fSAke3RoaXMub3JpZ2luWV92aWV3Ym94fSAke3RoaXMud2lkdGhfdmlld2JveH0gJHt0aGlzLmhlaWdodF92aWV3Ym94fWAsXG4gICAgKVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYm94VHJhc2gnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICB0aGlzLmJpbmRlci5vYmouZ3JhcGgucmVtb3ZlKClcbiAgICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAgIHRoaXMuT0JKREFUQS5zcGxpY2UodGhpcy5PQkpEQVRBLmluZGV4T2YodGhpcy5iaW5kZXIub2JqKSwgMSlcbiAgICAkKCcjb2JqQm91bmRpbmdCb3gnKS5oaWRlKDEwMClcbiAgICAkKCcjcGFuZWwnKS5zaG93KDIwMClcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdEZWxldGVkIG9iamVjdCcpXG4gICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLnJpYigpXG4gIH0pXG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbicpLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5kZWx0YVkgPiAwKSB7XG4gICAgICB0aGlzLnpvb21fbWFrZXIoJ3pvb21vdXQnLCAyMClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy56b29tX21ha2VyKCd6b29taW4nLCAyMClcbiAgICB9XG4gIH0pXG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dhbGxUcmFzaCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHdhbGwgPSB0aGlzLmJpbmRlci53YWxsXG4gICAgZm9yIChjb25zdCBrIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXS5jaGlsZCwgd2FsbCkpIHtcbiAgICAgICAgdGhpcy5XQUxMU1trXS5jaGlsZCA9IG51bGxcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXS5wYXJlbnQsIHdhbGwpKSB7XG4gICAgICAgIHRoaXMuV0FMTFNba10ucGFyZW50ID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLldBTExTLnNwbGljZSh0aGlzLldBTExTLmluZGV4T2Yod2FsbCksIDEpXG4gICAgJCgnI3dhbGxUb29scycpLmhpZGUoMTAwKVxuICAgIHdhbGwuZ3JhcGgucmVtb3ZlKClcbiAgICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAgIHRoaXMuZWRpdG9yLmFyY2hpdGVjdCh0aGlzLldBTExTKVxuICAgIHRoaXMucmliKClcbiAgICB0aGlzLm1vZGUgPSAnc2VsZWN0X21vZGUnXG4gICAgJCgnI3BhbmVsJykuc2hvdygyMDApXG4gIH0pXG5cbiAgJCgnI3Jvb21fbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICB0aGlzLmxpbkVsZW1lbnQuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdDb25maWcuIG9mIHJvb21zJylcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdyb29tX21vZGUnKVxuICB9KVxuXG4gICQoJyNzZWxlY3RfbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ01vZGUgXCJzZWxlY3RcIicpXG4gICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgdGhpcy5mb25jX2J1dHRvbignc2VsZWN0X21vZGUnKVxuICB9KVxuXG4gICQoJyNsaW5lX21vZGUnKS5jbGljaygoKSA9PiB7XG4gICAgdGhpcy5saW5FbGVtZW50LmNzcygnY3Vyc29yJywgJ2Nyb3NzaGFpcicpXG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdDcmVhdGlvbiBvZiB3YWxsKHMpJylcbiAgICB0aGlzLm11bHRpID0gMFxuICAgIHRoaXMuYWN0aW9uID0gMFxuICAgIC8vIHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcCk7XG4gICAgLy9cbiAgICAvLyB0aGlzLnBveCA9IHNuYXAueDtcbiAgICAvLyB0aGlzLnBveSA9IHNuYXAueTtcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdsaW5lX21vZGUnKVxuICB9KVxuXG4gICQoJyNwYXJ0aXRpb25fbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICB0aGlzLmxpbkVsZW1lbnQuY3NzKCdjdXJzb3InLCAnY3Jvc3NoYWlyJylcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ0NyZWF0aW9uIG9mIHRoaW4gd2FsbChzKScpXG4gICAgdGhpcy5tdWx0aSA9IDBcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdwYXJ0aXRpb25fbW9kZScpXG4gIH0pXG5cbiAgJCgnI3JlY3RfbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICB0aGlzLmxpbkVsZW1lbnQuY3NzKCdjdXJzb3InLCAnY3Jvc3NoYWlyJylcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ1Jvb20ocykgY3JlYXRpb24nKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ3JlY3RfbW9kZScpXG4gIH0pXG5cbiAgJCgnLmRvb3InKS5jbGljaygoZSkgPT4ge1xuICAgIHRoaXMubGluRWxlbWVudC5jc3MoJ2N1cnNvcicsICdjcm9zc2hhaXInKVxuICAgICQoJyNib3hpbmZvJykuaHRtbCgnQWRkIGEgZG9vcicpXG4gICAgJCgnI2Rvb3JfbGlzdCcpLmhpZGUoMjAwKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ2Rvb3JfbW9kZScsIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJykpXG4gIH0pXG5cbiAgJCgnLmVsZWN0cmljYWwnKS5jbGljaygoZSkgPT4ge1xuICAgIHRoaXMubGluRWxlbWVudC5jc3MoJ2N1cnNvcicsICdjcm9zc2hhaXInKVxuICAgICQoJyNib3hpbmZvJykuaHRtbCgnQWRkIGVsZWN0cmljYWwnKVxuICAgICQoJyNlbGVjdHJpY2FsX2xpc3QnKS5oaWRlKDIwMClcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdlbGVjdHJpY2FsX21vZGUnLCBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpKVxuICB9KVxuXG4gICQoJy5uZXR3b3JrJykuY2xpY2soKGUpID0+IHtcbiAgICB0aGlzLmxpbkVsZW1lbnQuY3NzKCdjdXJzb3InLCAnY3Jvc3NoYWlyJylcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ0FkZCBuZXR3b3JrJylcbiAgICAkKCcjbmV0d29ya19saXN0JykuaGlkZSgyMDApXG4gICAgdGhpcy5mb25jX2J1dHRvbignbmV0d29ya19tb2RlJywgZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKSlcbiAgfSlcblxuICAkKCcud2luZG93JykuY2xpY2soKGUpID0+IHtcbiAgICB0aGlzLmxpbkVsZW1lbnQuY3NzKCdjdXJzb3InLCAnY3Jvc3NoYWlyJylcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ0FkZCBhIHdpbmRvdycpXG4gICAgJCgnI2Rvb3JfbGlzdCcpLmhpZGUoMjAwKVxuICAgICQoJyN3aW5kb3dfbGlzdCcpLmhpZGUoMjAwKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ2Rvb3JfbW9kZScsIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2lkJykpXG4gIH0pXG5cbiAgJCgnI25vZGVfbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoXG4gICAgICAnQ3V0IGEgd2FsbDxici8+PHNwYW4gc3R5bGU9XCJmb250LXNpemU6MC43ZW1cIj5XYXJuaW5nIDogQ3V0dGluZyB0aGUgd2FsbCBvZiBhIHJvb20gY2FuIGNhbmNlbCBpdHMgJyArXG4gICAgICAgICdjb25maWd1cmF0aW9uPC9zcGFuPicsXG4gICAgKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ25vZGVfbW9kZScpXG4gIH0pXG5cbiAgJCgnI3RleHRfbW9kZScpLmNsaWNrKCgpID0+IHtcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoXG4gICAgICAnQWRkIHRleHQ8YnIvPjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjAuN2VtXCI+UGxhY2UgdGhlIGN1cnNvciB0byB0aGUgZGVzaXJlZCBsb2NhdGlvbiwgdGhlbiAnICtcbiAgICAgICAgJ3R5cGUgeW91ciB0ZXh0Ljwvc3Bhbj4nLFxuICAgIClcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCd0ZXh0X21vZGUnKVxuICB9KVxuXG4gIC8vIFdpbmRvdyBFdmVudCBMaXN0ZW5lcnNcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIChldmVudCkgPT4ge1xuICAgIHRoaXMud2lkdGhfdmlld2JveCA9ICQoJyNsaW4nKS53aWR0aCgpXG4gICAgdGhpcy5oZWlnaHRfdmlld2JveCA9ICQoJyNsaW4nKS5oZWlnaHQoKVxuICAgIGRvY3VtZW50XG4gICAgICAuZ2V0RWxlbWVudEJ5SWQoJ2xpbicpXG4gICAgICAuc2V0QXR0cmlidXRlKFxuICAgICAgICAndmlld0JveCcsXG4gICAgICAgIGAke3RoaXMub3JpZ2luWF92aWV3Ym94fSAke3RoaXMub3JpZ2luWV92aWV3Ym94fSAke3RoaXMud2lkdGhfdmlld2JveH0gJHt0aGlzLmhlaWdodF92aWV3Ym94fWAsXG4gICAgICApXG4gIH0pXG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdoaXN0b3J5JykpIHtcbiAgICAgIGNvbnN0IGhpc3RvcnlUZW1wID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaGlzdG9yeScpKVxuICAgICAgdGhpcy5sb2FkKGhpc3RvcnlUZW1wLmxlbmd0aCAtIDEsICdib290JylcbiAgICAgIHRoaXMuc2F2ZSgnYm9vdCcpXG4gICAgfVxuICB9KVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICBpZiAodGhpcy5tb2RlID09PSAndGV4dF9tb2RlJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIDM3OiAvLyBsZWZ0IGFycm93XG4gICAgICAgIHRoaXMuem9vbV9tYWtlcignem9vbWxlZnQnLCAxMDAsIDMwKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAzODogLy8gdXAgYXJyb3dcbiAgICAgICAgdGhpcy56b29tX21ha2VyKCd6b29tdG9wJywgMTAwLCAzMClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0IGFycm93XG4gICAgICAgIHRoaXMuem9vbV9tYWtlcignem9vbXJpZ2h0JywgMTAwLCAzMClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDA6IC8vIGRvd24gYXJyb3dcbiAgICAgICAgdGhpcy56b29tX21ha2VyKCd6b29tYm90dG9tJywgMTAwLCAzMClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMTA3OiAvLyArXG4gICAgICAgIHRoaXMuem9vbV9tYWtlcignem9vbWluJywgMjAsIDUwKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAxMDk6IC8vIC1cbiAgICAgICAgdGhpcy56b29tX21ha2VyKCd6b29tb3V0JywgMjAsIDUwKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfSlcblxuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yKCcjbGluJylcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tb3VzZURvd25IYW5kbGVyLmJpbmQodGhpcyksIHRydWUpXG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoJyNsaW4nKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZUhhbmRsZXIuYmluZCh0aGlzKSwgdHJ1ZSlcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvcignI2xpbicpXG4gICAgLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm1vdXNlVXBIYW5kbGVyLmJpbmQodGhpcykpXG5cbiAgLy8gUkVWSUVXOiBXaGF0IGRvZXMgdGhpcyBkbz9cbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvcignI3BhbmVsJylcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgICh0aGlzLm1vZGUgPT0gJ2xpbmVfbW9kZScgfHwgdGhpcy5tb2RlID09ICdwYXJ0aXRpb25fbW9kZScpICYmXG4gICAgICAgIHRoaXMuYWN0aW9uID09IDFcbiAgICAgICkge1xuICAgICAgICB0aGlzLmFjdGlvbiA9IDBcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMuYmluZGVyLnJlbW92ZSgpXG4gICAgICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICAkKCcjbGluZXRlbXAnKS5yZW1vdmUoKVxuICAgICAgICAkKCcjbGluZV9jb25zdHJ1YycpLnJlbW92ZSgpXG4gICAgICAgIHRoaXMubGVuZ3RoVGVtcC5yZW1vdmUoKVxuICAgICAgICB0aGlzLmxlbmd0aFRlbXAgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9KVxuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgdGV4dEVkaXRvckNvbG9yQnRuLmxlbmd0aDsgaysrKSB7XG4gICAgdGV4dEVkaXRvckNvbG9yQnRuW2tdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xhYmVsQm94Jykuc3R5bGUuY29sb3IgPSB0aGlzLnN0eWxlLmNvbG9yXG4gICAgfSlcbiAgfVxuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgcm9vbUNvbG9yQnRuLmxlbmd0aDsgaysrKSB7XG4gICAgcm9vbUNvbG9yQnRuW2tdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKVxuICAgICAgJCgnI3Jvb21CYWNrZ3JvdW5kJykudmFsKGRhdGEpXG4gICAgICB0aGlzLmJpbmRlci5hdHRyKHsgZmlsbDogJ3VybCgjJyArIGRhdGEgKyAnKScgfSlcbiAgICB9KVxuICB9XG5cbiAgZm9yIChsZXQgayA9IDA7IGsgPCBvYmpUcmFzaEJ0bi5sZW5ndGg7IGsrKykge1xuICAgIG9ialRyYXNoQnRuW2tdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgJCgnI29ialRvb2xzJykuaGlkZSgnMTAwJylcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuYmluZGVyLm9ialxuICAgICAgb2JqLmdyYXBoLnJlbW92ZSgpXG4gICAgICB0aGlzLk9CSkRBVEEuc3BsaWNlKHRoaXMuT0JKREFUQS5pbmRleE9mKG9iaiksIDEpXG4gICAgICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gICAgICAkKCcjYm94aW5mbycpLmh0bWwoJ1NlbGVjdGlvbiBtb2RlJylcbiAgICAgICQoJyNwYW5lbCcpLnNob3coJzIwMCcpXG4gICAgICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICAgIHJpYigpXG4gICAgICAkKCcjcGFuZWwnKS5zaG93KCczMDAnKVxuICAgIH0pXG4gIH1cblxuICBmb3IgKGxldCBrID0gMDsgayA8IGRyb3Bkb3duTWVudS5sZW5ndGg7IGsrKykge1xuICAgIGRyb3Bkb3duTWVudVtrXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlbFRleHQgPSB0aGlzLnRleHRDb250ZW50XG4gICAgICAkKHRoaXMpXG4gICAgICAgIC5wYXJlbnRzKCcuYnRuLWdyb3VwJylcbiAgICAgICAgLmZpbmQoJy5kcm9wZG93bi10b2dnbGUnKVxuICAgICAgICAuaHRtbChzZWxUZXh0ICsgJyA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPicpXG4gICAgICBpZiAoc2VsVGV4dCAhPSAnTm9uZScpIHtcbiAgICAgICAgJCgnI3Jvb21OYW1lJykudmFsKHNlbFRleHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKCcjcm9vbU5hbWUnKS52YWwoJycpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuaW5pdEhpc3RvcnkgPSBmdW5jdGlvbiAoYm9vdCA9IGZhbHNlKSB7XG4gIHRoaXMuSElTVE9SWS5pbmRleCA9IDBcbiAgaWYgKCFib290ICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdoaXN0b3J5JykpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaGlzdG9yeScpXG4gIH1cblxuICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hpc3RvcnknKSAmJiB0aGlzLmJvb3QgPT09ICdyZWNvdmVyeScpIHtcbiAgICBjb25zdCBoaXN0b3J5VGVtcCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hpc3RvcnknKSlcbiAgICB0aGlzLmxvYWQoaGlzdG9yeVRlbXAubGVuZ3RoIC0gMSwgJ2Jvb3QnKVxuICAgIHRoaXMuc2F2ZSgnYm9vdCcpXG4gIH1cblxuICBpZiAoYm9vdCA9PT0gJ25ld1NxdWFyZScpIHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hpc3RvcnknKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2hpc3RvcnknKVxuICAgIH1cbiAgICB0aGlzLkhJU1RPUlkucHVzaCh7XG4gICAgICBvYmpEYXRhOiBbXSxcbiAgICAgIHdhbGxEYXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aGljazogMjAsXG4gICAgICAgICAgc3RhcnQ6IHsgeDogNTQwLCB5OiAxOTQgfSxcbiAgICAgICAgICBlbmQ6IHsgeDogNTQwLCB5OiA3MzQgfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDMsXG4gICAgICAgICAgY2hpbGQ6IDEsXG4gICAgICAgICAgYW5nbGU6IDEuNTcwNzk2MzI2Nzk0ODk2NixcbiAgICAgICAgICBlcXVhdGlvbnM6IHtcbiAgICAgICAgICAgIHVwOiB7IEE6ICd2JywgQjogNTUwIH0sXG4gICAgICAgICAgICBkb3duOiB7IEE6ICd2JywgQjogNTMwIH0sXG4gICAgICAgICAgICBiYXNlOiB7IEE6ICd2JywgQjogNTQwIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb29yZHM6IFtcbiAgICAgICAgICAgIHsgeDogNTUwLCB5OiAyMDQgfSxcbiAgICAgICAgICAgIHsgeDogNTMwLCB5OiAxODQgfSxcbiAgICAgICAgICAgIHsgeDogNTMwLCB5OiA3NDQgfSxcbiAgICAgICAgICAgIHsgeDogNTUwLCB5OiA3MjQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGdyYXBoOiB7IDA6IHt9LCBjb250ZXh0OiB7fSwgbGVuZ3RoOiAxIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aGljazogMjAsXG4gICAgICAgICAgc3RhcnQ6IHsgeDogNTQwLCB5OiA3MzQgfSxcbiAgICAgICAgICBlbmQ6IHsgeDogMTA4MCwgeTogNzM0IH0sXG4gICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgcGFyZW50OiAwLFxuICAgICAgICAgIGNoaWxkOiAyLFxuICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgIGVxdWF0aW9uczoge1xuICAgICAgICAgICAgdXA6IHsgQTogJ2gnLCBCOiA3MjQgfSxcbiAgICAgICAgICAgIGRvd246IHsgQTogJ2gnLCBCOiA3NDQgfSxcbiAgICAgICAgICAgIGJhc2U6IHsgQTogJ2gnLCBCOiA3MzQgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvb3JkczogW1xuICAgICAgICAgICAgeyB4OiA1NTAsIHk6IDcyNCB9LFxuICAgICAgICAgICAgeyB4OiA1MzAsIHk6IDc0NCB9LFxuICAgICAgICAgICAgeyB4OiAxMDkwLCB5OiA3NDQgfSxcbiAgICAgICAgICAgIHsgeDogMTA3MCwgeTogNzI0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBncmFwaDogeyAwOiB7fSwgY29udGV4dDoge30sIGxlbmd0aDogMSB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGhpY2s6IDIwLFxuICAgICAgICAgIHN0YXJ0OiB7IHg6IDEwODAsIHk6IDczNCB9LFxuICAgICAgICAgIGVuZDogeyB4OiAxMDgwLCB5OiAxOTQgfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDEsXG4gICAgICAgICAgY2hpbGQ6IDMsXG4gICAgICAgICAgYW5nbGU6IC0xLjU3MDc5NjMyNjc5NDg5NjYsXG4gICAgICAgICAgZXF1YXRpb25zOiB7XG4gICAgICAgICAgICB1cDogeyBBOiAndicsIEI6IDEwNzAgfSxcbiAgICAgICAgICAgIGRvd246IHsgQTogJ3YnLCBCOiAxMDkwIH0sXG4gICAgICAgICAgICBiYXNlOiB7IEE6ICd2JywgQjogMTA4MCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29vcmRzOiBbXG4gICAgICAgICAgICB7IHg6IDEwNzAsIHk6IDcyNCB9LFxuICAgICAgICAgICAgeyB4OiAxMDkwLCB5OiA3NDQgfSxcbiAgICAgICAgICAgIHsgeDogMTA5MCwgeTogMTg0IH0sXG4gICAgICAgICAgICB7IHg6IDEwNzAsIHk6IDIwNCB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZ3JhcGg6IHsgMDoge30sIGNvbnRleHQ6IHt9LCBsZW5ndGg6IDEgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRoaWNrOiAyMCxcbiAgICAgICAgICBzdGFydDogeyB4OiAxMDgwLCB5OiAxOTQgfSxcbiAgICAgICAgICBlbmQ6IHsgeDogNTQwLCB5OiAxOTQgfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDIsXG4gICAgICAgICAgY2hpbGQ6IDAsXG4gICAgICAgICAgYW5nbGU6IDMuMTQxNTkyNjUzNTg5NzkzLFxuICAgICAgICAgIGVxdWF0aW9uczoge1xuICAgICAgICAgICAgdXA6IHsgQTogJ2gnLCBCOiAyMDQgfSxcbiAgICAgICAgICAgIGRvd246IHsgQTogJ2gnLCBCOiAxODQgfSxcbiAgICAgICAgICAgIGJhc2U6IHsgQTogJ2gnLCBCOiAxOTQgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvb3JkczogW1xuICAgICAgICAgICAgeyB4OiAxMDcwLCB5OiAyMDQgfSxcbiAgICAgICAgICAgIHsgeDogMTA5MCwgeTogMTg0IH0sXG4gICAgICAgICAgICB7IHg6IDUzMCwgeTogMTg0IH0sXG4gICAgICAgICAgICB7IHg6IDU1MCwgeTogMjA0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBncmFwaDogeyAwOiB7fSwgY29udGV4dDoge30sIGxlbmd0aDogMSB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHJvb21EYXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb29yZHM6IFtcbiAgICAgICAgICAgIHsgeDogNTQwLCB5OiA3MzQgfSxcbiAgICAgICAgICAgIHsgeDogMTA4MCwgeTogNzM0IH0sXG4gICAgICAgICAgICB7IHg6IDEwODAsIHk6IDE5NCB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB4OiA1NDAsXG4gICAgICAgICAgICAgIHk6IDE5NCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IHg6IDU0MCwgeTogNzM0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb29yZHNPdXRzaWRlOiBbXG4gICAgICAgICAgICB7IHg6IDEwOTAsIHk6IDc0NCB9LFxuICAgICAgICAgICAgeyB4OiAxMDkwLCB5OiAxODQgfSxcbiAgICAgICAgICAgIHsgeDogNTMwLCB5OiAxODQgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgeDogNTMwLFxuICAgICAgICAgICAgICB5OiA3NDQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyB4OiAxMDkwLCB5OiA3NDQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvb3Jkc0luc2lkZTogW1xuICAgICAgICAgICAgeyB4OiAxMDcwLCB5OiA3MjQgfSxcbiAgICAgICAgICAgIHsgeDogMTA3MCwgeTogMjA0IH0sXG4gICAgICAgICAgICB7IHg6IDU1MCwgeTogMjA0IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IDU1MCxcbiAgICAgICAgICAgICAgeTogNzI0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgeDogMTA3MCwgeTogNzI0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBpbnNpZGU6IFtdLFxuICAgICAgICAgIHdheTogWycwJywgJzInLCAnMycsICcxJywgJzAnXSxcbiAgICAgICAgICBhcmVhOiAyNzA0MDAsXG4gICAgICAgICAgc3VyZmFjZTogJycsXG4gICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgY29sb3I6ICdncmFkaWVudFdoaXRlJyxcbiAgICAgICAgICBzaG93U3VyZmFjZTogdHJ1ZSxcbiAgICAgICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuICAgIHRoaXMuSElTVE9SWVswXSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuSElTVE9SWVswXSlcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGlzdG9yeScsIEpTT04uc3RyaW5naWZ5KHRoaXMuSElTVE9SWSkpXG4gICAgdGhpcy5sb2FkKDApXG4gICAgdGhpcy5zYXZlKClcbiAgfVxuXG4gIGlmIChib290ID09PSAnbmV3TCcpIHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hpc3RvcnknKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2hpc3RvcnknKVxuICAgIH1cbiAgICB0aGlzLkhJU1RPUlkucHVzaCh7XG4gICAgICBvYmpEYXRhOiBbXSxcbiAgICAgIHdhbGxEYXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aGljazogMjAsXG4gICAgICAgICAgc3RhcnQ6IHsgeDogNDQ3LCB5OiA0NTggfSxcbiAgICAgICAgICBlbmQ6IHsgeDogNDQ3LCB5OiA3NDQgfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDUsXG4gICAgICAgICAgY2hpbGQ6IDEsXG4gICAgICAgICAgYW5nbGU6IDEuNTcwNzk2MzI2Nzk0ODk2NixcbiAgICAgICAgICBlcXVhdGlvbnM6IHtcbiAgICAgICAgICAgIHVwOiB7IEE6ICd2JywgQjogNDU3IH0sXG4gICAgICAgICAgICBkb3duOiB7IEE6ICd2JywgQjogNDM3IH0sXG4gICAgICAgICAgICBiYXNlOiB7IEE6ICd2JywgQjogNDQ3IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb29yZHM6IFtcbiAgICAgICAgICAgIHsgeDogNDU3LCB5OiA0NjggfSxcbiAgICAgICAgICAgIHsgeDogNDM3LCB5OiA0NDggfSxcbiAgICAgICAgICAgIHsgeDogNDM3LCB5OiA3NTQgfSxcbiAgICAgICAgICAgIHsgeDogNDU3LCB5OiA3MzQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGdyYXBoOiB7IDA6IHt9LCBjb250ZXh0OiB7fSwgbGVuZ3RoOiAxIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aGljazogMjAsXG4gICAgICAgICAgc3RhcnQ6IHsgeDogNDQ3LCB5OiA3NDQgfSxcbiAgICAgICAgICBlbmQ6IHsgeDogMTM0NywgeTogNzQ0IH0sXG4gICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgcGFyZW50OiAwLFxuICAgICAgICAgIGNoaWxkOiAyLFxuICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgIGVxdWF0aW9uczoge1xuICAgICAgICAgICAgdXA6IHsgQTogJ2gnLCBCOiA3MzQgfSxcbiAgICAgICAgICAgIGRvd246IHsgQTogJ2gnLCBCOiA3NTQgfSxcbiAgICAgICAgICAgIGJhc2U6IHsgQTogJ2gnLCBCOiA3NDQgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvb3JkczogW1xuICAgICAgICAgICAgeyB4OiA0NTcsIHk6IDczNCB9LFxuICAgICAgICAgICAgeyB4OiA0MzcsIHk6IDc1NCB9LFxuICAgICAgICAgICAgeyB4OiAxMzU3LCB5OiA3NTQgfSxcbiAgICAgICAgICAgIHsgeDogMTMzNywgeTogNzM0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBncmFwaDogeyAwOiB7fSwgY29udGV4dDoge30sIGxlbmd0aDogMSB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGhpY2s6IDIwLFxuICAgICAgICAgIHN0YXJ0OiB7IHg6IDEzNDcsIHk6IDc0NCB9LFxuICAgICAgICAgIGVuZDogeyB4OiAxMzQ3LCB5OiAxNDQgfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDEsXG4gICAgICAgICAgY2hpbGQ6IDMsXG4gICAgICAgICAgYW5nbGU6IC0xLjU3MDc5NjMyNjc5NDg5NjYsXG4gICAgICAgICAgZXF1YXRpb25zOiB7XG4gICAgICAgICAgICB1cDogeyBBOiAndicsIEI6IDEzMzcgfSxcbiAgICAgICAgICAgIGRvd246IHsgQTogJ3YnLCBCOiAxMzU3IH0sXG4gICAgICAgICAgICBiYXNlOiB7IEE6ICd2JywgQjogMTM0NyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29vcmRzOiBbXG4gICAgICAgICAgICB7IHg6IDEzMzcsIHk6IDczNCB9LFxuICAgICAgICAgICAgeyB4OiAxMzU3LCB5OiA3NTQgfSxcbiAgICAgICAgICAgIHsgeDogMTM1NywgeTogMTM0IH0sXG4gICAgICAgICAgICB7IHg6IDEzMzcsIHk6IDE1NCB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZ3JhcGg6IHsgMDoge30sIGNvbnRleHQ6IHt9LCBsZW5ndGg6IDEgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRoaWNrOiAyMCxcbiAgICAgICAgICBzdGFydDogeyB4OiAxMzQ3LCB5OiAxNDQgfSxcbiAgICAgICAgICBlbmQ6IHsgeDogMTAyMCwgeTogMTQ0IH0sXG4gICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgcGFyZW50OiAyLFxuICAgICAgICAgIGNoaWxkOiA0LFxuICAgICAgICAgIGFuZ2xlOiAzLjE0MTU5MjY1MzU4OTc5MyxcbiAgICAgICAgICBlcXVhdGlvbnM6IHtcbiAgICAgICAgICAgIHVwOiB7IEE6ICdoJywgQjogMTU0IH0sXG4gICAgICAgICAgICBkb3duOiB7IEE6ICdoJywgQjogMTM0IH0sXG4gICAgICAgICAgICBiYXNlOiB7IEE6ICdoJywgQjogMTQ0IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb29yZHM6IFtcbiAgICAgICAgICAgIHsgeDogMTMzNywgeTogMTU0IH0sXG4gICAgICAgICAgICB7IHg6IDEzNTcsIHk6IDEzNCB9LFxuICAgICAgICAgICAgeyB4OiAxMDEwLCB5OiAxMzQgfSxcbiAgICAgICAgICAgIHsgeDogMTAzMCwgeTogMTU0IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBncmFwaDogeyAwOiB7fSwgY29udGV4dDoge30sIGxlbmd0aDogMSB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGhpY2s6IDIwLFxuICAgICAgICAgIHN0YXJ0OiB7IHg6IDEwMjAsIHk6IDE0NCB9LFxuICAgICAgICAgIGVuZDogeyB4OiAxMDIwLCB5OiA0NTggfSxcbiAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICBwYXJlbnQ6IDMsXG4gICAgICAgICAgY2hpbGQ6IDUsXG4gICAgICAgICAgYW5nbGU6IDEuNTcwNzk2MzI2Nzk0ODk2NixcbiAgICAgICAgICBlcXVhdGlvbnM6IHtcbiAgICAgICAgICAgIHVwOiB7IEE6ICd2JywgQjogMTAzMCB9LFxuICAgICAgICAgICAgZG93bjogeyBBOiAndicsIEI6IDEwMTAgfSxcbiAgICAgICAgICAgIGJhc2U6IHsgQTogJ3YnLCBCOiAxMDIwIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb29yZHM6IFtcbiAgICAgICAgICAgIHsgeDogMTAzMCwgeTogMTU0IH0sXG4gICAgICAgICAgICB7IHg6IDEwMTAsIHk6IDEzNCB9LFxuICAgICAgICAgICAgeyB4OiAxMDEwLCB5OiA0NDggfSxcbiAgICAgICAgICAgIHsgeDogMTAzMCwgeTogNDY4IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBncmFwaDogeyAwOiB7fSwgY29udGV4dDoge30sIGxlbmd0aDogMSB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGhpY2s6IDIwLFxuICAgICAgICAgIHN0YXJ0OiB7IHg6IDEwMjAsIHk6IDQ1OCB9LFxuICAgICAgICAgIGVuZDogeyB4OiA0NDcsIHk6IDQ1OCB9LFxuICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxuICAgICAgICAgIHBhcmVudDogNCxcbiAgICAgICAgICBjaGlsZDogMCxcbiAgICAgICAgICBhbmdsZTogMy4xNDE1OTI2NTM1ODk3OTMsXG4gICAgICAgICAgZXF1YXRpb25zOiB7XG4gICAgICAgICAgICB1cDogeyBBOiAnaCcsIEI6IDQ2OCB9LFxuICAgICAgICAgICAgZG93bjogeyBBOiAnaCcsIEI6IDQ0OCB9LFxuICAgICAgICAgICAgYmFzZTogeyBBOiAnaCcsIEI6IDQ1OCB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29vcmRzOiBbXG4gICAgICAgICAgICB7IHg6IDEwMzAsIHk6IDQ2OCB9LFxuICAgICAgICAgICAgeyB4OiAxMDEwLCB5OiA0NDggfSxcbiAgICAgICAgICAgIHsgeDogNDM3LCB5OiA0NDggfSxcbiAgICAgICAgICAgIHsgeDogNDU3LCB5OiA0NjggfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGdyYXBoOiB7IDA6IHt9LCBjb250ZXh0OiB7fSwgbGVuZ3RoOiAxIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcm9vbURhdGE6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvb3JkczogW1xuICAgICAgICAgICAgeyB4OiA0NDcsIHk6IDc0NCB9LFxuICAgICAgICAgICAgeyB4OiAxMzQ3LCB5OiA3NDQgfSxcbiAgICAgICAgICAgIHsgeDogMTM0NywgeTogMTQ0IH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IDEwMjAsXG4gICAgICAgICAgICAgIHk6IDE0NCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IHg6IDEwMjAsIHk6IDQ1OCB9LFxuICAgICAgICAgICAgeyB4OiA0NDcsIHk6IDQ1OCB9LFxuICAgICAgICAgICAgeyB4OiA0NDcsIHk6IDc0NCB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgY29vcmRzT3V0c2lkZTogW1xuICAgICAgICAgICAgeyB4OiAxMzU3LCB5OiA3NTQgfSxcbiAgICAgICAgICAgIHsgeDogMTM1NywgeTogMTM0IH0sXG4gICAgICAgICAgICB7IHg6IDEwMTAsIHk6IDEzNCB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB4OiAxMDEwLFxuICAgICAgICAgICAgICB5OiA0NDgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyB4OiA0MzcsIHk6IDQ0OCB9LFxuICAgICAgICAgICAgeyB4OiA0MzcsIHk6IDc1NCB9LFxuICAgICAgICAgICAgeyB4OiAxMzU3LCB5OiA3NTQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGNvb3Jkc0luc2lkZTogW1xuICAgICAgICAgICAgeyB4OiAxMzM3LCB5OiA3MzQgfSxcbiAgICAgICAgICAgIHsgeDogMTMzNywgeTogMTU0IH0sXG4gICAgICAgICAgICB7IHg6IDEwMzAsIHk6IDE1NCB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB4OiAxMDMwLFxuICAgICAgICAgICAgICB5OiA0NjgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyB4OiA0NTcsIHk6IDQ2OCB9LFxuICAgICAgICAgICAgeyB4OiA0NTcsIHk6IDczNCB9LFxuICAgICAgICAgICAgeyB4OiAxMzM3LCB5OiA3MzQgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGluc2lkZTogW10sXG4gICAgICAgICAgd2F5OiBbJzAnLCAnMicsICczJywgJzQnLCAnNScsICcxJywgJzAnXSxcbiAgICAgICAgICBhcmVhOiAzMzA0NzgsXG4gICAgICAgICAgc3VyZmFjZTogJycsXG4gICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgY29sb3I6ICdncmFkaWVudFdoaXRlJyxcbiAgICAgICAgICBzaG93U3VyZmFjZTogdHJ1ZSxcbiAgICAgICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KVxuICAgIHRoaXMuSElTVE9SWVswXSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuSElTVE9SWVswXSlcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGlzdG9yeScsIEpTT04uc3RyaW5naWZ5KHRoaXMuSElTVE9SWSkpXG4gICAgdGhpcy5sb2FkKDApXG4gICAgdGhpcy5zYXZlKClcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuaW1wb3J0Rmxvb3JwbGFuID0gZnVuY3Rpb24gKGZsb29ycGxhbkpzb24pIHtcbiAgZm9yIChjb25zdCBrIGluIHRoaXMuT0JKREFUQSkge1xuICAgIHRoaXMuT0JKREFUQVtrXS5ncmFwaC5yZW1vdmUoKVxuICB9XG5cbiAgdGhpcy5PQkpEQVRBID0gW11cblxuICBmb3IgKGNvbnN0IGsgaW4gZmxvb3JwbGFuSnNvbi5vYmpEYXRhKSB7XG4gICAgY29uc3QgT08gPSBmbG9vcnBsYW5Kc29uLm9iakRhdGFba11cbiAgICAvLyBpZiAoT08uZmFtaWx5ID09PSAnZW5lcmd5JykgT08uZmFtaWx5ID0gJ2J5T2JqZWN0JztcbiAgICBjb25zdCBvYmogPSB0aGlzLmVkaXRvci5vYmoyRChcbiAgICAgIE9PLmZhbWlseSxcbiAgICAgIE9PLmNsYXNzT2JqLFxuICAgICAgT08udHlwZSxcbiAgICAgIHtcbiAgICAgICAgeDogT08ueCxcbiAgICAgICAgeTogT08ueSxcbiAgICAgIH0sXG4gICAgICBPTy5hbmdsZSxcbiAgICAgIE9PLmFuZ2xlU2lnbixcbiAgICAgIE9PLnNpemUsXG4gICAgICAoT08uaGluZ2UgPSAnbm9ybWFsJyksXG4gICAgICBPTy50aGljayxcbiAgICAgIE9PLnZhbHVlLFxuICAgIClcbiAgICBvYmoubGltaXQgPSBPTy5saW1pdFxuICAgIHRoaXMuT0JKREFUQS5wdXNoKG9iailcbiAgICAkKCcjYm94Y2FycGVudHJ5JykuYXBwZW5kKHRoaXMuT0JKREFUQVt0aGlzLk9CSkRBVEEubGVuZ3RoIC0gMV0uZ3JhcGgpXG4gICAgb2JqLnVwZGF0ZSgpXG4gIH1cblxuICB0aGlzLldBTExTID0gZmxvb3JwbGFuSnNvbi53YWxsRGF0YVxuXG4gIGZvciAoY29uc3QgayBpbiB0aGlzLldBTExTKSB7XG4gICAgaWYgKHRoaXMuV0FMTFNba10uY2hpbGQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5XQUxMU1trXS5jaGlsZCA9IHRoaXMuV0FMTFNbdGhpcy5XQUxMU1trXS5jaGlsZF1cbiAgICB9XG4gICAgaWYgKHRoaXMuV0FMTFNba10ucGFyZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuV0FMTFNba10ucGFyZW50ID0gdGhpcy5XQUxMU1t0aGlzLldBTExTW2tdLnBhcmVudF1cbiAgICB9XG4gIH1cblxuICB0aGlzLlJPT00gPSBmbG9vcnBsYW5Kc29uLnJvb21EYXRhXG4gIHRoaXMuZWRpdG9yLmFyY2hpdGVjdCh0aGlzLldBTExTKVxuICB0aGlzLmVkaXRvci5zaG93U2NhbGVCb3goKVxuICB0aGlzLnJpYigpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5leHBvcnRGbG9vcnBsYW4gPSBleHBvcnRGbG9vcnBsYW5cblxuLy8gUkVWSUVXOiBXaGF0IGlzIGBib290YCBmb3I/XG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChib290ID0gZmFsc2UpIHtcbiAgaWYgKGJvb3QpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaGlzdG9yeScpXG4gIH1cblxuICAvLyBSRVZJRVc6IFdoYXQgZG9lcyB0aGlzIG1lYW4/XG4gIC8vIEZPUiBDWUNMSUMgT0JKIElOVE8gTE9DQUxTVE9SQUdFICEhIVxuICBmb3IgKGNvbnN0IGsgaW4gdGhpcy5XQUxMUykge1xuICAgIGlmICh0aGlzLldBTExTW2tdLmNoaWxkICE9IG51bGwpIHtcbiAgICAgIHRoaXMuV0FMTFNba10uY2hpbGQgPSB0aGlzLldBTExTLmluZGV4T2YodGhpcy5XQUxMU1trXS5jaGlsZClcbiAgICB9XG4gICAgaWYgKHRoaXMuV0FMTFNba10ucGFyZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuV0FMTFNba10ucGFyZW50ID0gdGhpcy5XQUxMUy5pbmRleE9mKHRoaXMuV0FMTFNba10ucGFyZW50KVxuICAgIH1cbiAgfVxuXG4gIC8vIFJFVklFVzogV2hhdCBpcyB0aGlzIGZvcj9cbiAgaWYgKFxuICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG9iakRhdGE6IHRoaXMuT0JKREFUQSxcbiAgICAgIHdhbGxEYXRhOiB0aGlzLldBTExTLFxuICAgICAgcm9vbURhdGE6IHRoaXMuUk9PTSxcbiAgICB9KSA9PT0gdGhpcy5ISVNUT1JZW3RoaXMuSElTVE9SWS5sZW5ndGggLSAxXVxuICApIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gdGhpcy5XQUxMUykge1xuICAgICAgaWYgKHRoaXMuV0FMTFNba10uY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLldBTExTW2tdLmNoaWxkID0gdGhpcy5XQUxMU1t0aGlzLldBTExTW2tdLmNoaWxkXVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuV0FMTFNba10ucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5XQUxMU1trXS5wYXJlbnQgPSB0aGlzLldBTExTW3RoaXMuV0FMTFNba10ucGFyZW50XVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFJFVklFVzogV2h5IHRoaXMgY29uZGl0aW9uP1xuICBpZiAodGhpcy5ISVNUT1JZLmluZGV4IDwgdGhpcy5ISVNUT1JZLmxlbmd0aCkge1xuICAgIC8vIFJFVklFVzogV2hhdCBpcyB0aGlzIGZvcj9cbiAgICB0aGlzLkhJU1RPUlkuc3BsaWNlKFxuICAgICAgdGhpcy5ISVNUT1JZLmluZGV4LFxuICAgICAgdGhpcy5ISVNUT1JZLmxlbmd0aCAtIHRoaXMuSElTVE9SWS5pbmRleCxcbiAgICApXG5cbiAgICAkKCcjcmVkbycpLmFkZENsYXNzKCdkaXNhYmxlZCcpXG4gIH1cblxuICAvLyBSRVZJRVc6IFdoYXQgaXMgdGhpcyBmb3I/XG4gIHRoaXMuSElTVE9SWS5wdXNoKFxuICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG9iakRhdGE6IHRoaXMuT0JKREFUQSxcbiAgICAgIHdhbGxEYXRhOiB0aGlzLldBTExTLFxuICAgICAgcm9vbURhdGE6IHRoaXMuUk9PTSxcbiAgICB9KSxcbiAgKVxuXG4gIC8vIFJlY29yZCB0byBsb2NhbCBzdG9yYWdlXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoaXN0b3J5JywgSlNPTi5zdHJpbmdpZnkodGhpcy5ISVNUT1JZKSlcblxuICAvLyBSRVZJRVc6IFdoYXQgaXMgdGhpcyBmb3I/XG4gIHRoaXMuSElTVE9SWS5pbmRleCsrXG5cbiAgaWYgKHRoaXMuSElTVE9SWS5pbmRleCA+IDEpIHtcbiAgICAkKCcjdW5kbycpLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpXG4gIH1cblxuICAvLyBSRVZJRVc6IFdoYXQgaXMgdGhpcyBmb3I/XG4gIGZvciAoY29uc3QgayBpbiB0aGlzLldBTExTKSB7XG4gICAgaWYgKHRoaXMuV0FMTFNba10uY2hpbGQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5XQUxMU1trXS5jaGlsZCA9IHRoaXMuV0FMTFNbdGhpcy5XQUxMU1trXS5jaGlsZF1cbiAgICB9XG4gICAgaWYgKHRoaXMuV0FMTFNba10ucGFyZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuV0FMTFNba10ucGFyZW50ID0gdGhpcy5XQUxMU1t0aGlzLldBTExTW2tdLnBhcmVudF1cbiAgICB9XG4gIH1cblxuICAvLyBSRVZJRVc6IFdoeSByZXR1cm4gdHJ1ZSBoZXJlP1xuICByZXR1cm4gdHJ1ZVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChcbiAgaW5kZXggPSB0aGlzLkhJU1RPUlkuaW5kZXgsXG4gIGJvb3QgPSBmYWxzZSxcbikge1xuICBpZiAodGhpcy5ISVNUT1JZLmxlbmd0aCA9PT0gMCAmJiAhYm9vdCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZm9yIChjb25zdCBrIGluIHRoaXMuT0JKREFUQSkge1xuICAgIHRoaXMuT0JKREFUQVtrXS5ncmFwaC5yZW1vdmUoKVxuICB9XG5cbiAgdGhpcy5PQkpEQVRBID0gW11cbiAgbGV0IGhpc3RvcnlUZW1wID0gW11cbiAgaGlzdG9yeVRlbXAgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdoaXN0b3J5JykpXG4gIGhpc3RvcnlUZW1wID0gSlNPTi5wYXJzZShoaXN0b3J5VGVtcFtpbmRleF0pXG5cbiAgZm9yIChjb25zdCBrIGluIGhpc3RvcnlUZW1wLm9iakRhdGEpIHtcbiAgICBjb25zdCBPTyA9IGhpc3RvcnlUZW1wLm9iakRhdGFba11cbiAgICAvLyBpZiAoT08uZmFtaWx5ID09PSAnZW5lcmd5JykgT08uZmFtaWx5ID0gJ2J5T2JqZWN0JztcbiAgICBjb25zdCBvYmogPSB0aGlzLmVkaXRvci5vYmoyRChcbiAgICAgIE9PLmZhbWlseSxcbiAgICAgIE9PLmNsYXNzT2JqLFxuICAgICAgT08udHlwZSxcbiAgICAgIHtcbiAgICAgICAgeDogT08ueCxcbiAgICAgICAgeTogT08ueSxcbiAgICAgIH0sXG4gICAgICBPTy5hbmdsZSxcbiAgICAgIE9PLmFuZ2xlU2lnbixcbiAgICAgIE9PLnNpemUsXG4gICAgICAoT08uaGluZ2UgPSAnbm9ybWFsJyksXG4gICAgICBPTy50aGljayxcbiAgICAgIE9PLnZhbHVlLFxuICAgIClcbiAgICBvYmoubGltaXQgPSBPTy5saW1pdFxuICAgIHRoaXMuT0JKREFUQS5wdXNoKG9iailcbiAgICAkKCcjYm94Y2FycGVudHJ5JykuYXBwZW5kKHRoaXMuT0JKREFUQVt0aGlzLk9CSkRBVEEubGVuZ3RoIC0gMV0uZ3JhcGgpXG4gICAgb2JqLnVwZGF0ZSgpXG4gIH1cblxuICB0aGlzLldBTExTID0gaGlzdG9yeVRlbXAud2FsbERhdGFcblxuICBmb3IgKGNvbnN0IGsgaW4gdGhpcy5XQUxMUykge1xuICAgIGlmICh0aGlzLldBTExTW2tdLmNoaWxkICE9IG51bGwpIHtcbiAgICAgIHRoaXMuV0FMTFNba10uY2hpbGQgPSB0aGlzLldBTExTW3RoaXMuV0FMTFNba10uY2hpbGRdXG4gICAgfVxuICAgIGlmICh0aGlzLldBTExTW2tdLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICB0aGlzLldBTExTW2tdLnBhcmVudCA9IHRoaXMuV0FMTFNbdGhpcy5XQUxMU1trXS5wYXJlbnRdXG4gICAgfVxuICB9XG5cbiAgdGhpcy5ST09NID0gaGlzdG9yeVRlbXAucm9vbURhdGFcbiAgdGhpcy5lZGl0b3IuYXJjaGl0ZWN0KHRoaXMuV0FMTFMpXG4gIHRoaXMuZWRpdG9yLnNob3dTY2FsZUJveCgpXG4gIHRoaXMucmliKClcbn1cblxuLy8gUkVWSUVXOiBUaGUgbmFtZSBmb3IgdGhpcyBmdW5jdGlvbiBjb3VsZCBiZSBtYWRlIG1vcmUgY2xlYXIgdG8gd2hhdCBpdCBhY3R1YWxseSBkb2VzLiBJdCBkb2VzIG5vdCBvbmx5IGhhbmRsZSB6b29tIGZ1bmN0aW9uYWxpdHksIGFzIGl0cyBuYW1lIG1pZ2h0IHN1Z2dlc3RcbkFwcGxpY2F0aW9uLnByb3RvdHlwZS56b29tX21ha2VyID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgeG1vdmUsIHh2aWV3KSB7XG4gIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgY2FzZSAnem9vbW91dCc6XG4gICAgICBpZiAodGhpcy56b29tID4gTUlOX1pPT00pIHtcbiAgICAgICAgdGhpcy56b29tLS1cbiAgICAgICAgdGhpcy53aWR0aF92aWV3Ym94ICs9IHhtb3ZlXG4gICAgICAgIHRoaXMuaGVpZ2h0X3ZpZXdib3ggPSB0aGlzLndpZHRoX3ZpZXdib3ggKiB0aGlzLnJhdGlvX3ZpZXdib3hcbiAgICAgICAgdGhpcy5vcmlnaW5YX3ZpZXdib3ggPSB0aGlzLm9yaWdpblhfdmlld2JveCAtIHhtb3ZlIC8gMlxuICAgICAgICB0aGlzLm9yaWdpbllfdmlld2JveCA9XG4gICAgICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3ggLSAoeG1vdmUgLyAyKSAqIHRoaXMucmF0aW9fdmlld2JveFxuICAgICAgICB0aGlzLnNjYWxlRmFjdG9yID0gdGhpcy53aWR0aF92aWV3Ym94IC8gdGhpcy50YWlsbGVfd1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd6b29taW4nOlxuICAgICAgaWYgKHRoaXMuem9vbSA8IE1BWF9aT09NKSB7XG4gICAgICAgIHRoaXMuem9vbSsrXG4gICAgICAgIHRoaXMud2lkdGhfdmlld2JveCAtPSB4bW92ZVxuICAgICAgICB0aGlzLmhlaWdodF92aWV3Ym94ID0gdGhpcy53aWR0aF92aWV3Ym94ICogdGhpcy5yYXRpb192aWV3Ym94XG4gICAgICAgIHRoaXMub3JpZ2luWF92aWV3Ym94ID0gdGhpcy5vcmlnaW5YX3ZpZXdib3ggKyB4bW92ZSAvIDJcbiAgICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3ggPVxuICAgICAgICAgIHRoaXMub3JpZ2luWV92aWV3Ym94ICsgKHhtb3ZlIC8gMikgKiB0aGlzLnJhdGlvX3ZpZXdib3hcbiAgICAgICAgdGhpcy5zY2FsZUZhY3RvciA9IHRoaXMud2lkdGhfdmlld2JveCAvIHRoaXMudGFpbGxlX3dcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnem9vbXJlc2V0JzpcbiAgICAgIHRoaXMub3JpZ2luWF92aWV3Ym94ID0gMFxuICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3ggPSAwXG4gICAgICB0aGlzLndpZHRoX3ZpZXdib3ggPSB0aGlzLnRhaWxsZV93XG4gICAgICB0aGlzLmhlaWdodF92aWV3Ym94ID0gdGhpcy50YWlsbGVfaFxuICAgICAgdGhpcy5zY2FsZUZhY3RvciA9IDFcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnem9vbXJpZ2h0JzpcbiAgICAgIHRoaXMub3JpZ2luWF92aWV3Ym94ICs9IHh2aWV3XG4gICAgICBicmVha1xuICAgIGNhc2UgJ3pvb21sZWZ0JzpcbiAgICAgIHRoaXMub3JpZ2luWF92aWV3Ym94IC09IHh2aWV3XG4gICAgICBicmVha1xuICAgIGNhc2UgJ3pvb210b3AnOlxuICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3ggLT0geHZpZXdcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnem9vbWJvdHRvbSc6XG4gICAgICB0aGlzLm9yaWdpbllfdmlld2JveCArPSB4dmlld1xuICAgICAgYnJlYWtcbiAgICBjYXNlICd6b29tZHJhZyc6XG4gICAgICB0aGlzLm9yaWdpblhfdmlld2JveCAtPSB4bW92ZVxuICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3ggLT0geHZpZXdcbiAgICAgIGJyZWFrXG4gIH1cblxuICBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50QnlJZCgnbGluJylcbiAgICAuc2V0QXR0cmlidXRlKFxuICAgICAgJ3ZpZXdCb3gnLFxuICAgICAgYCR7dGhpcy5vcmlnaW5YX3ZpZXdib3h9ICR7dGhpcy5vcmlnaW5ZX3ZpZXdib3h9ICR7dGhpcy53aWR0aF92aWV3Ym94fSAke3RoaXMuaGVpZ2h0X3ZpZXdib3h9YCxcbiAgICApXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5jYWxjdWxfc25hcCA9IGZ1bmN0aW9uIChldmVudCwgc3RhdGUpIHtcbiAgbGV0IGVYXG4gIGxldCBlWVxuICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgIGNvbnN0IHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1xuICAgIGVYID0gdG91Y2hlc1swXS5wYWdlWFxuICAgIGVZID0gdG91Y2hlc1swXS5wYWdlWVxuICAgIHRoaXMudGFjdGlsZSA9IHRydWVcbiAgfSBlbHNlIHtcbiAgICBlWCA9IGV2ZW50LnBhZ2VYXG4gICAgZVkgPSBldmVudC5wYWdlWVxuICB9XG4gIGNvbnN0IHhfbW91c2UgPVxuICAgIGVYICogdGhpcy5zY2FsZUZhY3RvciAtXG4gICAgdGhpcy5vZmZzZXQubGVmdCAqIHRoaXMuc2NhbGVGYWN0b3IgK1xuICAgIHRoaXMub3JpZ2luWF92aWV3Ym94XG4gIGNvbnN0IHlfbW91c2UgPVxuICAgIGVZICogdGhpcy5zY2FsZUZhY3RvciAtXG4gICAgdGhpcy5vZmZzZXQudG9wICogdGhpcy5zY2FsZUZhY3RvciArXG4gICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3hcbiAgbGV0IHhfZ3JpZFxuICBsZXQgeV9ncmlkXG4gIGlmIChzdGF0ZSA9PT0gJ29uJykge1xuICAgIHhfZ3JpZCA9IE1hdGgucm91bmQoeF9tb3VzZSAvIHRoaXMuZ3JpZCkgKiB0aGlzLmdyaWRcbiAgICB5X2dyaWQgPSBNYXRoLnJvdW5kKHlfbW91c2UgLyB0aGlzLmdyaWQpICogdGhpcy5ncmlkXG4gIH1cbiAgaWYgKHN0YXRlID09PSAnb2ZmJykge1xuICAgIHhfZ3JpZCA9IHhfbW91c2VcbiAgICB5X2dyaWQgPSB5X21vdXNlXG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiB4X2dyaWQsXG4gICAgeTogeV9ncmlkLFxuICAgIHhNb3VzZTogeF9tb3VzZSxcbiAgICB5TW91c2U6IHlfbW91c2UsXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLmludGVyc2VjdGlvbk9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmxpbmVJbnRlcnNlY3Rpb25QICE9ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5saW5lSW50ZXJzZWN0aW9uUC5yZW1vdmUoKVxuICAgIHRoaXMubGluZUludGVyc2VjdGlvblAgPSB1bmRlZmluZWRcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24gKFxuICBzbmFwLFxuICByYW5nZSA9IEluZmluaXR5LFxuICBleGNlcHQgPSBbJyddLFxuKSB7XG4gIC8vIE9SQU5HRSBMSU5FUyA5MMKwIE5FQVIgU0VHTUVOVFxuICBjb25zdCBiZXN0RXFQb2ludCA9IHt9XG4gIGNvbnN0IGVxdWF0aW9uID0ge31cblxuICBiZXN0RXFQb2ludC5kaXN0YW5jZSA9IHJhbmdlXG5cbiAgaWYgKHR5cGVvZiB0aGlzLmxpbmVJbnRlcnNlY3Rpb25QICE9ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5saW5lSW50ZXJzZWN0aW9uUC5yZW1vdmUoKVxuICAgIHRoaXMubGluZUludGVyc2VjdGlvblAgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHRoaXMubGluZUludGVyc2VjdGlvblAgPSB0aGlzLnFTVkcuY3JlYXRlKCdib3hiaW5kJywgJ3BhdGgnLCB7XG4gICAgLy8gT1JBTkdFIFRFTVAgTElORSBGT1IgQU5HTEUgMCA5MCA0NSAtK1xuICAgIGQ6ICcnLFxuICAgIHN0cm9rZTogJ3RyYW5zcGFyZW50JyxcbiAgICAnc3Ryb2tlLXdpZHRoJzogMC41LFxuICAgICdzdHJva2Utb3BhY2l0eSc6ICcxJyxcbiAgICBmaWxsOiAnbm9uZScsXG4gIH0pXG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5XQUxMUy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpZiAoZXhjZXB0LmluZGV4T2YodGhpcy5XQUxMU1tpbmRleF0pID09PSAtMSkge1xuICAgICAgY29uc3QgeDEgPSB0aGlzLldBTExTW2luZGV4XS5zdGFydC54XG4gICAgICBjb25zdCB5MSA9IHRoaXMuV0FMTFNbaW5kZXhdLnN0YXJ0LnlcbiAgICAgIGNvbnN0IHgyID0gdGhpcy5XQUxMU1tpbmRleF0uZW5kLnhcbiAgICAgIGNvbnN0IHkyID0gdGhpcy5XQUxMU1tpbmRleF0uZW5kLnlcblxuICAgICAgLy8gRVFVQVRJT04gOTDCsCBvZiBzZWdtZW50IG5mL25mLTEgYXQgWDIvWTIgUG9pbnRcbiAgICAgIGlmIChNYXRoLmFicyh5MiAtIHkxKSA9PT0gMCkge1xuICAgICAgICBlcXVhdGlvbi5DID0gJ3YnIC8vIEMvRCBlcXVhdGlvbiA5MMKwIENvZWYgPSAtMS9FXG4gICAgICAgIGVxdWF0aW9uLkQgPSB4MVxuICAgICAgICBlcXVhdGlvbi5FID0gJ2gnIC8vIEUvRiBlcXVhdGlvbiBTZWdtZW50XG4gICAgICAgIGVxdWF0aW9uLkYgPSB5MVxuICAgICAgICBlcXVhdGlvbi5HID0gJ3YnIC8vIEcvSCBlcXVhdGlvbiA5MMKwIENvZWYgPSAtMS9FXG4gICAgICAgIGVxdWF0aW9uLkggPSB4MlxuICAgICAgICBlcXVhdGlvbi5JID0gJ2gnIC8vIEkvSiBlcXVhdGlvbiBTZWdtZW50XG4gICAgICAgIGVxdWF0aW9uLkogPSB5MlxuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyh4MiAtIHgxKSA9PT0gMCkge1xuICAgICAgICBlcXVhdGlvbi5DID0gJ2gnIC8vIEMvRCBlcXVhdGlvbiA5MMKwIENvZWYgPSAtMS9FXG4gICAgICAgIGVxdWF0aW9uLkQgPSB5MVxuICAgICAgICBlcXVhdGlvbi5FID0gJ3YnIC8vIEUvRiBlcXVhdGlvbiBTZWdtZW50XG4gICAgICAgIGVxdWF0aW9uLkYgPSB4MVxuICAgICAgICBlcXVhdGlvbi5HID0gJ2gnIC8vIEcvSCBlcXVhdGlvbiA5MMKwIENvZWYgPSAtMS9FXG4gICAgICAgIGVxdWF0aW9uLkggPSB5MlxuICAgICAgICBlcXVhdGlvbi5JID0gJ3YnIC8vIEkvSiBlcXVhdGlvbiBTZWdtZW50XG4gICAgICAgIGVxdWF0aW9uLkogPSB4MlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXF1YXRpb24uQyA9ICh4MSAtIHgyKSAvICh5MiAtIHkxKVxuICAgICAgICBlcXVhdGlvbi5EID0geTEgLSB4MSAqIGVxdWF0aW9uLkNcbiAgICAgICAgZXF1YXRpb24uRSA9ICh5MiAtIHkxKSAvICh4MiAtIHgxKVxuICAgICAgICBlcXVhdGlvbi5GID0geTEgLSB4MSAqIGVxdWF0aW9uLkVcbiAgICAgICAgZXF1YXRpb24uRyA9ICh4MSAtIHgyKSAvICh5MiAtIHkxKVxuICAgICAgICBlcXVhdGlvbi5IID0geTIgLSB4MiAqIGVxdWF0aW9uLkNcbiAgICAgICAgZXF1YXRpb24uSSA9ICh5MiAtIHkxKSAvICh4MiAtIHgxKVxuICAgICAgICBlcXVhdGlvbi5KID0geTIgLSB4MiAqIGVxdWF0aW9uLkVcbiAgICAgIH1cbiAgICAgIGVxdWF0aW9uLkEgPSBlcXVhdGlvbi5DXG4gICAgICBlcXVhdGlvbi5CID0gZXF1YXRpb24uRFxuICAgICAgZXEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcXVhdGlvbiwgc25hcClcbiAgICAgIGlmIChlcS5kaXN0YW5jZSA8IGJlc3RFcVBvaW50LmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmVzdEVxUG9pbnQoXG4gICAgICAgICAgYmVzdEVxUG9pbnQsXG4gICAgICAgICAgZXEuZGlzdGFuY2UsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgZXEueCxcbiAgICAgICAgICBlcS55LFxuICAgICAgICAgIHgxLFxuICAgICAgICAgIHkxLFxuICAgICAgICAgIHgyLFxuICAgICAgICAgIHkyLFxuICAgICAgICAgIDEsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGVxdWF0aW9uLkEgPSBlcXVhdGlvbi5FXG4gICAgICBlcXVhdGlvbi5CID0gZXF1YXRpb24uRlxuICAgICAgZXEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcXVhdGlvbiwgc25hcClcbiAgICAgIGlmIChlcS5kaXN0YW5jZSA8IGJlc3RFcVBvaW50LmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmVzdEVxUG9pbnQoXG4gICAgICAgICAgYmVzdEVxUG9pbnQsXG4gICAgICAgICAgZXEuZGlzdGFuY2UsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgZXEueCxcbiAgICAgICAgICBlcS55LFxuICAgICAgICAgIHgxLFxuICAgICAgICAgIHkxLFxuICAgICAgICAgIHgyLFxuICAgICAgICAgIHkyLFxuICAgICAgICAgIDEsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGVxdWF0aW9uLkEgPSBlcXVhdGlvbi5HXG4gICAgICBlcXVhdGlvbi5CID0gZXF1YXRpb24uSFxuICAgICAgZXEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcXVhdGlvbiwgc25hcClcbiAgICAgIGlmIChlcS5kaXN0YW5jZSA8IGJlc3RFcVBvaW50LmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmVzdEVxUG9pbnQoXG4gICAgICAgICAgYmVzdEVxUG9pbnQsXG4gICAgICAgICAgZXEuZGlzdGFuY2UsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgZXEueCxcbiAgICAgICAgICBlcS55LFxuICAgICAgICAgIHgxLFxuICAgICAgICAgIHkxLFxuICAgICAgICAgIHgyLFxuICAgICAgICAgIHkyLFxuICAgICAgICAgIDIsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGVxdWF0aW9uLkEgPSBlcXVhdGlvbi5JXG4gICAgICBlcXVhdGlvbi5CID0gZXF1YXRpb24uSlxuICAgICAgZXEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcXVhdGlvbiwgc25hcClcbiAgICAgIGlmIChlcS5kaXN0YW5jZSA8IGJlc3RFcVBvaW50LmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuc2V0QmVzdEVxUG9pbnQoXG4gICAgICAgICAgYmVzdEVxUG9pbnQsXG4gICAgICAgICAgZXEuZGlzdGFuY2UsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgZXEueCxcbiAgICAgICAgICBlcS55LFxuICAgICAgICAgIHgxLFxuICAgICAgICAgIHkxLFxuICAgICAgICAgIHgyLFxuICAgICAgICAgIHkyLFxuICAgICAgICAgIDIsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IC8vIEVORCBJTkRFWE9GIEVYQ0VQVCBURVNUXG4gIH0gLy8gRU5EIExPT1AgRk9SXG5cbiAgaWYgKGJlc3RFcVBvaW50LmRpc3RhbmNlIDwgcmFuZ2UpIHtcbiAgICBpZiAoYmVzdEVxUG9pbnQud2F5ID09PSAyKSB7XG4gICAgICB0aGlzLmxpbmVJbnRlcnNlY3Rpb25QLmF0dHIoe1xuICAgICAgICAvLyBPUkFOR0UgVEVNUCBMSU5FIEZPUiBBTkdMRSAwIDkwIDQ1IC0rXG4gICAgICAgIGQ6XG4gICAgICAgICAgJ00nICtcbiAgICAgICAgICBiZXN0RXFQb2ludC54MSArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBiZXN0RXFQb2ludC55MSArXG4gICAgICAgICAgJyBMJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueTIgK1xuICAgICAgICAgICcgTCcgK1xuICAgICAgICAgIGJlc3RFcVBvaW50LnggK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueSxcbiAgICAgICAgc3Ryb2tlOiAnI2Q3YWM1NycsXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpbmVJbnRlcnNlY3Rpb25QLmF0dHIoe1xuICAgICAgICAvLyBPUkFOR0UgVEVNUCBMSU5FIEZPUiBBTkdMRSAwIDkwIDQ1IC0rXG4gICAgICAgIGQ6XG4gICAgICAgICAgJ00nICtcbiAgICAgICAgICBiZXN0RXFQb2ludC54MiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBiZXN0RXFQb2ludC55MiArXG4gICAgICAgICAgJyBMJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueDEgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueTEgK1xuICAgICAgICAgICcgTCcgK1xuICAgICAgICAgIGJlc3RFcVBvaW50LnggK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgYmVzdEVxUG9pbnQueSxcbiAgICAgICAgc3Ryb2tlOiAnI2Q3YWM1NycsXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeDogYmVzdEVxUG9pbnQueCxcbiAgICAgIHk6IGJlc3RFcVBvaW50LnksXG4gICAgICB3YWxsOiB0aGlzLldBTExTW2Jlc3RFcVBvaW50Lm5vZGVdLFxuICAgICAgZGlzdGFuY2U6IGJlc3RFcVBvaW50LmRpc3RhbmNlLFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuaGlkZUFsbFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICQoJyNib3hiaW5kJykuZW1wdHkoKVxuICB0aGlzLnNpemVUZXh0ID0gW11cbiAgdGhpcy5zaG93QWxsU2l6ZVN0YXR1cyA9IDBcbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLmluV2FsbFJpYiA9IGZ1bmN0aW9uICh3YWxsLCBvcHRpb24gPSBmYWxzZSkge1xuICBpZiAoIXRoaXMub3B0aW9uKSB7XG4gICAgJCgnI2JveFJpYicpLmVtcHR5KClcbiAgfVxuICBjb25zdCByaWJNYXN0ZXIgPSBbXVxuICByaWJNYXN0ZXIucHVzaChbXSlcbiAgcmliTWFzdGVyLnB1c2goW10pXG4gIGxldCBpbnRlclxuICBsZXQgZGlzdGFuY2VcbiAgbGV0IGNyb3NzXG4gIGNvbnN0IGFuZ2xlVGV4dFZhbHVlID0gd2FsbC5hbmdsZSAqICgxODAgLyBNYXRoLlBJKVxuICBjb25zdCBvYmpXYWxsID0gdGhpcy5lZGl0b3Iub2JqRnJvbVdhbGwod2FsbCkgLy8gTElTVCBPQkogT04gRURHRVxuICBpZiAob2JqV2FsbC5sZW5ndGggPT0gMCkge1xuICAgIHJldHVyblxuICB9XG4gIHJpYk1hc3RlclswXS5wdXNoKHtcbiAgICB3YWxsOiB3YWxsLFxuICAgIGNyb3NzT2JqOiBmYWxzZSxcbiAgICBzaWRlOiAndXAnLFxuICAgIGNvb3Jkczogd2FsbC5jb29yZHNbMF0sXG4gICAgZGlzdGFuY2U6IDAsXG4gIH0pXG4gIHJpYk1hc3RlclsxXS5wdXNoKHtcbiAgICB3YWxsOiB3YWxsLFxuICAgIGNyb3NzT2JqOiBmYWxzZSxcbiAgICBzaWRlOiAnZG93bicsXG4gICAgY29vcmRzOiB3YWxsLmNvb3Jkc1sxXSxcbiAgICBkaXN0YW5jZTogMCxcbiAgfSlcbiAgbGV0IG9ialRhcmdldCA9IG51bGxcbiAgZm9yIChjb25zdCBvYiBpbiBvYmpXYWxsKSB7XG4gICAgb2JqVGFyZ2V0ID0gb2JqV2FsbFtvYl1cbiAgICBvYmpUYXJnZXQudXAgPSBbXG4gICAgICB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbih3YWxsLmVxdWF0aW9ucy51cCwgb2JqVGFyZ2V0LmxpbWl0WzBdKSxcbiAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKHdhbGwuZXF1YXRpb25zLnVwLCBvYmpUYXJnZXQubGltaXRbMV0pLFxuICAgIF1cbiAgICBvYmpUYXJnZXQuZG93biA9IFtcbiAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKHdhbGwuZXF1YXRpb25zLmRvd24sIG9ialRhcmdldC5saW1pdFswXSksXG4gICAgICB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbih3YWxsLmVxdWF0aW9ucy5kb3duLCBvYmpUYXJnZXQubGltaXRbMV0pLFxuICAgIF1cblxuICAgIGRpc3RhbmNlID0gdGhpcy5xU1ZHLm1lYXN1cmUod2FsbC5jb29yZHNbMF0sIG9ialRhcmdldC51cFswXSkgLyB0aGlzLm1ldGVyXG4gICAgcmliTWFzdGVyWzBdLnB1c2goe1xuICAgICAgd2FsbDogb2JqVGFyZ2V0LFxuICAgICAgY3Jvc3NPYmo6IG9iLFxuICAgICAgc2lkZTogJ3VwJyxcbiAgICAgIGNvb3Jkczogb2JqVGFyZ2V0LnVwWzBdLFxuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgfSlcbiAgICBkaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKHdhbGwuY29vcmRzWzBdLCBvYmpUYXJnZXQudXBbMV0pIC8gdGhpcy5tZXRlclxuICAgIHJpYk1hc3RlclswXS5wdXNoKHtcbiAgICAgIHdhbGw6IG9ialRhcmdldCxcbiAgICAgIGNyb3NzT2JqOiBvYixcbiAgICAgIHNpZGU6ICd1cCcsXG4gICAgICBjb29yZHM6IG9ialRhcmdldC51cFsxXSxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZS50b0ZpeGVkKDIpLFxuICAgIH0pXG4gICAgZGlzdGFuY2UgPSB0aGlzLnFTVkcubWVhc3VyZSh3YWxsLmNvb3Jkc1sxXSwgb2JqVGFyZ2V0LmRvd25bMF0pIC8gdGhpcy5tZXRlclxuICAgIHJpYk1hc3RlclsxXS5wdXNoKHtcbiAgICAgIHdhbGw6IG9ialRhcmdldCxcbiAgICAgIGNyb3NzT2JqOiBvYixcbiAgICAgIHNpZGU6ICdkb3duJyxcbiAgICAgIGNvb3Jkczogb2JqVGFyZ2V0LmRvd25bMF0sXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2UudG9GaXhlZCgyKSxcbiAgICB9KVxuICAgIGRpc3RhbmNlID0gdGhpcy5xU1ZHLm1lYXN1cmUod2FsbC5jb29yZHNbMV0sIG9ialRhcmdldC5kb3duWzFdKSAvIHRoaXMubWV0ZXJcbiAgICByaWJNYXN0ZXJbMV0ucHVzaCh7XG4gICAgICB3YWxsOiBvYmpUYXJnZXQsXG4gICAgICBjcm9zc09iajogb2IsXG4gICAgICBzaWRlOiAnZG93bicsXG4gICAgICBjb29yZHM6IG9ialRhcmdldC5kb3duWzFdLFxuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgfSlcbiAgfVxuICBkaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKHdhbGwuY29vcmRzWzBdLCB3YWxsLmNvb3Jkc1szXSkgLyB0aGlzLm1ldGVyXG4gIHJpYk1hc3RlclswXS5wdXNoKHtcbiAgICB3YWxsOiBvYmpUYXJnZXQsXG4gICAgY3Jvc3NPYmo6IGZhbHNlLFxuICAgIHNpZGU6ICd1cCcsXG4gICAgY29vcmRzOiB3YWxsLmNvb3Jkc1szXSxcbiAgICBkaXN0YW5jZTogZGlzdGFuY2UsXG4gIH0pXG4gIGRpc3RhbmNlID0gdGhpcy5xU1ZHLm1lYXN1cmUod2FsbC5jb29yZHNbMV0sIHdhbGwuY29vcmRzWzJdKSAvIHRoaXMubWV0ZXJcbiAgcmliTWFzdGVyWzFdLnB1c2goe1xuICAgIHdhbGw6IG9ialRhcmdldCxcbiAgICBjcm9zc09iajogZmFsc2UsXG4gICAgc2lkZTogJ2Rvd24nLFxuICAgIGNvb3Jkczogd2FsbC5jb29yZHNbMl0sXG4gICAgZGlzdGFuY2U6IGRpc3RhbmNlLFxuICB9KVxuICByaWJNYXN0ZXJbMF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpLnRvRml4ZWQoMilcbiAgfSlcbiAgcmliTWFzdGVyWzFdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKS50b0ZpeGVkKDIpXG4gIH0pXG4gIGZvciAoY29uc3QgdCBpbiByaWJNYXN0ZXIpIHtcbiAgICBmb3IgKGxldCBuID0gMTsgbiA8IHJpYk1hc3Rlclt0XS5sZW5ndGg7IG4rKykge1xuICAgICAgY29uc3QgZm91bmQgPSB0cnVlXG4gICAgICBsZXQgc2hpZnQgPSAtNVxuICAgICAgY29uc3QgdmFsdWVUZXh0ID0gTWF0aC5hYnMoXG4gICAgICAgIHJpYk1hc3Rlclt0XVtuIC0gMV0uZGlzdGFuY2UgLSByaWJNYXN0ZXJbdF1bbl0uZGlzdGFuY2UsXG4gICAgICApXG4gICAgICBsZXQgYW5nbGVUZXh0ID0gYW5nbGVUZXh0VmFsdWVcbiAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICBpZiAocmliTWFzdGVyW3RdW24gLSAxXS5zaWRlID09PSAnZG93bicpIHtcbiAgICAgICAgICBzaGlmdCA9IC1zaGlmdCArIDEwXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuZ2xlVGV4dCA+IDg5IHx8IGFuZ2xlVGV4dCA8IC04OSkge1xuICAgICAgICAgIGFuZ2xlVGV4dCAtPSAxODBcbiAgICAgICAgICBpZiAocmliTWFzdGVyW3RdW24gLSAxXS5zaWRlID09PSAnZG93bicpIHtcbiAgICAgICAgICAgIHNoaWZ0ID0gLTVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hpZnQgPSAtc2hpZnQgKyAxMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZVRleHRbbl0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAndGV4dCcsXG4gICAgICAgIClcbiAgICAgICAgY29uc3Qgc3RhcnRUZXh0ID0gdGhpcy5xU1ZHLm1pZGRsZShcbiAgICAgICAgICByaWJNYXN0ZXJbdF1bbiAtIDFdLmNvb3Jkcy54LFxuICAgICAgICAgIHJpYk1hc3Rlclt0XVtuIC0gMV0uY29vcmRzLnksXG4gICAgICAgICAgcmliTWFzdGVyW3RdW25dLmNvb3Jkcy54LFxuICAgICAgICAgIHJpYk1hc3Rlclt0XVtuXS5jb29yZHMueSxcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4Jywgc3RhcnRUZXh0LngpXG4gICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCBzdGFydFRleHQueSArIHNoaWZ0KVxuICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmb250LWZhbWlseScsICdyb2JvdG8nKVxuICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2UnLCAnI2ZmZmZmZicpXG4gICAgICAgIHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQgPSB2YWx1ZVRleHQudG9GaXhlZCgyKVxuICAgICAgICBpZiAodGhpcy5zaXplVGV4dFtuXS50ZXh0Q29udGVudCA8IDEpIHtcbiAgICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmb250LXNpemUnLCAnMC44ZW0nKVxuICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQgPSB0aGlzLnNpemVUZXh0W25dLnRleHRDb250ZW50LnN1YnN0cmluZyhcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICB0aGlzLnNpemVUZXh0W25dLnRleHRDb250ZW50Lmxlbmd0aCxcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZm9udC1zaXplJywgJzFlbScpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlLXdpZHRoJywgJzAuMjdweCcpXG4gICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnIzY2NjY2NicpXG4gICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlKFxuICAgICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICdyb3RhdGUoJyArIGFuZ2xlVGV4dCArICcgJyArIHN0YXJ0VGV4dC54ICsgJywnICsgc3RhcnRUZXh0LnkgKyAnKScsXG4gICAgICAgIClcblxuICAgICAgICAkKCcjYm94UmliJykuYXBwZW5kKHRoaXMuc2l6ZVRleHRbbl0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5yaWIgPSBmdW5jdGlvbiAoc2hpZnQgPSA1KSB7XG4gIGNvbnN0IHJpYk1hc3RlciA9IFtdXG4gIHJpYk1hc3Rlci5wdXNoKFtdKVxuICByaWJNYXN0ZXIucHVzaChbXSlcbiAgbGV0IGludGVyXG4gIGxldCBkaXN0YW5jZVxuICBsZXQgY3Jvc3NcbiAgZm9yIChjb25zdCBpIGluIHRoaXMuV0FMTFMpIHtcbiAgICBpZiAodGhpcy5XQUxMU1tpXS5lcXVhdGlvbnMuYmFzZSkge1xuICAgICAgcmliTWFzdGVyWzBdLnB1c2goW10pXG4gICAgICB0aGlzLnB1c2hUb1JpYk1hc3RlcihcbiAgICAgICAgcmliTWFzdGVyLFxuICAgICAgICAwLFxuICAgICAgICBpLFxuICAgICAgICBpLFxuICAgICAgICBpLFxuICAgICAgICAndXAnLFxuICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1swXSxcbiAgICAgICAgMCxcbiAgICAgIClcbiAgICAgIHJpYk1hc3RlclsxXS5wdXNoKFtdKVxuICAgICAgdGhpcy5wdXNoVG9SaWJNYXN0ZXIoXG4gICAgICAgIHJpYk1hc3RlcixcbiAgICAgICAgMSxcbiAgICAgICAgaSxcbiAgICAgICAgaSxcbiAgICAgICAgaSxcbiAgICAgICAgJ2Rvd24nLFxuICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1sxXSxcbiAgICAgICAgMCxcbiAgICAgIClcblxuICAgICAgZm9yIChjb25zdCBwIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgICAgaWYgKGkgIT0gcCAmJiB0aGlzLldBTExTW3BdLmVxdWF0aW9ucy5iYXNlKSB7XG4gICAgICAgICAgY3Jvc3MgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICB0aGlzLldBTExTW2ldLmVxdWF0aW9ucy5iYXNlLFxuICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5lcXVhdGlvbnMuYmFzZSxcbiAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgY3Jvc3MueCxcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5zdGFydC54LFxuICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmVuZC54LFxuICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgIGNyb3NzLnksXG4gICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uc3RhcnQueSxcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5lbmQueSxcbiAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGludGVyID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmVxdWF0aW9ucy51cCxcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5lcXVhdGlvbnMudXAsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uY29vcmRzWzBdLngsXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbM10ueCxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgIGludGVyLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMF0ueSxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1szXS55LFxuICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgaW50ZXIueCxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmNvb3Jkc1swXS54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzNdLngsXG4gICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci55LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzBdLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5jb29yZHNbM10ueSxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZGlzdGFuY2UgPVxuICAgICAgICAgICAgICAgIHRoaXMucVNWRy5tZWFzdXJlKHRoaXMuV0FMTFNbaV0uY29vcmRzWzBdLCBpbnRlcikgLyB0aGlzLm1ldGVyXG4gICAgICAgICAgICAgIHRoaXMucHVzaFRvUmliTWFzdGVyKFxuICAgICAgICAgICAgICAgIHJpYk1hc3RlcixcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICd1cCcsXG4gICAgICAgICAgICAgICAgaW50ZXIsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnRlciA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5lcXVhdGlvbnMudXAsXG4gICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uZXF1YXRpb25zLmRvd24sXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uY29vcmRzWzBdLngsXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbM10ueCxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgIGludGVyLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMF0ueSxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1szXS55LFxuICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgaW50ZXIueCxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmNvb3Jkc1sxXS54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzJdLngsXG4gICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci55LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzFdLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5jb29yZHNbMl0ueSxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZGlzdGFuY2UgPVxuICAgICAgICAgICAgICAgIHRoaXMucVNWRy5tZWFzdXJlKHRoaXMuV0FMTFNbaV0uY29vcmRzWzBdLCBpbnRlcikgLyB0aGlzLm1ldGVyXG4gICAgICAgICAgICAgIHRoaXMucHVzaFRvUmliTWFzdGVyKFxuICAgICAgICAgICAgICAgIHJpYk1hc3RlcixcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICd1cCcsXG4gICAgICAgICAgICAgICAgaW50ZXIsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnRlciA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5lcXVhdGlvbnMuZG93bixcbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5lcXVhdGlvbnMudXAsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uY29vcmRzWzFdLngsXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMl0ueCxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgIGludGVyLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMV0ueSxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1syXS55LFxuICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgaW50ZXIueCxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmNvb3Jkc1swXS54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzNdLngsXG4gICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci55LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzBdLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5jb29yZHNbM10ueSxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZGlzdGFuY2UgPVxuICAgICAgICAgICAgICAgIHRoaXMucVNWRy5tZWFzdXJlKHRoaXMuV0FMTFNbaV0uY29vcmRzWzFdLCBpbnRlcikgLyB0aGlzLm1ldGVyXG4gICAgICAgICAgICAgIHRoaXMucHVzaFRvUmliTWFzdGVyKFxuICAgICAgICAgICAgICAgIHJpYk1hc3RlcixcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwLFxuICAgICAgICAgICAgICAgICdkb3duJyxcbiAgICAgICAgICAgICAgICBpbnRlcixcbiAgICAgICAgICAgICAgICBkaXN0YW5jZS50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGludGVyID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmVxdWF0aW9ucy5kb3duLFxuICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmVxdWF0aW9ucy5kb3duLFxuICAgICAgICAgICAgICAnb2JqZWN0JyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgaW50ZXIueCxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW2ldLmNvb3Jkc1sxXS54LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uY29vcmRzWzJdLngsXG4gICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICBpbnRlci55LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbaV0uY29vcmRzWzFdLnksXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMl0ueSxcbiAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgIGludGVyLngsXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMU1twXS5jb29yZHNbMV0ueCxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmNvb3Jkc1syXS54LFxuICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgaW50ZXIueSxcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTW3BdLmNvb3Jkc1sxXS55LFxuICAgICAgICAgICAgICAgIHRoaXMuV0FMTFNbcF0uY29vcmRzWzJdLnksXG4gICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGRpc3RhbmNlID1cbiAgICAgICAgICAgICAgICB0aGlzLnFTVkcubWVhc3VyZSh0aGlzLldBTExTW2ldLmNvb3Jkc1sxXSwgaW50ZXIpIC8gdGhpcy5tZXRlclxuICAgICAgICAgICAgICB0aGlzLnB1c2hUb1JpYk1hc3RlcihcbiAgICAgICAgICAgICAgICByaWJNYXN0ZXIsXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgcCxcbiAgICAgICAgICAgICAgICAnZG93bicsXG4gICAgICAgICAgICAgICAgaW50ZXIsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UudG9GaXhlZCgyKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGlzdGFuY2UgPVxuICAgICAgICB0aGlzLnFTVkcubWVhc3VyZSh0aGlzLldBTExTW2ldLmNvb3Jkc1swXSwgdGhpcy5XQUxMU1tpXS5jb29yZHNbM10pIC9cbiAgICAgICAgdGhpcy5tZXRlclxuICAgICAgdGhpcy5wdXNoVG9SaWJNYXN0ZXIoXG4gICAgICAgIHJpYk1hc3RlcixcbiAgICAgICAgMCxcbiAgICAgICAgaSxcbiAgICAgICAgaSxcbiAgICAgICAgaSxcbiAgICAgICAgJ3VwJyxcbiAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbM10sXG4gICAgICAgIGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICApXG5cbiAgICAgIGRpc3RhbmNlID1cbiAgICAgICAgdGhpcy5xU1ZHLm1lYXN1cmUodGhpcy5XQUxMU1tpXS5jb29yZHNbMV0sIHRoaXMuV0FMTFNbaV0uY29vcmRzWzJdKSAvXG4gICAgICAgIHRoaXMubWV0ZXJcbiAgICAgIHRoaXMucHVzaFRvUmliTWFzdGVyKFxuICAgICAgICByaWJNYXN0ZXIsXG4gICAgICAgIDEsXG4gICAgICAgIGksXG4gICAgICAgIGksXG4gICAgICAgIGksXG4gICAgICAgICdkb3duJyxcbiAgICAgICAgdGhpcy5XQUxMU1tpXS5jb29yZHNbMl0sXG4gICAgICAgIGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBhIGluIHJpYk1hc3RlclswXSkge1xuICAgIHJpYk1hc3RlclswXVthXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gKGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKS50b0ZpeGVkKDIpXG4gICAgfSlcbiAgfVxuICBmb3IgKGNvbnN0IGEgaW4gcmliTWFzdGVyWzFdKSB7XG4gICAgcmliTWFzdGVyWzFdW2FdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpLnRvRml4ZWQoMilcbiAgICB9KVxuICB9XG5cbiAgY29uc3Qgc2l6ZVRleHQgPSBbXVxuICBpZiAoc2hpZnQgPT09IDUpIHtcbiAgICAkKCcjYm94UmliJykuZW1wdHkoKVxuICB9XG4gIGZvciAoY29uc3QgdCBpbiByaWJNYXN0ZXIpIHtcbiAgICBmb3IgKGNvbnN0IGEgaW4gcmliTWFzdGVyW3RdKSB7XG4gICAgICBmb3IgKGxldCBuID0gMTsgbiA8IHJpYk1hc3Rlclt0XVthXS5sZW5ndGg7IG4rKykge1xuICAgICAgICBpZiAocmliTWFzdGVyW3RdW2FdW24gLSAxXS53YWxsSW5kZXggPT09IHJpYk1hc3Rlclt0XVthXVtuXS53YWxsSW5kZXgpIHtcbiAgICAgICAgICBjb25zdCBlZGdlID0gcmliTWFzdGVyW3RdW2FdW25dLndhbGxJbmRleFxuICAgICAgICAgIGxldCBmb3VuZCA9IHRydWVcbiAgICAgICAgICBjb25zdCB2YWx1ZVRleHQgPSBNYXRoLmFicyhcbiAgICAgICAgICAgIHJpYk1hc3Rlclt0XVthXVtuIC0gMV0uZGlzdGFuY2UgLSByaWJNYXN0ZXJbdF1bYV1bbl0uZGlzdGFuY2UsXG4gICAgICAgICAgKVxuICAgICAgICAgIC8vIENMRUFSIFRPTyBMSVRUTEUgVkFMVUVcbiAgICAgICAgICBpZiAodmFsdWVUZXh0IDwgMC4xNSkge1xuICAgICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDTEVBUiAodGhpY2spIEJFVFdFRU4gQ1JPU1MgRURHRVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGZvdW5kICYmXG4gICAgICAgICAgICByaWJNYXN0ZXJbdF1bYV1bbiAtIDFdLmNyb3NzRWRnZSA9PT0gcmliTWFzdGVyW3RdW2FdW25dLmNyb3NzRWRnZSAmJlxuICAgICAgICAgICAgcmliTWFzdGVyW3RdW2FdW25dLmNyb3NzRWRnZSAhPSByaWJNYXN0ZXJbdF1bYV1bbl0ud2FsbEluZGV4XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENMRUFSIFNUQVJUIElOVE8gRURHRVxuICAgICAgICAgIGlmIChmb3VuZCAmJiByaWJNYXN0ZXJbdF1bYV0ubGVuZ3RoID4gMiAmJiBuID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBwb2x5Z29uID0gW11cbiAgICAgICAgICAgIGZvciAobGV0IHBwID0gMDsgcHAgPCA0OyBwcCsrKSB7XG4gICAgICAgICAgICAgIHBvbHlnb24ucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5XQUxMU1tyaWJNYXN0ZXJbdF1bYV1bbl0uY3Jvc3NFZGdlXS5jb29yZHNbcHBdLngsXG4gICAgICAgICAgICAgICAgeTogdGhpcy5XQUxMU1tyaWJNYXN0ZXJbdF1bYV1bbl0uY3Jvc3NFZGdlXS5jb29yZHNbcHBdLnksXG4gICAgICAgICAgICAgIH0pIC8vIEZPUiBaXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5xU1ZHLnJheUNhc3RpbmcocmliTWFzdGVyW3RdW2FdWzBdLmNvb3JkcywgcG9seWdvbikpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDTEVBUiBFTkQgSU5UTyBFREdFXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZm91bmQgJiZcbiAgICAgICAgICAgIHJpYk1hc3Rlclt0XVthXS5sZW5ndGggPiAyICYmXG4gICAgICAgICAgICBuID09PSByaWJNYXN0ZXJbdF1bYV0ubGVuZ3RoIC0gMVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgcG9seWdvbiA9IFtdXG4gICAgICAgICAgICBmb3IgKGxldCBwcCA9IDA7IHBwIDwgNDsgcHArKykge1xuICAgICAgICAgICAgICBwb2x5Z29uLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuV0FMTFNbcmliTWFzdGVyW3RdW2FdW24gLSAxXS5jcm9zc0VkZ2VdLmNvb3Jkc1twcF0ueCxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLldBTExTW3JpYk1hc3Rlclt0XVthXVtuIC0gMV0uY3Jvc3NFZGdlXS5jb29yZHNbcHBdLnksXG4gICAgICAgICAgICAgIH0pIC8vIEZPUiBaXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5yYXlDYXN0aW5nKFxuICAgICAgICAgICAgICAgIHJpYk1hc3Rlclt0XVthXVtyaWJNYXN0ZXJbdF1bYV0ubGVuZ3RoIC0gMV0uY29vcmRzLFxuICAgICAgICAgICAgICAgIHBvbHlnb24sXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICBsZXQgYW5nbGVUZXh0ID1cbiAgICAgICAgICAgICAgdGhpcy5XQUxMU1tyaWJNYXN0ZXJbdF1bYV1bbl0ud2FsbEluZGV4XS5hbmdsZSAqICgxODAgLyBNYXRoLlBJKVxuICAgICAgICAgICAgbGV0IHNoaWZ0VmFsdWUgPSAtc2hpZnRcbiAgICAgICAgICAgIGlmIChyaWJNYXN0ZXJbdF1bYV1bbiAtIDFdLnNpZGUgPT09ICdkb3duJykge1xuICAgICAgICAgICAgICBzaGlmdFZhbHVlID0gLXNoaWZ0VmFsdWUgKyAxMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFuZ2xlVGV4dCA+IDkwIHx8IGFuZ2xlVGV4dCA8IC04OSkge1xuICAgICAgICAgICAgICBhbmdsZVRleHQgLT0gMTgwXG4gICAgICAgICAgICAgIGlmIChyaWJNYXN0ZXJbdF1bYV1bbiAtIDFdLnNpZGUgPT09ICdkb3duJykge1xuICAgICAgICAgICAgICAgIHNoaWZ0VmFsdWUgPSAtc2hpZnRcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaGlmdFZhbHVlID0gLXNoaWZ0VmFsdWUgKyAxMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaXplVGV4dFtuXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAgICAgJ3RleHQnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRUZXh0ID0gdGhpcy5xU1ZHLm1pZGRsZShcbiAgICAgICAgICAgICAgcmliTWFzdGVyW3RdW2FdW24gLSAxXS5jb29yZHMueCxcbiAgICAgICAgICAgICAgcmliTWFzdGVyW3RdW2FdW24gLSAxXS5jb29yZHMueSxcbiAgICAgICAgICAgICAgcmliTWFzdGVyW3RdW2FdW25dLmNvb3Jkcy54LFxuICAgICAgICAgICAgICByaWJNYXN0ZXJbdF1bYV1bbl0uY29vcmRzLnksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBzaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIHN0YXJ0VGV4dC54KVxuICAgICAgICAgICAgc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3knLCBzdGFydFRleHQueSArIHNoaWZ0VmFsdWUpXG4gICAgICAgICAgICBzaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgICAgIHNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmb250LWZhbWlseScsICdyb2JvdG8nKVxuICAgICAgICAgICAgc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZScsICcjZmZmZmZmJylcbiAgICAgICAgICAgIHNpemVUZXh0W25dLnRleHRDb250ZW50ID0gdmFsdWVUZXh0LnRvRml4ZWQoMilcbiAgICAgICAgICAgIGlmIChzaXplVGV4dFtuXS50ZXh0Q29udGVudCA8IDEpIHtcbiAgICAgICAgICAgICAgc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZvbnQtc2l6ZScsICcwLjczZW0nKVxuICAgICAgICAgICAgICBzaXplVGV4dFtuXS50ZXh0Q29udGVudCA9IHNpemVUZXh0W25dLnRleHRDb250ZW50LnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIHNpemVUZXh0W25dLnRleHRDb250ZW50Lmxlbmd0aCxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZvbnQtc2l6ZScsICcwLjllbScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlLXdpZHRoJywgJzAuMnB4JylcbiAgICAgICAgICAgIHNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyM1NTU1NTUnKVxuICAgICAgICAgICAgc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICAndHJhbnNmb3JtJyxcbiAgICAgICAgICAgICAgJ3JvdGF0ZSgnICtcbiAgICAgICAgICAgICAgICBhbmdsZVRleHQgK1xuICAgICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgICAgc3RhcnRUZXh0LnggK1xuICAgICAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICAgICAgc3RhcnRUZXh0LnkgK1xuICAgICAgICAgICAgICAgICcpJyxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgJCgnI2JveFJpYicpLmFwcGVuZChzaXplVGV4dFtuXSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLmZvbmNfYnV0dG9uID0gZnVuY3Rpb24gKG1vZGVzZXR0aW5nLCBvcHRpb24pIHtcbiAgdGhpcy5zYXZlKClcblxuICAkKCcuc3ViJykuaGlkZSgpXG4gIHJhel9idXR0b24oKVxuICBpZiAob3B0aW9uICE9ICdzaW1wbGVTdGFpcicpIHtcbiAgICAkKCcjJyArIG1vZGVzZXR0aW5nKS5yZW1vdmVDbGFzcygnYnRuLWRlZmF1bHQnKVxuICAgICQoJyMnICsgbW9kZXNldHRpbmcpLmFkZENsYXNzKCdidG4tc3VjY2VzcycpXG4gIH1cbiAgdGhpcy5tb2RlID0gbW9kZXNldHRpbmdcbiAgdGhpcy5tb2RlT3B0aW9uID0gb3B0aW9uXG5cbiAgaWYgKHR5cGVvZiB0aGlzLmxpbmVJbnRlcnNlY3Rpb25QICE9ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5saW5lSW50ZXJzZWN0aW9uUC5yZW1vdmUoKVxuICAgIHRoaXMubGluZUludGVyc2VjdGlvblAgPSB1bmRlZmluZWRcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUuY2FycGVudHJ5Q2FsYyA9IGZ1bmN0aW9uIChcbiAgY2xhc3NPYmosXG4gIHR5cGVPYmosXG4gIHNpemVPYmosXG4gIHRoaWNrT2JqLFxuICBkaXZpZGVyT2JqID0gMTAsXG4pIHtcbiAgLy8gIFJFVFVSTiBQQVRIKHMpIEFSUkFZIEZPUiBPQkpFQ1QgKyBQUk9QRVJUWSBwYXJhbXMgPT4gYmluZEJveCAoZmFsc2UgPSBvcGVuIHNpZGVUb29sKSwgbW92ZSwgcmVzaXplLCByb3RhdGVcbiAgY29uc3QgY29uc3RydWMgPSBbXVxuICBjb25zdHJ1Yy5wYXJhbXMgPSB7fVxuICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IGZhbHNlXG4gIGNvbnN0cnVjLnBhcmFtcy5tb3ZlID0gZmFsc2VcbiAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IGZhbHNlXG4gIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdCA9IHt9XG4gIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aCA9IHsgbWluOiBmYWxzZSwgbWF4OiBmYWxzZSB9XG4gIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC5oZWlnaHQgPSB7IG1pbjogZmFsc2UsIG1heDogZmFsc2UgfVxuICBjb25zdHJ1Yy5wYXJhbXMucm90YXRlID0gZmFsc2VcblxuICBpZiAoY2xhc3NPYmogPT09ICdzb2NsZScpIHtcbiAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgIGNvbnN0cnVjLFxuICAgICAgJ00gJyArXG4gICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICcsJyArXG4gICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAnIEwgJyArXG4gICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICcsJyArXG4gICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICcgTCAnICtcbiAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAnLCcgK1xuICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAnIEwgJyArXG4gICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgJywnICtcbiAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICcgWicsXG4gICAgICAnIzVjYmE3OScsXG4gICAgICAnIzVjYmE3OScsXG4gICAgICAnJyxcbiAgICApXG4gIH1cblxuICBpZiAoY2xhc3NPYmogPT09ICduZXR3b3JrJykge1xuICAgIGlmICh0eXBlT2JqID09PSAncmoxMScpIHtcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5iaW5kQm94ID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLm1vdmUgPSB0cnVlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gZmFsc2VcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yb3RhdGUgPSBmYWxzZVxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMwMDAnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xMCw1IGwwLC0xMCBtMjAsMCBsMCwxMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDUgdiA3JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0xMCw1IGggMjAnLCAnbm9uZScsICcjMzMzJywgJycpXG5cbiAgICAgIGNvbnN0cnVjLnB1c2goe1xuICAgICAgICB0ZXh0OiAnUkoxMScsXG4gICAgICAgIHg6ICcwJyxcbiAgICAgICAgeTogJy01JyxcbiAgICAgICAgZmlsbDogJyMzMzMzMzMnLFxuICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgZm9udFNpemU6ICcwLjVlbScsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAnMC40cHgnLFxuICAgICAgfSlcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy53aWR0aCA9IDM2XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMzZcbiAgICAgIGNvbnN0cnVjLmZhbWlseSA9ICdzdGljaydcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdyajQ1Jykge1xuICAgICAgY29uc3RydWMucGFyYW1zLmJpbmRCb3ggPSB0cnVlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMubW92ZSA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemUgPSBmYWxzZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJvdGF0ZSA9IGZhbHNlXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgIHRoaXMucVNWRy5jaXJjbGVQYXRoKDAsIDAsIDE2KSxcbiAgICAgICAgJyNmZmYnLFxuICAgICAgICAnIzAwMCcsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtLTEwLDUgbDAsLTEwIG0yMCwwIGwwLDEwJywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIDAsNSB2IDcnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20gLTEwLDUgaCAyMCcsICdub25lJywgJyMzMzMnLCAnJylcblxuICAgICAgY29uc3RydWMucHVzaCh7XG4gICAgICAgIHRleHQ6ICdSSjQ1JyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnLTUnLFxuICAgICAgICBmaWxsOiAnIzMzMzMzMycsXG4gICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzAuNWVtJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcwLjRweCcsXG4gICAgICB9KVxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gMzZcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAzNlxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ2NvYXgnKSB7XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5tb3ZlID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IGZhbHNlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucm90YXRlID0gZmFsc2VcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMDAwJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20tMTAsNSBsMC0xMCBtMjAsMCBsMCwxMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS03LC01IGwwLDcgbDE0LDAgbDAsLTcnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20gMCw1IHYgNycsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAtMTAsNSBoIDIwJywgJ25vbmUnLCAnIzMzMycsICcnKVxuXG4gICAgICBjb25zdHJ1Yy5wdXNoKHtcbiAgICAgICAgdGV4dDogJ1RWJyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnLTUnLFxuICAgICAgICBmaWxsOiAnIzMzMzMzMycsXG4gICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzAuNWVtJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcwLjRweCcsXG4gICAgICB9KVxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gMzZcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAzNlxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChjbGFzc09iaiA9PT0gJ2VsZWN0cmljYWwnKSB7XG4gICAgaWYgKHR5cGVPYmogPT09ICdvdXRsZXQnKSB7XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5tb3ZlID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IGZhbHNlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucm90YXRlID0gZmFsc2VcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMDAwJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNIDEwLC02IGEgMTAsMTAgMCAwIDEgLTUsOCAxMCwxMCAwIDAgMSAtMTAsMCAxMCwxMCAwIDAgMSAtNSwtOCcsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDMgdiA3JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0xMCw0IGggMjAnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuXG4gICAgaWYgKHR5cGVPYmogPT09ICdzd2l0Y2gnKSB7XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5tb3ZlID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IGZhbHNlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucm90YXRlID0gZmFsc2VcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMzMzJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgIHRoaXMucVNWRy5jaXJjbGVQYXRoKC0yLCA0LCA1KSxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzMzMycsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIDAsMCA1LC05JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gMzZcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAzNlxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChjbGFzc09iaiA9PT0gJ2Rvb3JXaW5kb3cnKSB7XG4gICAgaWYgKHR5cGVPYmogPT09ICdzaW1wbGUnKSB7XG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgWicsXG4gICAgICAgICcjY2NjJyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnJyxcbiAgICAgIClcblxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAoLXNpemVPYmogLSB0aGlja09iaiAvIDIpICtcbiAgICAgICAgICAnICBBJyArXG4gICAgICAgICAgc2l6ZU9iaiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBzaXplT2JqICtcbiAgICAgICAgICAnIDAgMCwxICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgdGhpcy5jb2xvcldhbGwsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aCA9IHsgbWluOiA0MCwgbWF4OiAxMjAgfVxuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ2RvdWJsZScpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBaJyxcbiAgICAgICAgJyNjY2MnLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgICgtc2l6ZU9iaiAvIDIgLSB0aGlja09iaiAvIDIpICtcbiAgICAgICAgICAnICBBJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcgMCAwLDEgMCwnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgIHRoaXMuY29sb3JXYWxsLFxuICAgICAgICAnJyxcbiAgICAgIClcblxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgKC1zaXplT2JqIC8gMiAtIHRoaWNrT2JqIC8gMikgK1xuICAgICAgICAgICcgIEEnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJyAwIDAsMCAwLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgdGhpcy5jb2xvcldhbGwsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aCA9IHsgbWluOiA0MCwgbWF4OiAxNjAgfVxuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ3BvY2tldCcpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgICgtKHRoaWNrT2JqIC8gMikgLSA0KSArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAoLSh0aGlja09iaiAvIDIpIC0gNCkgK1xuICAgICAgICAgICcgWicsXG4gICAgICAgICcjY2NjJyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnbm9uZScsXG4gICAgICApXG5cbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIE0gJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMixcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzQ5NDY0NicsXG4gICAgICAgICc1IDUnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgICgtdGhpY2tPYmogLyAyIC0gNSkgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICArc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgKC10aGlja09iaiAvIDIgLSA1KSArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgICtzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIFonLFxuICAgICAgICAndXJsKCNoYXRjaCknLFxuICAgICAgICAnIzQ5NDY0NicsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aCA9IHsgbWluOiA2MCwgbWF4OiAyMDAgfVxuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ2FwZXJ0dXJlJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIFonLFxuICAgICAgICAnI2NjYycsXG4gICAgICAgICcjNDk0NjQ2JyxcbiAgICAgICAgJzUsNScsXG4gICAgICApXG5cbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC0odGhpY2tPYmogLyAyKSArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAoLXNpemVPYmogLyAyICsgNSkgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgKC1zaXplT2JqIC8gMiArIDUpICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC0odGhpY2tPYmogLyAyKSArXG4gICAgICAgICAgJyBaJyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzQ5NDY0NicsXG4gICAgICAgICdub25lJyxcbiAgICAgIClcblxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAoc2l6ZU9iaiAvIDIgLSA1KSArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtKHRoaWNrT2JqIC8gMikgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAoc2l6ZU9iaiAvIDIgLSA1KSArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtKHRoaWNrT2JqIC8gMikgK1xuICAgICAgICAgICcgWicsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyM0OTQ2NDYnLFxuICAgICAgICAnbm9uZScsXG4gICAgICApXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZUxpbWl0LndpZHRoID0geyBtaW46IDQwLCBtYXg6IDUwMCB9XG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAnZml4Jykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsLTIgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsMiBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLDIgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywtMiBaJyxcbiAgICAgICAgJyNjY2MnLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBNICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyNjY2MnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemUgPSB0cnVlXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplTGltaXQud2lkdGggPSB7IG1pbjogMzAsIG1heDogMzAwIH1cbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdmbGFwJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsLTIgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsMiBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLDIgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywtMiBaJyxcbiAgICAgICAgJyNjY2MnLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBNICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyNjY2MnLFxuICAgICAgICAnJyxcbiAgICAgIClcblxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgICgtc2l6ZU9iaiAvIDIgKyBzaXplT2JqICogMC44NjYpICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgICgtc2l6ZU9iaiAvIDIgLSB0aGlja09iaiAvIDIpICtcbiAgICAgICAgICAnICBBJyArXG4gICAgICAgICAgc2l6ZU9iaiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBzaXplT2JqICtcbiAgICAgICAgICAnIDAgMCwxICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgdGhpcy5jb2xvcldhbGwsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZSA9IHRydWVcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aCA9IHsgbWluOiAyMCwgbWF4OiAxMDAgfVxuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ3R3aW4nKSB7XG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywtMiBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywyIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsMiBMICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLC0yIFonLFxuICAgICAgICAnI2NjYycsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJycsXG4gICAgICApXG5cbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIE0gJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMixcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnI2NjYycsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgKC1zaXplT2JqIC8gMiArIChzaXplT2JqIC8gMikgKiAwLjg2NikgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgKC1zaXplT2JqIC8gNCAtIHRoaWNrT2JqIC8gMikgK1xuICAgICAgICAgICcgIEEnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJyAwIDAsMSAwLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgdGhpcy5jb2xvcldhbGwsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNICcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAoc2l6ZU9iaiAvIDIgKyAoLXNpemVPYmogLyAyKSAqIDAuODY2KSArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAoLXNpemVPYmogLyA0IC0gdGhpY2tPYmogLyAyKSArXG4gICAgICAgICAgJyAgQScgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAnIDAgMCwwIDAsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMixcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICB0aGlzLmNvbG9yV2FsbCxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZUxpbWl0LndpZHRoID0geyBtaW46IDQwLCBtYXg6IDIwMCB9XG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAnYmF5Jykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBMICcgK1xuICAgICAgICAgIC1zaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTSAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICB0aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICAtdGhpY2tPYmogLyAyLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICcjY2NjJyxcbiAgICAgICAgJycsXG4gICAgICApXG5cbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLC0yIEwgJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLDAgTCAyLDAgTCAyLDIgTCAzLDIgTCAzLC0yIFonLFxuICAgICAgICAnI2NjYycsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJycsXG4gICAgICApXG5cbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gLTIsMSBMIC0yLDMgTCAnICtcbiAgICAgICAgICBzaXplT2JqIC8gMiArXG4gICAgICAgICAgJywzIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsMSBMIC0xLDEgTCAtMSwtMSBMIC0yLC0xIFonLFxuICAgICAgICAnI2NjYycsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gdHJ1ZVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZUxpbWl0LndpZHRoID0geyBtaW46IDYwLCBtYXg6IDMwMCB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGNsYXNzT2JqID09PSAnbWVhc3VyZScpIHtcbiAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgIGNvbnN0cnVjLFxuICAgICAgJ00tJyArXG4gICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgJywwIGwxMCwtMTAgbDAsOCBsJyArXG4gICAgICAgIChzaXplT2JqIC0gMjApICtcbiAgICAgICAgJywwIGwwLC04IGwxMCwxMCBsLTEwLDEwIGwwLC04IGwtJyArXG4gICAgICAgIChzaXplT2JqIC0gMjApICtcbiAgICAgICAgJywwIGwwLDggWicsXG4gICAgICAnIzcyOWVlYicsXG4gICAgICAnbm9uZScsXG4gICAgICAnJyxcbiAgICApXG4gIH1cblxuICBpZiAoY2xhc3NPYmogPT09ICdib3VuZGluZ0JveCcpIHtcbiAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgIGNvbnN0cnVjLFxuICAgICAgJ00nICtcbiAgICAgICAgKC1zaXplT2JqIC8gMiAtIDEwKSArXG4gICAgICAgICcsJyArXG4gICAgICAgICgtdGhpY2tPYmogLyAyIC0gMTApICtcbiAgICAgICAgJyBMJyArXG4gICAgICAgIChzaXplT2JqIC8gMiArIDEwKSArXG4gICAgICAgICcsJyArXG4gICAgICAgICgtdGhpY2tPYmogLyAyIC0gMTApICtcbiAgICAgICAgJyBMJyArXG4gICAgICAgIChzaXplT2JqIC8gMiArIDEwKSArXG4gICAgICAgICcsJyArXG4gICAgICAgICh0aGlja09iaiAvIDIgKyAxMCkgK1xuICAgICAgICAnIEwnICtcbiAgICAgICAgKC1zaXplT2JqIC8gMiAtIDEwKSArXG4gICAgICAgICcsJyArXG4gICAgICAgICh0aGlja09iaiAvIDIgKyAxMCkgK1xuICAgICAgICAnIFonLFxuICAgICAgJ25vbmUnLFxuICAgICAgJyNhYWEnLFxuICAgICAgJycsXG4gICAgKVxuXG4gICAgLy8gY29uc3RydWMucHVzaCh7J3BhdGgnOlwiTVwiK2RpdmlkZXJPYmpbMF0ueCtcIixcIitkaXZpZGVyT2JqWzBdLnkrXCIgTFwiK2RpdmlkZXJPYmpbMV0ueCtcIixcIitkaXZpZGVyT2JqWzFdLnkrXCIgTFwiK2RpdmlkZXJPYmpbMl0ueCtcIixcbiAgICAvLyBcIitkaXZpZGVyT2JqWzJdLnkrXCIgTFwiK2RpdmlkZXJPYmpbM10ueCtcIixcIitkaXZpZGVyT2JqWzNdLnkrXCIgWlwiLCAnZmlsbCc6J25vbmUnLCAnc3Ryb2tlJzpcIiMwMDBcIiwgJ3N0cm9rZURhc2hBcnJheSc6ICcnfSk7XG4gIH1cblxuICAvL3R5cGVPYmogPSBjb2xvciAgZGl2aWRlck9iaiA9IHRleHRcbiAgaWYgKGNsYXNzT2JqID09PSAndGV4dCcpIHtcbiAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMubW92ZSA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMucm90YXRlID0gdHJ1ZVxuICAgIGNvbnN0cnVjLnB1c2goe1xuICAgICAgdGV4dDogZGl2aWRlck9iai50ZXh0LFxuICAgICAgeDogJzAnLFxuICAgICAgeTogJzAnLFxuICAgICAgZmlsbDogdHlwZU9iaixcbiAgICAgIHN0cm9rZTogdHlwZU9iaixcbiAgICAgIGZvbnRTaXplOiBkaXZpZGVyT2JqLnNpemUgKyAncHgnLFxuICAgICAgc3Ryb2tlV2lkdGg6ICcwcHgnLFxuICAgIH0pXG4gIH1cblxuICBpZiAoY2xhc3NPYmogPT09ICdzdGFpcicpIHtcbiAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMubW92ZSA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gdHJ1ZVxuICAgIGNvbnN0cnVjLnBhcmFtcy5yb3RhdGUgPSB0cnVlXG4gICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gNjBcbiAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMTgwXG4gICAgaWYgKHR5cGVPYmogPT09ICdzaW1wbGVTdGFpcicpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gJyArXG4gICAgICAgICAgLXNpemVPYmogLyAyICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIC10aGlja09iaiAvIDIgK1xuICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgdGhpY2tPYmogLyAyICtcbiAgICAgICAgICAnIEwgJyArXG4gICAgICAgICAgc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICcsJyArXG4gICAgICAgICAgLXRoaWNrT2JqIC8gMiArXG4gICAgICAgICAgJyBaJyxcbiAgICAgICAgJyNmZmYnLFxuICAgICAgICAnIzAwMCcsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBjb25zdCBoZWlnaHRTdGVwID0gdGhpY2tPYmogLyBkaXZpZGVyT2JqXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRpdmlkZXJPYmogKyAxOyBpKyspIHtcbiAgICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgICAgY29uc3RydWMsXG4gICAgICAgICAgJ00gJyArXG4gICAgICAgICAgICAtc2l6ZU9iaiAvIDIgK1xuICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICgtdGhpY2tPYmogLyAyICsgaSAqIGhlaWdodFN0ZXApICtcbiAgICAgICAgICAgICcgTCAnICtcbiAgICAgICAgICAgIHNpemVPYmogLyAyICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICAoLXRoaWNrT2JqIC8gMiArIGkgKiBoZWlnaHRTdGVwKSxcbiAgICAgICAgICAnbm9uZScsXG4gICAgICAgICAgJyMwMDAnLFxuICAgICAgICAgICdub25lJyxcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29uc3RydWMucGFyYW1zLnJlc2l6ZUxpbWl0LndpZHRoID0geyBtaW46IDQwLCBtYXg6IDIwMCB9XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplTGltaXQuaGVpZ2h0ID0geyBtaW46IDQwLCBtYXg6IDQwMCB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGNsYXNzT2JqID09PSAnZW5lcmd5Jykge1xuICAgIGNvbnN0cnVjLnBhcmFtcy5iaW5kQm94ID0gdHJ1ZVxuICAgIGNvbnN0cnVjLnBhcmFtcy5tb3ZlID0gdHJ1ZVxuICAgIGNvbnN0cnVjLnBhcmFtcy5yZXNpemUgPSBmYWxzZVxuICAgIGNvbnN0cnVjLnBhcmFtcy5yb3RhdGUgPSBmYWxzZVxuICAgIGlmICh0eXBlT2JqID09PSAnZ3RsJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnbSAtMjAsLTIwIGwgNDAsMCBsMCw0MCBsLTQwLDAgWicsXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIGNvbnN0cnVjLnB1c2goe1xuICAgICAgICB0ZXh0OiAnR1RMJyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnNScsXG4gICAgICAgIGZpbGw6ICcjMzMzMzMzJyxcbiAgICAgICAgc3Ryb2tlOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnMC45ZW0nLFxuICAgICAgICBzdHJva2VXaWR0aDogJzAuNHB4JyxcbiAgICAgIH0pXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSA0MFxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDQwXG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAnc3dpdGNoJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoLTIsIDQsIDUpLFxuICAgICAgICAnbm9uZScsXG4gICAgICAgICcjMzMzJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20gMCwwIDUsLTknLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAnZG91YmxlU3dpdGNoJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgNCksXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAyLC0zIDUsLTggMywyJywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0yLDMgLTUsOCAtMywtMicsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy53aWR0aCA9IDM2XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMzZcbiAgICAgIGNvbnN0cnVjLmZhbWlseSA9ICdzdGljaydcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdkaW1tZXInKSB7XG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgIHRoaXMucVNWRy5jaXJjbGVQYXRoKDAsIDAsIDE2KSxcbiAgICAgICAgJyNmZmYnLFxuICAgICAgICAnIzMzMycsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgtMiwgNCwgNSksXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDAgNSwtOScsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnTSAtMiwtNiBMIDEwLC00IEwtMiwtMiBaJywgJ25vbmUnLCAnIzMzMycsICcnKVxuXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAncGx1ZycpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMDAwJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNIDEwLC02IGEgMTAsMTAgMCAwIDEgLTUsOCAxMCwxMCAwIDAgMSAtMTAsMCAxMCwxMCAwIDAgMSAtNSwtOCcsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDMgdiA3JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0xMCw0IGggMjAnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAncGx1ZzIwJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMwMDAnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ00gMTAsLTYgYSAxMCwxMCAwIDAgMSAtNSw4IDEwLDEwIDAgMCAxIC0xMCwwIDEwLDEwIDAgMCAxIC01LC04JyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzMzMycsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIDAsMyB2IDcnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20gLTEwLDQgaCAyMCcsICdub25lJywgJyMzMzMnLCAnJylcblxuICAgICAgY29uc3RydWMucHVzaCh7XG4gICAgICAgIHRleHQ6ICcyMEEnLFxuICAgICAgICB4OiAnMCcsXG4gICAgICAgIHk6ICctNScsXG4gICAgICAgIGZpbGw6ICcjMzMzMzMzJyxcbiAgICAgICAgc3Ryb2tlOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnMC42NWVtJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcwLjRweCcsXG4gICAgICB9KVxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gMzZcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAzNlxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cbiAgICBpZiAodHlwZU9iaiA9PT0gJ3BsdWczMicpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMDAwJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgICdNIDEwLC02IGEgMTAsMTAgMCAwIDEgLTUsOCAxMCwxMCAwIDAgMSAtMTAsMCAxMCwxMCAwIDAgMSAtNSwtOCcsXG4gICAgICAgICdub25lJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDMgdiA3JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0xMCw0IGggMjAnLCAnbm9uZScsICcjMzMzJywgJycpXG5cbiAgICAgIGNvbnN0cnVjLnB1c2goe1xuICAgICAgICB0ZXh0OiAnMzJBJyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnLTUnLFxuICAgICAgICBmaWxsOiAnIzMzMzMzMycsXG4gICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzAuNjVlbScsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAnMC40cHgnLFxuICAgICAgfSlcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy53aWR0aCA9IDM2XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMzZcbiAgICAgIGNvbnN0cnVjLmZhbWlseSA9ICdzdGljaydcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdyb29mTGlnaHQnKSB7XG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgIHRoaXMucVNWRy5jaXJjbGVQYXRoKDAsIDAsIDE2KSxcbiAgICAgICAgJyNmZmYnLFxuICAgICAgICAnIzAwMCcsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAtOCwtOCBMIDgsOCBNIC04LDggTCA4LC04JyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzMzMycsXG4gICAgICAgICcnLFxuICAgICAgKVxuXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnZnJlZSdcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICd3YWxsTGlnaHQnKSB7XG4gICAgICBwdXNoVG9Db25zdHJ1YyhcbiAgICAgICAgY29uc3RydWMsXG4gICAgICAgIHRoaXMucVNWRy5jaXJjbGVQYXRoKDAsIDAsIDE2KSxcbiAgICAgICAgJyNmZmYnLFxuICAgICAgICAnIzAwMCcsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnTSAtOCwtOCBMIDgsOCBNIC04LDggTCA4LC04JyxcbiAgICAgICAgJ25vbmUnLFxuICAgICAgICAnIzMzMycsXG4gICAgICAgICcnLFxuICAgICAgKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdNIC0xMCwxMCBMIDEwLDEwJywgJ25vbmUnLCAnIzMzMycsICcnKVxuXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSAzNlxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDM2XG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnc3RpY2snXG4gICAgfVxuICAgIGlmICh0eXBlT2JqID09PSAnd3d3Jykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICAnbSAtMjAsLTIwIGwgNDAsMCBsMCw0MCBsLTQwLDAgWicsXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMzMzMnLFxuICAgICAgICAnJyxcbiAgICAgIClcblxuICAgICAgY29uc3RydWMucHVzaCh7XG4gICAgICAgIHRleHQ6ICdAJyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnNCcsXG4gICAgICAgIGZpbGw6ICcjMzMzMzMzJyxcbiAgICAgICAgc3Ryb2tlOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnMS4yZW0nLFxuICAgICAgICBzdHJva2VXaWR0aDogJzAuNHB4JyxcbiAgICAgIH0pXG4gICAgICBjb25zdHJ1Yy5wYXJhbXMud2lkdGggPSA0MFxuICAgICAgY29uc3RydWMucGFyYW1zLmhlaWdodCA9IDQwXG4gICAgICBjb25zdHJ1Yy5mYW1pbHkgPSAnZnJlZSdcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdyajQ1Jykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMwMDAnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xMCw1IGwwLC0xMCBtMjAsMCBsMCwxMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAwLDUgdiA3JywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtIC0xMCw1IGggMjAnLCAnbm9uZScsICcjMzMzJywgJycpXG5cbiAgICAgIGNvbnN0cnVjLnB1c2goe1xuICAgICAgICB0ZXh0OiAnUko0NScsXG4gICAgICAgIHg6ICcwJyxcbiAgICAgICAgeTogJy01JyxcbiAgICAgICAgZmlsbDogJyMzMzMzMzMnLFxuICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgZm9udFNpemU6ICcwLjVlbScsXG4gICAgICAgIHN0cm9rZVdpZHRoOiAnMC40cHgnLFxuICAgICAgfSlcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy53aWR0aCA9IDM2XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMzZcbiAgICAgIGNvbnN0cnVjLmZhbWlseSA9ICdzdGljaydcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICd0dicpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgdGhpcy5xU1ZHLmNpcmNsZVBhdGgoMCwgMCwgMTYpLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMDAwJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20tMTAsNSBsMC0xMCBtMjAsMCBsMCwxMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS03LC01IGwwLDcgbDE0LDAgbDAsLTcnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20gMCw1IHYgNycsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbSAtMTAsNSBoIDIwJywgJ25vbmUnLCAnIzMzMycsICcnKVxuXG4gICAgICBjb25zdHJ1Yy5wdXNoKHtcbiAgICAgICAgdGV4dDogJ1RWJyxcbiAgICAgICAgeDogJzAnLFxuICAgICAgICB5OiAnLTUnLFxuICAgICAgICBmaWxsOiAnIzMzMzMzMycsXG4gICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzAuNWVtJyxcbiAgICAgICAgc3Ryb2tlV2lkdGg6ICcwLjRweCcsXG4gICAgICB9KVxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gMzZcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAzNlxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cblxuICAgIGlmICh0eXBlT2JqID09PSAnaGVhdGVyJykge1xuICAgICAgcHVzaFRvQ29uc3RydWMoXG4gICAgICAgIGNvbnN0cnVjLFxuICAgICAgICB0aGlzLnFTVkcuY2lyY2xlUGF0aCgwLCAwLCAxNiksXG4gICAgICAgICcjZmZmJyxcbiAgICAgICAgJyMwMDAnLFxuICAgICAgICAnJyxcbiAgICAgIClcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xNSwtNCBsMzAsMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xNCwtOCBsMjgsMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xMSwtMTIgbDIyLDAnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20tMTYsMCBsMzIsMCcsICdub25lJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnbS0xNSw0IGwzMCwwJywgJ25vbmUnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdtLTE0LDggbDI4LDAnLCAnbm9uZScsICcjMzMzJywgJycpXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ20tMTEsMTIgbDIyLDAnLCAnbm9uZScsICcjMzMzJywgJycpXG5cbiAgICAgIGNvbnN0cnVjLnBhcmFtcy53aWR0aCA9IDM2XG4gICAgICBjb25zdHJ1Yy5wYXJhbXMuaGVpZ2h0ID0gMzZcbiAgICAgIGNvbnN0cnVjLmZhbWlseSA9ICdzdGljaydcbiAgICB9XG4gICAgaWYgKHR5cGVPYmogPT09ICdyYWRpYXRvcicpIHtcbiAgICAgIHB1c2hUb0NvbnN0cnVjKFxuICAgICAgICBjb25zdHJ1YyxcbiAgICAgICAgJ20gLTIwLC0xMCBsIDQwLDAgbDAsMjAgbC00MCwwIFonLFxuICAgICAgICAnI2ZmZicsXG4gICAgICAgICcjMzMzJyxcbiAgICAgICAgJycsXG4gICAgICApXG4gICAgICBwdXNoVG9Db25zdHJ1Yyhjb25zdHJ1YywgJ00gLTE1LC0xMCBMIC0xNSwxMCcsICcjZmZmJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnTSAtMTAsLTEwIEwgLTEwLDEwJywgJyNmZmYnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdNIC01LC0xMCBMIC01LDEwJywgJyNmZmYnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdNIC0wLC0xMCBMIC0wLDEwJywgJyNmZmYnLCAnIzMzMycsICcnKVxuICAgICAgcHVzaFRvQ29uc3RydWMoY29uc3RydWMsICdNIDUsLTEwIEwgNSwxMCcsICcjZmZmJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnTSAxMCwtMTAgTCAxMCwxMCcsICcjZmZmJywgJyMzMzMnLCAnJylcbiAgICAgIHB1c2hUb0NvbnN0cnVjKGNvbnN0cnVjLCAnTSAxNSwtMTAgTCAxNSwxMCcsICcjZmZmJywgJyMzMzMnLCAnJylcblxuICAgICAgY29uc3RydWMucGFyYW1zLndpZHRoID0gNDBcbiAgICAgIGNvbnN0cnVjLnBhcmFtcy5oZWlnaHQgPSAyMFxuICAgICAgY29uc3RydWMuZmFtaWx5ID0gJ3N0aWNrJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChjbGFzc09iaiA9PT0gJ2Z1cm5pdHVyZScpIHtcbiAgICBjb25zdHJ1Yy5wYXJhbXMuYmluZEJveCA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMubW92ZSA9IHRydWVcbiAgICBjb25zdHJ1Yy5wYXJhbXMucmVzaXplID0gdHJ1ZVxuICAgIGNvbnN0cnVjLnBhcmFtcy5yb3RhdGUgPSB0cnVlXG4gIH1cblxuICByZXR1cm4gY29uc3RydWNcbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLnNldEJlc3RFcVBvaW50ID0gZnVuY3Rpb24gKFxuICBiZXN0RXFQb2ludCxcbiAgZGlzdGFuY2UsXG4gIGluZGV4LFxuICB4LFxuICB5LFxuICB4MSxcbiAgeTEsXG4gIHgyLFxuICB5MixcbiAgd2F5LFxuKSB7XG4gIGJlc3RFcVBvaW50LmRpc3RhbmNlID0gZGlzdGFuY2VcbiAgYmVzdEVxUG9pbnQubm9kZSA9IGluZGV4XG4gIGJlc3RFcVBvaW50LnggPSB4XG4gIGJlc3RFcVBvaW50LnkgPSB5XG4gIGJlc3RFcVBvaW50LngxID0geDFcbiAgYmVzdEVxUG9pbnQueTEgPSB5MVxuICBiZXN0RXFQb2ludC54MiA9IHgyXG4gIGJlc3RFcVBvaW50LnkyID0geTJcbiAgYmVzdEVxUG9pbnQud2F5ID0gd2F5XG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5wdXNoVG9SaWJNYXN0ZXIgPSBmdW5jdGlvbiAoXG4gIHJpYk1hc3RlcixcbiAgZmlyc3RJbmRleCxcbiAgc2Vjb25kSW5kZXgsXG4gIHdhbGxJbmRleCxcbiAgY3Jvc3NFZGdlLFxuICBzaWRlLFxuICBjb29yZHMsXG4gIGRpc3RhbmNlLFxuKSB7XG4gIHJpYk1hc3RlcltmaXJzdEluZGV4XVtzZWNvbmRJbmRleF0ucHVzaCh7XG4gICAgd2FsbEluZGV4OiB3YWxsSW5kZXgsXG4gICAgY3Jvc3NFZGdlOiBjcm9zc0VkZ2UsXG4gICAgc2lkZTogc2lkZSxcbiAgICBjb29yZHM6IGNvb3JkcyxcbiAgICBkaXN0YW5jZTogZGlzdGFuY2UsXG4gIH0pXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZURvd25fbW9kZV9zZWxlY3QgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ3NlbGVjdF9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJyAmJlxuICAgICh0aGlzLmJpbmRlci50eXBlID09ICdzZWdtZW50JyB8fFxuICAgICAgdGhpcy5iaW5kZXIudHlwZSA9PSAnbm9kZScgfHxcbiAgICAgIHRoaXMuYmluZGVyLnR5cGUgPT0gJ29iaicgfHxcbiAgICAgIHRoaXMuYmluZGVyLnR5cGUgPT0gJ2JvdW5kaW5nQm94JylcbiAgKSB7XG4gICAgLy8gUkVWSUVXOiBJcyB0aGlzIHNhZmUgdG8gZG8gaGVyZT8gSG93IGlzIHRoZSBzdWJzZXF1ZW50IG1vdXNlIG1vdmUgZWZmZWN0ZWQ/XG4gICAgdGhpcy5tb2RlID0gJ2JpbmRfbW9kZSdcblxuICAgIGlmICh0aGlzLmJpbmRlci50eXBlID09ICdvYmonKSB7XG4gICAgICB0aGlzLmFjdGlvbiA9IDFcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iaW5kZXIudHlwZSA9PSAnYm91bmRpbmdCb3gnKSB7XG4gICAgICB0aGlzLmFjdGlvbiA9IDFcbiAgICB9XG5cbiAgICAvLyBJTklUIEZPUiBIRUxQIEJJTkRFUiBOT0RFIE1PVklORyBIIFYgKE1PVVNFIERPV04pXG4gICAgaWYgKHRoaXMuYmluZGVyLnR5cGUgPT0gJ25vZGUnKSB7XG4gICAgICAkKCcjYm94U2NhbGUnKS5oaWRlKDEwMClcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmJpbmRlci5kYXRhXG4gICAgICB0aGlzLnBveCA9IG5vZGUueFxuICAgICAgdGhpcy5wb3kgPSBub2RlLnlcbiAgICAgIGNvbnN0IG5vZGVDb250cm9sID0geyB4OiB0aGlzLnBveCwgeTogdGhpcy5wb3kgfVxuXG4gICAgICAvLyBERVRFUk1JTkFURSBESVNUQU5DRSBPRiBPUFBPU0VEIE5PREUgT04gRURHRShzKSBQQVJFTlQocykgT0YgVEhJUyBOT0RFICEhISEgTk9ERSAxIC0tIE5PREUgMiBTWVNURSUgOi0oXG4gICAgICB0aGlzLndhbGxMaXN0T2JqID0gW11cbiAgICAgIHZhciBvYmpXYWxsXG4gICAgICB0aGlzLndhbGxMaXN0UnVuID0gW11cbiAgICAgIGZvciAobGV0IGVlID0gdGhpcy5XQUxMUy5sZW5ndGggLSAxOyBlZSA+IC0xOyBlZS0tKSB7XG4gICAgICAgIC8vIFNFQVJDSCBNT1NUIFlPVU5HIFdBTEwgQ09PUkRTIElOIE5PREUgQklOREVSXG4gICAgICAgIGlmIChcbiAgICAgICAgICBpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1tlZV0uc3RhcnQsIG5vZGVDb250cm9sKSB8fFxuICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2VlXS5lbmQsIG5vZGVDb250cm9sKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLndhbGxMaXN0UnVuLnB1c2godGhpcy5XQUxMU1tlZV0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMud2FsbExpc3RSdW5bMF0uY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNPYmplY3RzRXF1YWxzKHRoaXMud2FsbExpc3RSdW5bMF0uY2hpbGQuc3RhcnQsIG5vZGVDb250cm9sKSB8fFxuICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh0aGlzLndhbGxMaXN0UnVuWzBdLmNoaWxkLmVuZCwgbm9kZUNvbnRyb2wpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMud2FsbExpc3RSdW4ucHVzaCh0aGlzLndhbGxMaXN0UnVuWzBdLmNoaWxkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy53YWxsTGlzdFJ1blswXS5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNPYmplY3RzRXF1YWxzKHRoaXMud2FsbExpc3RSdW5bMF0ucGFyZW50LnN0YXJ0LCBub2RlQ29udHJvbCkgfHxcbiAgICAgICAgICBpc09iamVjdHNFcXVhbHModGhpcy53YWxsTGlzdFJ1blswXS5wYXJlbnQuZW5kLCBub2RlQ29udHJvbClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy53YWxsTGlzdFJ1bi5wdXNoKHRoaXMud2FsbExpc3RSdW5bMF0ucGFyZW50KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGsgaW4gdGhpcy53YWxsTGlzdFJ1bikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNPYmplY3RzRXF1YWxzKHRoaXMud2FsbExpc3RSdW5ba10uc3RhcnQsIG5vZGVDb250cm9sKSB8fFxuICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh0aGlzLndhbGxMaXN0UnVuW2tdLmVuZCwgbm9kZUNvbnRyb2wpXG4gICAgICAgICkge1xuICAgICAgICAgIGxldCBub2RlVGFyZ2V0ID0gdGhpcy53YWxsTGlzdFJ1bltrXS5zdGFydFxuICAgICAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy53YWxsTGlzdFJ1bltrXS5zdGFydCwgbm9kZUNvbnRyb2wpKSB7XG4gICAgICAgICAgICBub2RlVGFyZ2V0ID0gdGhpcy53YWxsTGlzdFJ1bltrXS5lbmRcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqV2FsbCA9IHRoaXMuZWRpdG9yLm9iakZyb21XYWxsKHRoaXMud2FsbExpc3RSdW5ba10pIC8vIExJU1QgT0JKIE9OIEVER0UgLS0gTk9UIElOREVYICEhIVxuICAgICAgICAgIHZhciB3YWxsID0gdGhpcy53YWxsTGlzdFJ1bltrXVxuICAgICAgICAgIGZvciAodmFyIG9iID0gMDsgb2IgPCBvYmpXYWxsLmxlbmd0aDsgb2IrKykge1xuICAgICAgICAgICAgdmFyIG9ialRhcmdldCA9IG9ialdhbGxbb2JdXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKG9ialRhcmdldCwgbm9kZVRhcmdldClcbiAgICAgICAgICAgIHdhbGxMaXN0T2JqLnB1c2goe1xuICAgICAgICAgICAgICB3YWxsOiB3YWxsLFxuICAgICAgICAgICAgICBmcm9tOiBub2RlVGFyZ2V0LFxuICAgICAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2UsXG4gICAgICAgICAgICAgIG9iajogb2JqVGFyZ2V0LFxuICAgICAgICAgICAgICBpbmRleE9iajogb2IsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5tYWduZXRpYyA9IDBcbiAgICAgIHRoaXMuYWN0aW9uID0gMVxuICAgIH1cblxuICAgIGlmICh0aGlzLmJpbmRlci50eXBlID09ICdzZWdtZW50Jykge1xuICAgICAgJCgnI2JveFNjYWxlJykuaGlkZSgxMDApXG4gICAgICB2YXIgd2FsbCA9IHRoaXMuYmluZGVyLndhbGxcbiAgICAgIHRoaXMuYmluZGVyLmJlZm9yZSA9IHRoaXMuYmluZGVyLndhbGwuc3RhcnRcbiAgICAgIHRoaXMuZXF1YXRpb24yID0gdGhpcy5lZGl0b3IuY3JlYXRlRXF1YXRpb25Gcm9tV2FsbCh3YWxsKVxuICAgICAgaWYgKHdhbGwucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5lcXVhdGlvbjEgPSB0aGlzLmVkaXRvci5jcmVhdGVFcXVhdGlvbkZyb21XYWxsKHdhbGwucGFyZW50KVxuICAgICAgICBjb25zdCBhbmdsZTEyID0gdGhpcy5xU1ZHLmFuZ2xlQmV0d2VlbkVxdWF0aW9ucyhcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMS5BLFxuICAgICAgICAgIHRoaXMuZXF1YXRpb24yLkEsXG4gICAgICAgIClcbiAgICAgICAgaWYgKGFuZ2xlMTIgPCAyMCB8fCBhbmdsZTEyID4gMTYwKSB7XG4gICAgICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5XQUxMUykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcucmF5Q2FzdGluZyh3YWxsLnN0YXJ0LCB0aGlzLldBTExTW2tdLmNvb3JkcykgJiZcbiAgICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2tdLCB3YWxsLnBhcmVudCkgJiZcbiAgICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2tdLCB3YWxsKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB3YWxsLnBhcmVudC5wYXJlbnQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh3YWxsLCB3YWxsLnBhcmVudC5wYXJlbnQpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHdhbGwucGFyZW50LnBhcmVudCA9IG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgd2FsbC5wYXJlbnQuY2hpbGQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh3YWxsLCB3YWxsLnBhcmVudC5jaGlsZClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgd2FsbC5wYXJlbnQuY2hpbGQgPSBudWxsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2FsbC5wYXJlbnQgPSBudWxsXG4gICAgICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICB2YXIgbmV3V2FsbFxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyh3YWxsLnBhcmVudC5lbmQsIHdhbGwuc3RhcnQpKSB7XG4gICAgICAgICAgICAgIG5ld1dhbGwgPSB0aGlzLmVkaXRvci53YWxsKFxuICAgICAgICAgICAgICAgIHdhbGwucGFyZW50LmVuZCxcbiAgICAgICAgICAgICAgICB3YWxsLnN0YXJ0LFxuICAgICAgICAgICAgICAgICdub3JtYWwnLFxuICAgICAgICAgICAgICAgIHdhbGwudGhpY2ssXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgdGhpcy5XQUxMUy5wdXNoKG5ld1dhbGwpXG4gICAgICAgICAgICAgIG5ld1dhbGwucGFyZW50ID0gd2FsbC5wYXJlbnRcbiAgICAgICAgICAgICAgbmV3V2FsbC5jaGlsZCA9IHdhbGxcbiAgICAgICAgICAgICAgd2FsbC5wYXJlbnQuY2hpbGQgPSBuZXdXYWxsXG4gICAgICAgICAgICAgIHdhbGwucGFyZW50ID0gbmV3V2FsbFxuICAgICAgICAgICAgICB0aGlzLmVxdWF0aW9uMSA9IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5lcXVhdGlvbjIsXG4gICAgICAgICAgICAgICAgd2FsbC5zdGFydC54LFxuICAgICAgICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdHNFcXVhbHMod2FsbC5wYXJlbnQuc3RhcnQsIHdhbGwuc3RhcnQpKSB7XG4gICAgICAgICAgICAgIG5ld1dhbGwgPSB0aGlzLmVkaXRvci53YWxsKFxuICAgICAgICAgICAgICAgIHdhbGwucGFyZW50LnN0YXJ0LFxuICAgICAgICAgICAgICAgIHdhbGwuc3RhcnQsXG4gICAgICAgICAgICAgICAgJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgd2FsbC50aGljayxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB0aGlzLldBTExTLnB1c2gobmV3V2FsbClcbiAgICAgICAgICAgICAgbmV3V2FsbC5wYXJlbnQgPSB3YWxsLnBhcmVudFxuICAgICAgICAgICAgICBuZXdXYWxsLmNoaWxkID0gd2FsbFxuICAgICAgICAgICAgICB3YWxsLnBhcmVudC5wYXJlbnQgPSBuZXdXYWxsXG4gICAgICAgICAgICAgIHdhbGwucGFyZW50ID0gbmV3V2FsbFxuICAgICAgICAgICAgICB0aGlzLmVxdWF0aW9uMSA9IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5lcXVhdGlvbjIsXG4gICAgICAgICAgICAgICAgd2FsbC5zdGFydC54LFxuICAgICAgICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ1JFQVRFIE5FVyBXQUxMXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAod2FsbC5wYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZm91bmRFcSA9IGZhbHNlXG4gICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5XQUxMUykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMucVNWRy5yYXlDYXN0aW5nKHdhbGwuc3RhcnQsIHRoaXMuV0FMTFNba10uY29vcmRzKSAmJlxuICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2tdLmNvb3Jkcywgd2FsbC5jb29yZHMpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgYW5nbGVGb2xsb3cgPSB0aGlzLnFTVkcuYW5nbGVCZXR3ZWVuRXF1YXRpb25zKFxuICAgICAgICAgICAgICB0aGlzLldBTExTW2tdLmVxdWF0aW9ucy5iYXNlLkEsXG4gICAgICAgICAgICAgIHRoaXMuZXF1YXRpb24yLkEsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoYW5nbGVGb2xsb3cgPCAyMCB8fCBhbmdsZUZvbGxvdyA+IDE2MCkge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcXVhdGlvbjEgPSB0aGlzLmVkaXRvci5jcmVhdGVFcXVhdGlvbkZyb21XYWxsKHRoaXMuV0FMTFNba10pXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMS5mb2xsb3cgPSB0aGlzLldBTExTW2tdXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMS5iYWNrVXAgPSB7XG4gICAgICAgICAgICAgIGNvb3JkczogdGhpcy5XQUxMU1trXS5jb29yZHMsXG4gICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLldBTExTW2tdLnN0YXJ0LFxuICAgICAgICAgICAgICBlbmQ6IHRoaXMuV0FMTFNba10uZW5kLFxuICAgICAgICAgICAgICBjaGlsZDogdGhpcy5XQUxMU1trXS5jaGlsZCxcbiAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLldBTExTW2tdLnBhcmVudCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvdW5kRXEgPSB0cnVlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kRXEpIHtcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMSA9IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMixcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHdhbGwuY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmVxdWF0aW9uMyA9IHRoaXMuZWRpdG9yLmNyZWF0ZUVxdWF0aW9uRnJvbVdhbGwod2FsbC5jaGlsZClcbiAgICAgICAgY29uc3QgYW5nbGUyMyA9IHRoaXMucVNWRy5hbmdsZUJldHdlZW5FcXVhdGlvbnMoXG4gICAgICAgICAgdGhpcy5lcXVhdGlvbjMuQSxcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMi5BLFxuICAgICAgICApXG4gICAgICAgIGlmIChhbmdsZTIzIDwgMjAgfHwgYW5nbGUyMyA+IDE2MCkge1xuICAgICAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLnJheUNhc3Rpbmcod2FsbC5lbmQsIHRoaXMuV0FMTFNba10uY29vcmRzKSAmJlxuICAgICAgICAgICAgICAhaXNPYmplY3RzRXF1YWxzKHRoaXMuV0FMTFNba10sIHdhbGwuY2hpbGQpICYmXG4gICAgICAgICAgICAgICFpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXSwgd2FsbClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgd2FsbC5jaGlsZC5wYXJlbnQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh3YWxsLCB3YWxsLmNoaWxkLnBhcmVudClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgd2FsbC5jaGlsZC5wYXJlbnQgPSBudWxsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHdhbGwuY2hpbGQuY2hpbGQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0c0VxdWFscyh3YWxsLCB3YWxsLmNoaWxkLmNoaWxkKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB3YWxsLmNoaWxkLmNoaWxkID0gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdhbGwuY2hpbGQgPSBudWxsXG4gICAgICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoaXNPYmplY3RzRXF1YWxzKHdhbGwuY2hpbGQuc3RhcnQsIHdhbGwuZW5kKSkge1xuICAgICAgICAgICAgICB2YXIgbmV3V2FsbCA9IHRoaXMuZWRpdG9yLndhbGwoXG4gICAgICAgICAgICAgICAgd2FsbC5lbmQsXG4gICAgICAgICAgICAgICAgd2FsbC5jaGlsZC5zdGFydCxcbiAgICAgICAgICAgICAgICAnbmV3JyxcbiAgICAgICAgICAgICAgICB3YWxsLnRoaWNrLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHRoaXMuV0FMTFMucHVzaChuZXdXYWxsKVxuICAgICAgICAgICAgICBuZXdXYWxsLnBhcmVudCA9IHdhbGxcbiAgICAgICAgICAgICAgbmV3V2FsbC5jaGlsZCA9IHdhbGwuY2hpbGRcbiAgICAgICAgICAgICAgd2FsbC5jaGlsZC5wYXJlbnQgPSBuZXdXYWxsXG4gICAgICAgICAgICAgIHdhbGwuY2hpbGQgPSBuZXdXYWxsXG4gICAgICAgICAgICAgIHRoaXMuZXF1YXRpb24zID0gdGhpcy5xU1ZHLnBlcnBlbmRpY3VsYXJFcXVhdGlvbihcbiAgICAgICAgICAgICAgICBlcXVhdGlvbjIsXG4gICAgICAgICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0c0VxdWFscyh3YWxsLmNoaWxkLmVuZCwgd2FsbC5lbmQpKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdXYWxsID0gdGhpcy5lZGl0b3Iud2FsbChcbiAgICAgICAgICAgICAgICB3YWxsLmVuZCxcbiAgICAgICAgICAgICAgICB3YWxsLmNoaWxkLmVuZCxcbiAgICAgICAgICAgICAgICAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICB3YWxsLnRoaWNrLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHRoaXMuV0FMTFMucHVzaChuZXdXYWxsKVxuICAgICAgICAgICAgICBuZXdXYWxsLnBhcmVudCA9IHdhbGxcbiAgICAgICAgICAgICAgbmV3V2FsbC5jaGlsZCA9IHdhbGwuY2hpbGRcbiAgICAgICAgICAgICAgd2FsbC5jaGlsZC5jaGlsZCA9IG5ld1dhbGxcbiAgICAgICAgICAgICAgd2FsbC5jaGlsZCA9IG5ld1dhbGxcbiAgICAgICAgICAgICAgdGhpcy5lcXVhdGlvbjMgPSB0aGlzLnFTVkcucGVycGVuZGljdWxhckVxdWF0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuZXF1YXRpb24yLFxuICAgICAgICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ1JFQVRFIE5FVyBXQUxMXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAod2FsbC5jaGlsZCA9PSBudWxsKSB7XG4gICAgICAgIHZhciBmb3VuZEVxID0gZmFsc2VcbiAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLldBTExTKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5xU1ZHLnJheUNhc3Rpbmcod2FsbC5lbmQsIHRoaXMuV0FMTFNba10uY29vcmRzKSAmJlxuICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2tdLmNvb3Jkcywgd2FsbC5jb29yZHMpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgYW5nbGVGb2xsb3cgPSB0aGlzLnFTVkcuYW5nbGVCZXR3ZWVuRXF1YXRpb25zKFxuICAgICAgICAgICAgICB0aGlzLldBTExTW2tdLmVxdWF0aW9ucy5iYXNlLkEsXG4gICAgICAgICAgICAgIHRoaXMuZXF1YXRpb24yLkEsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoYW5nbGVGb2xsb3cgPCAyMCB8fCBhbmdsZUZvbGxvdyA+IDE2MCkge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcXVhdGlvbjMgPSB0aGlzLmVkaXRvci5jcmVhdGVFcXVhdGlvbkZyb21XYWxsKHRoaXMuV0FMTFNba10pXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMy5mb2xsb3cgPSB0aGlzLldBTExTW2tdXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMy5iYWNrVXAgPSB7XG4gICAgICAgICAgICAgIGNvb3JkczogdGhpcy5XQUxMU1trXS5jb29yZHMsXG4gICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLldBTExTW2tdLnN0YXJ0LFxuICAgICAgICAgICAgICBlbmQ6IHRoaXMuV0FMTFNba10uZW5kLFxuICAgICAgICAgICAgICBjaGlsZDogdGhpcy5XQUxMU1trXS5jaGlsZCxcbiAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLldBTExTW2tdLnBhcmVudCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvdW5kRXEgPSB0cnVlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kRXEpIHtcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMyA9IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMixcbiAgICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVxdWF0aW9uRm9sbG93ZXJzID0gW11cbiAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5XQUxMUykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5XQUxMU1trXS5jaGlsZCA9PSBudWxsICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLnJheUNhc3RpbmcodGhpcy5XQUxMU1trXS5lbmQsIHdhbGwuY29vcmRzKSAmJlxuICAgICAgICAgICFpc09iamVjdHNFcXVhbHMod2FsbCwgdGhpcy5XQUxMU1trXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5lcXVhdGlvbkZvbGxvd2Vycy5wdXNoKHtcbiAgICAgICAgICAgIHdhbGw6IHRoaXMuV0FMTFNba10sXG4gICAgICAgICAgICBlcTogdGhpcy5lZGl0b3IuY3JlYXRlRXF1YXRpb25Gcm9tV2FsbCh0aGlzLldBTExTW2tdKSxcbiAgICAgICAgICAgIHR5cGU6ICdlbmQnLFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuV0FMTFNba10ucGFyZW50ID09IG51bGwgJiZcbiAgICAgICAgICB0aGlzLnFTVkcucmF5Q2FzdGluZyh0aGlzLldBTExTW2tdLnN0YXJ0LCB3YWxsLmNvb3JkcykgJiZcbiAgICAgICAgICAhaXNPYmplY3RzRXF1YWxzKHdhbGwsIHRoaXMuV0FMTFNba10pXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuZXF1YXRpb25Gb2xsb3dlcnMucHVzaCh7XG4gICAgICAgICAgICB3YWxsOiB0aGlzLldBTExTW2tdLFxuICAgICAgICAgICAgZXE6IHRoaXMuZWRpdG9yLmNyZWF0ZUVxdWF0aW9uRnJvbVdhbGwodGhpcy5XQUxMU1trXSksXG4gICAgICAgICAgICB0eXBlOiAnc3RhcnQnLFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5lcXVhdGlvbnNPYmogPSBbXVxuICAgICAgdmFyIG9ialdhbGwgPSB0aGlzLmVkaXRvci5vYmpGcm9tV2FsbCh3YWxsKSAvLyBMSVNUIE9CSiBPTiBFREdFXG4gICAgICBmb3IgKHZhciBvYiA9IDA7IG9iIDwgb2JqV2FsbC5sZW5ndGg7IG9iKyspIHtcbiAgICAgICAgdmFyIG9ialRhcmdldCA9IG9ialdhbGxbb2JdXG4gICAgICAgIHRoaXMuZXF1YXRpb25zT2JqLnB1c2goe1xuICAgICAgICAgIG9iajogb2JqVGFyZ2V0LFxuICAgICAgICAgIHdhbGw6IHdhbGwsXG4gICAgICAgICAgZXE6IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICB0aGlzLmVxdWF0aW9uMixcbiAgICAgICAgICAgIG9ialRhcmdldC54LFxuICAgICAgICAgICAgb2JqVGFyZ2V0LnksXG4gICAgICAgICAgKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aW9uID0gMVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFjdGlvbiA9IDBcbiAgICB0aGlzLmRyYWcgPSAnb24nXG4gICAgY29uc3Qgc25hcCA9IHRoaXMuY2FsY3VsX3NuYXAoZXZlbnQsIHRoaXMuZ3JpZF9zbmFwKVxuICAgIHRoaXMucG94ID0gc25hcC54TW91c2VcbiAgICB0aGlzLnBveSA9IHNuYXAueU1vdXNlXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlRG93bl9tb2RlX2xpbmVfcGFydGl0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdsaW5lX21vZGUnICYmIHRoaXMubW9kZSAhPT0gJ3BhcnRpdGlvbl9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHRoaXMuYWN0aW9uID09IDApIHtcbiAgICBjb25zdCBzbmFwID0gdGhpcy5jYWxjdWxfc25hcChldmVudCwgdGhpcy5ncmlkX3NuYXApXG4gICAgdGhpcy5wb3ggPSBzbmFwLnhcbiAgICB0aGlzLnBveSA9IHNuYXAueVxuICAgIGlmICgodGhpcy53YWxsU3RhcnRDb25zdHJ1YyA9IHRoaXMuZWRpdG9yLm5lYXJXYWxsKHNuYXAsIDEyKSkpIHtcbiAgICAgIC8vIFRPIFNOQVAgU0VHTUVOVCBUTyBGSU5BTElaRSBYMlkyXG4gICAgICB0aGlzLnBveCA9IHRoaXMud2FsbFN0YXJ0Q29uc3RydWMueFxuICAgICAgdGhpcy5wb3kgPSB0aGlzLndhbGxTdGFydENvbnN0cnVjLnlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jb25zdHJ1YyA9IDFcbiAgfVxuXG4gIHRoaXMuYWN0aW9uID0gMVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VEb3duX21vZGVfZGlzdGFuY2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ2Rpc3RhbmNlX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAodGhpcy5hY3Rpb24gPT0gMCkge1xuICAgIHRoaXMuYWN0aW9uID0gMVxuICAgIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcbiAgICB0aGlzLnBveCA9IHNuYXAueFxuICAgIHRoaXMucG95ID0gc25hcC55XG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlRG93bl9tb2RlX2VkaXRfZG9vciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnZWRpdF9kb29yX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBBQ1RJT04gMSBBQ1RJVkFURSBFRElUSU9OIE9GIFRIRSBET09SXG4gIHRoaXMuYWN0aW9uID0gMVxuICAkKCcjbGluJykuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZURvd25IYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICB0aGlzLm1vdXNlRG93bl9tb2RlX3NlbGVjdChldmVudClcbiAgdGhpcy5tb3VzZURvd25fbW9kZV9saW5lX3BhcnRpdGlvbihldmVudClcbiAgdGhpcy5tb3VzZURvd25fbW9kZV9kaXN0YW5jZShldmVudClcbiAgdGhpcy5tb3VzZURvd25fbW9kZV9lZGl0X2Rvb3IoZXZlbnQpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZU1vdmVfbW9kZV9zZWxlY3QgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ3NlbGVjdF9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHRoaXMuZHJhZyA9PT0gJ29mZicpIHtcbiAgICAvLyBGSVJTVCBURVNUIE9OIFNFTEVDVCBNT0RFIChhbmQgZHJhZyBPRkYpIHRvIGRldGVjdCBNT1VTRU9WRVIgRE9PUlxuICAgIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCAnb2ZmJylcblxuICAgIGxldCBvYmpUYXJnZXQgPSBmYWxzZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5PQkpEQVRBLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvYmpYMSA9IHRoaXMuT0JKREFUQVtpXS5iYm94LmxlZnRcbiAgICAgIGNvbnN0IG9ialgyID0gdGhpcy5PQkpEQVRBW2ldLmJib3gucmlnaHRcbiAgICAgIGNvbnN0IG9ialkxID0gdGhpcy5PQkpEQVRBW2ldLmJib3gudG9wXG4gICAgICBjb25zdCBvYmpZMiA9IHRoaXMuT0JKREFUQVtpXS5iYm94LmJvdHRvbVxuICAgICAgY29uc3QgcmVhbEJib3hDb29yZHMgPSB0aGlzLk9CSkRBVEFbaV0ucmVhbEJib3hcbiAgICAgIGlmICh0aGlzLnFTVkcucmF5Q2FzdGluZyhzbmFwLCByZWFsQmJveENvb3JkcykpIHtcbiAgICAgICAgb2JqVGFyZ2V0ID0gdGhpcy5PQkpEQVRBW2ldXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvYmpUYXJnZXQgIT09IGZhbHNlKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyICE9ICd1bmRlZmluZWQnICYmIHRoaXMuYmluZGVyLnR5cGUgPT0gJ3NlZ21lbnQnKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgICAgIGN1cnNvcignZGVmYXVsdCcpXG4gICAgICB9XG4gICAgICBpZiAob2JqVGFyZ2V0LnBhcmFtcy5iaW5kQm94KSB7XG4gICAgICAgIC8vIE9CSiAtPiBCT1VORElOR0JPWCBUT09MXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMuZWRpdG9yLm9iajJEKFxuICAgICAgICAgICAgJ2ZyZWUnLFxuICAgICAgICAgICAgJ2JvdW5kaW5nQm94JyxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgb2JqVGFyZ2V0LmJib3gub3JpZ2luLFxuICAgICAgICAgICAgb2JqVGFyZ2V0LmFuZ2xlLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIG9ialRhcmdldC5zaXplLFxuICAgICAgICAgICAgJ25vcm1hbCcsXG4gICAgICAgICAgICBvYmpUYXJnZXQudGhpY2ssXG4gICAgICAgICAgICBvYmpUYXJnZXQucmVhbEJib3gsXG4gICAgICAgICAgKVxuICAgICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG4gICAgICAgICAgdGhpcy5iaW5kZXIub2JqID0gb2JqVGFyZ2V0XG4gICAgICAgICAgdGhpcy5iaW5kZXIudHlwZSA9ICdib3VuZGluZ0JveCdcbiAgICAgICAgICB0aGlzLmJpbmRlci5vbGRYID0gdGhpcy5iaW5kZXIueFxuICAgICAgICAgIHRoaXMuYmluZGVyLm9sZFkgPSB0aGlzLmJpbmRlci55XG4gICAgICAgICAgJCgnI2JveGJpbmQnKS5hcHBlbmQodGhpcy5iaW5kZXIuZ3JhcGgpXG4gICAgICAgICAgaWYgKCFvYmpUYXJnZXQucGFyYW1zLm1vdmUpIHtcbiAgICAgICAgICAgIGN1cnNvcigndHJhc2gnKVxuICAgICAgICAgIH0gLy8gTElLRSBNRUFTVVJFIE9OIFBMQU5cbiAgICAgICAgICBpZiAob2JqVGFyZ2V0LnBhcmFtcy5tb3ZlKSB7XG4gICAgICAgICAgICBjdXJzb3IoJ21vdmUnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRE9PUiwgV0lORE9XLCBBUEVSVFVSRS4uIC0tIE9CSiBXSVRIT1VUIEJJTkRCT1ggKHBhcmFtcy5iaW5kQm94ID0gRmFsc2UpIC0tICEhISFcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGxldCB3YWxsTGlzdCA9IHRoaXMuZWRpdG9yLnJheUNhc3RpbmdXYWxsKG9ialRhcmdldClcbiAgICAgICAgICBpZiAod2FsbExpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgd2FsbExpc3QgPSB3YWxsTGlzdFswXVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluV2FsbFJpYih3YWxsTGlzdClcbiAgICAgICAgICBjb25zdCB0aGlja09iaiA9IHdhbGxMaXN0LnRoaWNrXG4gICAgICAgICAgY29uc3Qgc2l6ZU9iaiA9IG9ialRhcmdldC5zaXplXG5cbiAgICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMuZWRpdG9yLm9iajJEKFxuICAgICAgICAgICAgJ2luV2FsbCcsXG4gICAgICAgICAgICAnc29jbGUnLFxuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBvYmpUYXJnZXQsXG4gICAgICAgICAgICBvYmpUYXJnZXQuYW5nbGUsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgc2l6ZU9iaixcbiAgICAgICAgICAgICdub3JtYWwnLFxuICAgICAgICAgICAgdGhpY2tPYmosXG4gICAgICAgICAgKVxuICAgICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG5cbiAgICAgICAgICB0aGlzLmJpbmRlci5vbGRYWSA9IHsgeDogb2JqVGFyZ2V0LngsIHk6IG9ialRhcmdldC55IH0gLy8gRk9SIE9CSkVDVCBNRU5VXG4gICAgICAgICAgJCgnI2JveGJpbmQnKS5hcHBlbmQodGhpcy5iaW5kZXIuZ3JhcGgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PSB0aGlzLmJpbmRlci5ncmFwaC5nZXQoMCkuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgY3Vyc29yKCdtb3ZlJylcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoXG4gICAgICAgICAgICAgIC5nZXQoMClcbiAgICAgICAgICAgICAgLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjaXJjbGVfY3NzXzInKVxuICAgICAgICAgICAgdGhpcy5iaW5kZXIudHlwZSA9ICdvYmonXG4gICAgICAgICAgICB0aGlzLmJpbmRlci5vYmogPSBvYmpUYXJnZXRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3Vyc29yKCdkZWZhdWx0JylcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoXG4gICAgICAgICAgICAgIC5nZXQoMClcbiAgICAgICAgICAgICAgLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjaXJjbGVfY3NzXzEnKVxuICAgICAgICAgICAgdGhpcy5iaW5kZXIudHlwZSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlci5ncmFwaCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYmluZGVyLnR5cGUgPT0gJ25vZGUnKSB7XG4gICAgICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgICAgICBjdXJzb3IoJ2RlZmF1bHQnKVxuICAgICAgICB0aGlzLnJpYigpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQklORCBDSVJDTEUgSUYgbmVhck5vZGUgYW5kIEdST1VQIEFMTCBTQU1FIFhZIFNFRyBQT0lOVFNcbiAgICBpZiAoKHRoaXMud2FsbE5vZGUgPSB0aGlzLmVkaXRvci5uZWFyV2FsbE5vZGUoc25hcCwgMjApKSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJyB8fCB0aGlzLmJpbmRlci50eXBlID09ICdzZWdtZW50Jykge1xuICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMucVNWRy5jcmVhdGUoJ2JveGJpbmQnLCAnY2lyY2xlJywge1xuICAgICAgICAgIGlkOiAnY2lyY2xlYmluZGVyJyxcbiAgICAgICAgICBjbGFzczogJ2NpcmNsZV9jc3NfMicsXG4gICAgICAgICAgY3g6IHRoaXMud2FsbE5vZGUueCxcbiAgICAgICAgICBjeTogdGhpcy53YWxsTm9kZS55LFxuICAgICAgICAgIHI6IHRoaXMuUmNpcmNsZWJpbmRlcixcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5iaW5kZXIuZGF0YSA9IHRoaXMud2FsbE5vZGVcbiAgICAgICAgdGhpcy5iaW5kZXIudHlwZSA9ICdub2RlJ1xuICAgICAgICBpZiAoJCgnI2xpbmViaW5kZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKCcjbGluZWJpbmRlcicpLnJlbW92ZSgpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJFTUFLRSBDSVJDTEVfQ1NTIE9OIEJJTkRFUiBBTkQgVEFLRSBEQVRBIFNFRyBHUk9VUFxuICAgICAgICAvLyBpZiAodHlwZW9mKGJpbmRlcikgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gICAgIGJpbmRlci5hdHRyKHtcbiAgICAgICAgLy8gICAgICAgICBjbGFzczogXCJjaXJjbGVfY3NzXzJcIlxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGN1cnNvcignbW92ZScpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5iaW5kZXIudHlwZSA9PSAnbm9kZScpIHtcbiAgICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICAgICAgdGhpcy5oaWRlQWxsU2l6ZSgpXG4gICAgICAgIGN1cnNvcignZGVmYXVsdCcpXG4gICAgICAgIHRoaXMucmliKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCSU5EIFdBTEwgV0lUSCBORUFSUE9JTlQgZnVuY3Rpb24gLS0tPiBXQUxMIEJJTkRFUiBDUkVBVElPTlxuICAgIGlmICgodGhpcy53YWxsQmluZCA9IHRoaXMuZWRpdG9yLnJheUNhc3RpbmdXYWxscyhzbmFwLCB0aGlzLldBTExTKSkpIHtcbiAgICAgIGlmICh0aGlzLndhbGxCaW5kLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy53YWxsQmluZCA9IHRoaXMud2FsbEJpbmRbdGhpcy53YWxsQmluZC5sZW5ndGggLSAxXVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMud2FsbEJpbmQgJiYgdHlwZW9mIHRoaXMuYmluZGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBvYmpXYWxsID0gdGhpcy5lZGl0b3Iub2JqRnJvbVdhbGwodGhpcy53YWxsQmluZClcbiAgICAgICAgaWYgKG9ialdhbGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZWRpdG9yLmluV2FsbFJpYjIodGhpcy53YWxsQmluZClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpbmRlciA9IHt9XG4gICAgICAgIHRoaXMuYmluZGVyLndhbGwgPSB0aGlzLndhbGxCaW5kXG4gICAgICAgIHRoaXMuaW5XYWxsUmliKHRoaXMuYmluZGVyLndhbGwpXG4gICAgICAgIHZhciBsaW5lID0gdGhpcy5xU1ZHLmNyZWF0ZSgnbm9uZScsICdsaW5lJywge1xuICAgICAgICAgIHgxOiB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LngsXG4gICAgICAgICAgeTE6IHRoaXMuYmluZGVyLndhbGwuc3RhcnQueSxcbiAgICAgICAgICB4MjogdGhpcy5iaW5kZXIud2FsbC5lbmQueCxcbiAgICAgICAgICB5MjogdGhpcy5iaW5kZXIud2FsbC5lbmQueSxcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogNSxcbiAgICAgICAgICBzdHJva2U6ICcjNWNiYTc5JyxcbiAgICAgICAgfSlcbiAgICAgICAgdmFyIGJhbGwxID0gdGhpcy5xU1ZHLmNyZWF0ZSgnbm9uZScsICdjaXJjbGUnLCB7XG4gICAgICAgICAgY2xhc3M6ICdjaXJjbGVfY3NzJyxcbiAgICAgICAgICBjeDogdGhpcy5iaW5kZXIud2FsbC5zdGFydC54LFxuICAgICAgICAgIGN5OiB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LnksXG4gICAgICAgICAgcjogdGhpcy5SY2lyY2xlYmluZGVyIC8gMS44LFxuICAgICAgICB9KVxuICAgICAgICB2YXIgYmFsbDIgPSB0aGlzLnFTVkcuY3JlYXRlKCdub25lJywgJ2NpcmNsZScsIHtcbiAgICAgICAgICBjbGFzczogJ2NpcmNsZV9jc3MnLFxuICAgICAgICAgIGN4OiB0aGlzLmJpbmRlci53YWxsLmVuZC54LFxuICAgICAgICAgIGN5OiB0aGlzLmJpbmRlci53YWxsLmVuZC55LFxuICAgICAgICAgIHI6IHRoaXMuUmNpcmNsZWJpbmRlciAvIDEuOCxcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5iaW5kZXIuZ3JhcGggPSB0aGlzLnFTVkcuY3JlYXRlKCdub25lJywgJ2cnKVxuICAgICAgICB0aGlzLmJpbmRlci5ncmFwaC5hcHBlbmQobGluZSlcbiAgICAgICAgdGhpcy5iaW5kZXIuZ3JhcGguYXBwZW5kKGJhbGwxKVxuICAgICAgICB0aGlzLmJpbmRlci5ncmFwaC5hcHBlbmQoYmFsbDIpXG4gICAgICAgICQoJyNib3hiaW5kJykuYXBwZW5kKHRoaXMuYmluZGVyLmdyYXBoKVxuICAgICAgICB0aGlzLmJpbmRlci50eXBlID0gJ3NlZ21lbnQnXG4gICAgICAgIGN1cnNvcigncG9pbnRlcicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgodGhpcy53YWxsQmluZCA9IHRoaXMuZWRpdG9yLm5lYXJXYWxsKHNuYXAsIDYpKSkge1xuICAgICAgICBpZiAodGhpcy53YWxsQmluZCAmJiB0eXBlb2YgdGhpcy5iaW5kZXIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLndhbGxCaW5kID0gdGhpcy53YWxsQmluZC53YWxsXG4gICAgICAgICAgdmFyIG9ialdhbGwgPSB0aGlzLmVkaXRvci5vYmpGcm9tV2FsbCh0aGlzLndhbGxCaW5kKVxuICAgICAgICAgIGlmIChvYmpXYWxsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLmluV2FsbFJpYjIodGhpcy53YWxsQmluZClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5iaW5kZXIgPSB7fVxuICAgICAgICAgIHRoaXMuYmluZGVyLndhbGwgPSB0aGlzLndhbGxCaW5kXG4gICAgICAgICAgdGhpcy5pbldhbGxSaWIodGhpcy5iaW5kZXIud2FsbClcbiAgICAgICAgICB2YXIgbGluZSA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAnbGluZScsIHtcbiAgICAgICAgICAgIHgxOiB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LngsXG4gICAgICAgICAgICB5MTogdGhpcy5iaW5kZXIud2FsbC5zdGFydC55LFxuICAgICAgICAgICAgeDI6IHRoaXMuYmluZGVyLndhbGwuZW5kLngsXG4gICAgICAgICAgICB5MjogdGhpcy5iaW5kZXIud2FsbC5lbmQueSxcbiAgICAgICAgICAgICdzdHJva2Utd2lkdGgnOiA1LFxuICAgICAgICAgICAgc3Ryb2tlOiAnIzVjYmE3OScsXG4gICAgICAgICAgfSlcbiAgICAgICAgICB2YXIgYmFsbDEgPSB0aGlzLnFTVkcuY3JlYXRlKCdub25lJywgJ2NpcmNsZScsIHtcbiAgICAgICAgICAgIGNsYXNzOiAnY2lyY2xlX2NzcycsXG4gICAgICAgICAgICBjeDogdGhpcy5iaW5kZXIud2FsbC5zdGFydC54LFxuICAgICAgICAgICAgY3k6IHRoaXMuYmluZGVyLndhbGwuc3RhcnQueSxcbiAgICAgICAgICAgIHI6IHRoaXMuUmNpcmNsZWJpbmRlciAvIDEuOCxcbiAgICAgICAgICB9KVxuICAgICAgICAgIHZhciBiYWxsMiA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAnY2lyY2xlJywge1xuICAgICAgICAgICAgY2xhc3M6ICdjaXJjbGVfY3NzJyxcbiAgICAgICAgICAgIGN4OiB0aGlzLmJpbmRlci53YWxsLmVuZC54LFxuICAgICAgICAgICAgY3k6IHRoaXMuYmluZGVyLndhbGwuZW5kLnksXG4gICAgICAgICAgICByOiB0aGlzLlJjaXJjbGViaW5kZXIgLyAxLjgsXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0aGlzLmJpbmRlci5ncmFwaCA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAnZycpXG4gICAgICAgICAgdGhpcy5iaW5kZXIuZ3JhcGguYXBwZW5kKGxpbmUpXG4gICAgICAgICAgdGhpcy5iaW5kZXIuZ3JhcGguYXBwZW5kKGJhbGwxKVxuICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoLmFwcGVuZChiYWxsMilcbiAgICAgICAgICAkKCcjYm94YmluZCcpLmFwcGVuZCh0aGlzLmJpbmRlci5ncmFwaClcbiAgICAgICAgICB0aGlzLmJpbmRlci50eXBlID0gJ3NlZ21lbnQnXG4gICAgICAgICAgY3Vyc29yKCdwb2ludGVyJylcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIHRoaXMuYmluZGVyLnR5cGUgPT0gJ3NlZ21lbnQnXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICAgICAgICB0aGlzLmhpZGVBbGxTaXplKClcbiAgICAgICAgICBjdXJzb3IoJ2RlZmF1bHQnKVxuICAgICAgICAgIHRoaXMucmliKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0aGlzLmRyYWcgPT09ICdvbicpIHtcbiAgICAkKCcjbGluJykuY3NzKCdjdXJzb3InLCAnbW92ZScpXG5cbiAgICBjb25zdCB4eHhfbW91c2UgPVxuICAgICAgZXZlbnQucGFnZVggKiB0aGlzLnNjYWxlRmFjdG9yIC1cbiAgICAgIHRoaXMub2Zmc2V0LmxlZnQgKiB0aGlzLnNjYWxlRmFjdG9yICtcbiAgICAgIHRoaXMub3JpZ2luWF92aWV3Ym94XG4gICAgY29uc3QgeXl5X21vdXNlID1cbiAgICAgIGV2ZW50LnBhZ2VZICogdGhpcy5zY2FsZUZhY3RvciAtXG4gICAgICB0aGlzLm9mZnNldC50b3AgKiB0aGlzLnNjYWxlRmFjdG9yICtcbiAgICAgIHRoaXMub3JpZ2luWV92aWV3Ym94XG5cbiAgICBjb25zdCBkaXN0WCA9ICh4eHhfbW91c2UgLSB0aGlzLnBveCkgKiB0aGlzLnNjYWxlRmFjdG9yXG4gICAgY29uc3QgZGlzdFkgPSAoeXl5X21vdXNlIC0gdGhpcy5wb3kpICogdGhpcy5zY2FsZUZhY3RvclxuXG4gICAgdGhpcy56b29tX21ha2VyKCd6b29tZHJhZycsIGRpc3RYLCBkaXN0WSlcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VNb3ZlX21vZGVfbGluZV9wYXJ0aXRpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ2xpbmVfbW9kZScgJiYgdGhpcy5tb2RlICE9PSAncGFydGl0aW9uX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAodGhpcy5hY3Rpb24gPT0gMCkge1xuICAgIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCAnb2ZmJylcbiAgICBjdXJzb3IoJ2dyYWInKVxuICAgIHRoaXMucG94ID0gc25hcC54XG4gICAgdGhpcy5wb3kgPSBzbmFwLnlcbiAgICBpZiAoKHRoaXMuaGVscENvbnN0cnVjID0gdGhpcy5pbnRlcnNlY3Rpb24oc25hcCwgMjUpKSkge1xuICAgICAgaWYgKHRoaXMuaGVscENvbnN0cnVjLmRpc3RhbmNlIDwgMTApIHtcbiAgICAgICAgdGhpcy5wb3ggPSB0aGlzLmhlbHBDb25zdHJ1Yy54XG4gICAgICAgIHRoaXMucG95ID0gdGhpcy5oZWxwQ29uc3RydWMueVxuICAgICAgICBjdXJzb3IoJ2dyYWInKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3Vyc29yKCdjcm9zc2hhaXInKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHRoaXMud2FsbE5vZGUgPSB0aGlzLmVkaXRvci5uZWFyV2FsbE5vZGUoc25hcCwgMjApKSkge1xuICAgICAgdGhpcy5wb3ggPSB0aGlzLndhbGxOb2RlLnhcbiAgICAgIHRoaXMucG95ID0gdGhpcy53YWxsTm9kZS55XG4gICAgICBjdXJzb3IoJ2dyYWInKVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMucVNWRy5jcmVhdGUoJ2JveGJpbmQnLCAnY2lyY2xlJywge1xuICAgICAgICAgIGlkOiAnY2lyY2xlYmluZGVyJyxcbiAgICAgICAgICBjbGFzczogJ2NpcmNsZV9jc3NfMicsXG4gICAgICAgICAgY3g6IHRoaXMud2FsbE5vZGUueCxcbiAgICAgICAgICBjeTogdGhpcy53YWxsTm9kZS55LFxuICAgICAgICAgIHI6IHRoaXMuUmNpcmNsZWJpbmRlciAvIDEuNSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2ZmKClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmhlbHBDb25zdHJ1Yykge1xuICAgICAgICBjdXJzb3IoJ2Nyb3NzaGFpcicpXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0aGlzLmJpbmRlci5ncmFwaCkge1xuICAgICAgICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0aGlzLmFjdGlvbiA9PSAxKSB7XG4gICAgY29uc3Qgc25hcCA9IHRoaXMuY2FsY3VsX3NuYXAoZXZlbnQsIHRoaXMuZ3JpZF9zbmFwKVxuICAgIHRoaXMueCA9IHNuYXAueFxuICAgIHRoaXMueSA9IHNuYXAueVxuICAgIGNvbnN0IHN0YXJ0ZXIgPSBtaW5Nb3ZlR3JpZChzbmFwLCB0aGlzLnBveCwgdGhpcy5wb3kpXG5cbiAgICBpZiAoISQoJyNsaW5lX2NvbnN0cnVjJykubGVuZ3RoKSB7XG4gICAgICBpZiAoKHRoaXMud2FsbE5vZGUgPSB0aGlzLmVkaXRvci5uZWFyV2FsbE5vZGUoc25hcCwgMjApKSkge1xuICAgICAgICB0aGlzLnBveCA9IHRoaXMud2FsbE5vZGUueFxuICAgICAgICB0aGlzLnBveSA9IHRoaXMud2FsbE5vZGUueVxuXG4gICAgICAgIHRoaXMud2FsbFN0YXJ0Q29uc3RydWMgPSBmYWxzZVxuICAgICAgICBpZiAodGhpcy53YWxsTm9kZS5iZXN0V2FsbCA9PSB0aGlzLldBTExTLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjdXJzb3IoJ3ZhbGlkYXRpb24nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnNvcignZ3JhYicpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvcignY3Jvc3NoYWlyJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnRlciA+IHRoaXMuZ3JpZCkge1xuICAgICAgaWYgKCEkKCcjbGluZV9jb25zdHJ1YycpLmxlbmd0aCkge1xuICAgICAgICBsZXQgd3MgPSAyMFxuICAgICAgICBpZiAodGhpcy5tb2RlID09ICdwYXJ0aXRpb25fbW9kZScpIHtcbiAgICAgICAgICB3cyA9IDEwXG4gICAgICAgIH1cblxuICAgICAgICBsaW5lY29uc3RydWMgPSB0aGlzLnFTVkcuY3JlYXRlKCdib3hiaW5kJywgJ2xpbmUnLCB7XG4gICAgICAgICAgaWQ6ICdsaW5lX2NvbnN0cnVjJyxcbiAgICAgICAgICB4MTogdGhpcy5wb3gsXG4gICAgICAgICAgeTE6IHRoaXMucG95LFxuICAgICAgICAgIHgyOiB0aGlzLngsXG4gICAgICAgICAgeTI6IHRoaXMueSxcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogd3MsXG4gICAgICAgICAgJ3N0cm9rZS1saW5lY2FwJzogJ2J1dHQnLFxuICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6IDAuNyxcbiAgICAgICAgICBzdHJva2U6ICcjOWZiMmUyJyxcbiAgICAgICAgfSlcblxuICAgICAgICBzdmdhZGQgPSB0aGlzLnFTVkcuY3JlYXRlKCdib3hiaW5kJywgJ2xpbmUnLCB7XG4gICAgICAgICAgLy8gT1JBTkdFIFRFTVAgTElORSBGT1IgQU5HTEUgMCA5MCA0NSAtK1xuICAgICAgICAgIGlkOiAnbGluZXRlbXAnLFxuICAgICAgICAgIHgxOiB0aGlzLnBveCxcbiAgICAgICAgICB5MTogdGhpcy5wb3ksXG4gICAgICAgICAgeDI6IHRoaXMueCxcbiAgICAgICAgICB5MjogdGhpcy55LFxuICAgICAgICAgIHN0cm9rZTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMC41LFxuICAgICAgICAgICdzdHJva2Utb3BhY2l0eSc6ICcwLjknLFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVEhFIExJTkVTIEFORCBCSU5ERVIgQVJFIENSRUFURURcblxuICAgICAgICAkKCcjbGluZXRlbXAnKS5hdHRyKHtcbiAgICAgICAgICB4MjogdGhpcy54LFxuICAgICAgICAgIHkyOiB0aGlzLnksXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKChoZWxwQ29uc3RydWNFbmQgPSB0aGlzLmludGVyc2VjdGlvbihzbmFwLCAxMCkpKSB7XG4gICAgICAgICAgdGhpcy54ID0gaGVscENvbnN0cnVjRW5kLnhcbiAgICAgICAgICB0aGlzLnkgPSBoZWxwQ29uc3RydWNFbmQueVxuICAgICAgICB9XG4gICAgICAgIGlmICgod2FsbEVuZENvbnN0cnVjID0gdGhpcy5lZGl0b3IubmVhcldhbGwoc25hcCwgMTIpKSkge1xuICAgICAgICAgIC8vIFRPIFNOQVAgU0VHTUVOVCBUTyBGSU5BTElaRSBYMlkyXG4gICAgICAgICAgdGhpcy54ID0gd2FsbEVuZENvbnN0cnVjLnhcbiAgICAgICAgICB0aGlzLnkgPSB3YWxsRW5kQ29uc3RydWMueVxuICAgICAgICAgIGN1cnNvcignZ3JhYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3Vyc29yKCdjcm9zc2hhaXInKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbmVhck5vZGUgaGVscGVkIHRvIGF0dGFjaCB0aGUgZW5kIG9mIHRoZSBjb25zdHJ1YyBsaW5lXG4gICAgICAgIGlmICgodGhpcy53YWxsTm9kZSA9IHRoaXMuZWRpdG9yLm5lYXJXYWxsTm9kZShzbmFwLCAyMCkpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5iaW5kZXIgPSB0aGlzLnFTVkcuY3JlYXRlKCdib3hiaW5kJywgJ2NpcmNsZScsIHtcbiAgICAgICAgICAgICAgaWQ6ICdjaXJjbGViaW5kZXInLFxuICAgICAgICAgICAgICBjbGFzczogJ2NpcmNsZV9jc3NfMicsXG4gICAgICAgICAgICAgIGN4OiB0aGlzLndhbGxOb2RlLngsXG4gICAgICAgICAgICAgIGN5OiB0aGlzLndhbGxOb2RlLnksXG4gICAgICAgICAgICAgIHI6IHRoaXMuUmNpcmNsZWJpbmRlciAvIDEuNSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgICQoJyNsaW5lX2NvbnN0cnVjJykuYXR0cih7XG4gICAgICAgICAgICB4MjogdGhpcy53YWxsTm9kZS54LFxuICAgICAgICAgICAgeTI6IHRoaXMud2FsbE5vZGUueSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMueCA9IHRoaXMud2FsbE5vZGUueFxuICAgICAgICAgIHRoaXMueSA9IHRoaXMud2FsbE5vZGUueVxuICAgICAgICAgIHdhbGxFbmRDb25zdHJ1YyA9IHRydWVcbiAgICAgICAgICB0aGlzLmludGVyc2VjdGlvbk9mZigpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy53YWxsTm9kZS5iZXN0V2FsbCA9PSB0aGlzLldBTExTLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdWx0aScpLmNoZWNrZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnNvcigndmFsaWRhdGlvbicpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnNvcignZ3JhYicpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnJlbW92ZSgpXG4gICAgICAgICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAod2FsbEVuZENvbnN0cnVjID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY3Vyc29yKCdjcm9zc2hhaXInKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBMSU5FVEVNUCBBTkQgTElUTExFIFNOQVBQSU5HIEZPUiBIRUxQIFRPIENPTlNUUlVDIEFOR0xFIDAgOTAgNDUgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgY29uc3QgZmx0dCA9IHRoaXMucVNWRy5hbmdsZSh0aGlzLnBveCwgdGhpcy5wb3ksIHRoaXMueCwgdGhpcy55KVxuICAgICAgICBjb25zdCBmbHQgPSBNYXRoLmFicyhmbHR0LmRlZylcbiAgICAgICAgY29uc3QgY29lZmYgPSBmbHR0LmRlZyAvIGZsdCAvLyAtNDUgLT4gLTEgICAgIDQ1IC0+IDFcbiAgICAgICAgY29uc3QgcGhpID0gdGhpcy5wb3kgLSBjb2VmZiAqIHRoaXMucG94XG4gICAgICAgIGNvbnN0IFhkaWFnID0gKHRoaXMueSAtIHBoaSkgLyBjb2VmZlxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gSEVMUCBGT1IgSCBMSU5FXG4gICAgICAgICAgbGV0IGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBpZiAoZmx0IDwgMTUgJiYgTWF0aC5hYnModGhpcy5wb3kgLSB0aGlzLnkpIDwgMjUpIHtcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMucG95XG4gICAgICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgICB9IC8vIEhFTFAgRk9SIFYgTElORVxuICAgICAgICAgIGlmIChmbHQgPiA3NSAmJiBNYXRoLmFicyh0aGlzLnBveCAtIHRoaXMueCkgPCAyNSkge1xuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5wb3hcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgIH0gLy8gSEVMUCBGT1IgRElBRyBMSU5FXG4gICAgICAgICAgaWYgKGZsdCA8IDU1ICYmIGZsdCA+IDM1ICYmIE1hdGguYWJzKFhkaWFnIC0gdGhpcy54KSA8IDIwKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBYZGlhZ1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgJCgnI2xpbmVfY29uc3RydWMnKS5hdHRyKHsgJ3N0cm9rZS1vcGFjaXR5JzogMSB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCcjbGluZV9jb25zdHJ1YycpLmF0dHIoeyAnc3Ryb2tlLW9wYWNpdHknOiAwLjcgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJCgnI2xpbmVfY29uc3RydWMnKS5hdHRyKHtcbiAgICAgICAgICB4MjogdGhpcy54LFxuICAgICAgICAgIHkyOiB0aGlzLnksXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gU0hPVyBXQUxMIFNJWkUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBjb25zdCBzdGFydFRleHQgPSB0aGlzLnFTVkcubWlkZGxlKHRoaXMucG94LCB0aGlzLnBveSwgdGhpcy54LCB0aGlzLnkpXG4gICAgICAgIGNvbnN0IGFuZ2xlVGV4dCA9IHRoaXMucVNWRy5hbmdsZSh0aGlzLnBveCwgdGhpcy5wb3ksIHRoaXMueCwgdGhpcy55KVxuICAgICAgICBjb25zdCB2YWx1ZVRleHQgPSAoXG4gICAgICAgICAgdGhpcy5xU1ZHLm1lYXN1cmUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IHRoaXMucG94LFxuICAgICAgICAgICAgICB5OiB0aGlzLnBveSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgICAgeTogdGhpcy55LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApIC8gNjBcbiAgICAgICAgKS50b0ZpeGVkKDIpXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5sZW5ndGhUZW1wID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAgICd0ZXh0JyxcbiAgICAgICAgICApXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4Jywgc3RhcnRUZXh0LngpXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5Jywgc3RhcnRUZXh0LnkgLSAxNSlcbiAgICAgICAgICB0aGlzLmxlbmd0aFRlbXAuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2UnLCAnbm9uZScpXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMC42cHgnKVxuICAgICAgICAgIHRoaXMubGVuZ3RoVGVtcC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbCcsICcjNzc3Nzc3JylcbiAgICAgICAgICB0aGlzLmxlbmd0aFRlbXAudGV4dENvbnRlbnQgPSB2YWx1ZVRleHQgKyAnbSdcbiAgICAgICAgICAkKCcjYm94YmluZCcpLmFwcGVuZCh0aGlzLmxlbmd0aFRlbXApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxlbmd0aFRlbXAgIT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWVUZXh0ID4gMC4xKSB7XG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICd4Jywgc3RhcnRUZXh0LngpXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnNldEF0dHJpYnV0ZU5TKG51bGwsICd5Jywgc3RhcnRUZXh0LnkgLSAxNSlcbiAgICAgICAgICB0aGlzLmxlbmd0aFRlbXAuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgICAncm90YXRlKCcgK1xuICAgICAgICAgICAgICBhbmdsZVRleHQuZGVnICtcbiAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgc3RhcnRUZXh0LnggK1xuICAgICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgICBzdGFydFRleHQueSArXG4gICAgICAgICAgICAgICcpJyxcbiAgICAgICAgICApXG4gICAgICAgICAgdGhpcy5sZW5ndGhUZW1wLnRleHRDb250ZW50ID0gdmFsdWVUZXh0ICsgJyBtJ1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5sZW5ndGhUZW1wICE9ICd1bmRlZmluZWQnICYmIHZhbHVlVGV4dCA8IDAuMSkge1xuICAgICAgICAgIHRoaXMubGVuZ3RoVGVtcC50ZXh0Q29udGVudCA9ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlTW92ZV9tb2RlX2Rvb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ2Rvb3JfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcblxuICBpZiAoKHdhbGxTZWxlY3QgPSB0aGlzLmVkaXRvci5uZWFyV2FsbChzbmFwKSkpIHtcbiAgICBjb25zdCB3YWxsID0gd2FsbFNlbGVjdC53YWxsXG4gICAgaWYgKHdhbGwudHlwZSAhPSAnc2VwYXJhdGUnKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGZhbWlseSwgY2xhc3NlLCB0eXBlLCBwb3MsIGFuZ2xlLCBhbmdsZVNpZ24sIHNpemUsIGhpbmdlLCB0aGlja1xuICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMuZWRpdG9yLm9iajJEKFxuICAgICAgICAgICdpbldhbGwnLFxuICAgICAgICAgICdkb29yV2luZG93JyxcbiAgICAgICAgICB0aGlzLm1vZGVPcHRpb24sXG4gICAgICAgICAgd2FsbFNlbGVjdCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgNjAsXG4gICAgICAgICAgJ25vcm1hbCcsXG4gICAgICAgICAgd2FsbC50aGljayxcbiAgICAgICAgKVxuICAgICAgICB2YXIgYW5nbGVXYWxsID0gdGhpcy5xU1ZHLmFuZ2xlRGVnKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICB3YWxsLnN0YXJ0LnksXG4gICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MSA9IHRoaXMucVNWRy52ZWN0b3JYWShcbiAgICAgICAgICB7IHg6IHdhbGwuc3RhcnQueCwgeTogd2FsbC5zdGFydC55IH0sXG4gICAgICAgICAgeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sXG4gICAgICAgIClcbiAgICAgICAgdmFyIHYyID0gdGhpcy5xU1ZHLnZlY3RvclhZKHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LCBzbmFwKVxuICAgICAgICB2YXIgbmV3QW5nbGUgPSB0aGlzLnFTVkcudmVjdG9yRGV0ZXIodjEsIHYyKVxuICAgICAgICBpZiAoTWF0aC5zaWduKG5ld0FuZ2xlKSA9PSAxKSB7XG4gICAgICAgICAgYW5nbGVXYWxsICs9IDE4MFxuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlU2lnbiA9IDFcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydENvb3JkcyA9IHRoaXMucVNWRy5taWRkbGUoXG4gICAgICAgICAgd2FsbC5zdGFydC54LFxuICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICB3YWxsLmVuZC54LFxuICAgICAgICAgIHdhbGwuZW5kLnksXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5iaW5kZXIueCA9IHN0YXJ0Q29vcmRzLnhcbiAgICAgICAgdGhpcy5iaW5kZXIueSA9IHN0YXJ0Q29vcmRzLnlcbiAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICAgICAgJCgnI2JveGJpbmQnKS5hcHBlbmQodGhpcy5iaW5kZXIuZ3JhcGgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYW5nbGVXYWxsID0gdGhpcy5xU1ZHLmFuZ2xlRGVnKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICB3YWxsLnN0YXJ0LnksXG4gICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MSA9IHRoaXMucVNWRy52ZWN0b3JYWShcbiAgICAgICAgICB7IHg6IHdhbGwuc3RhcnQueCwgeTogd2FsbC5zdGFydC55IH0sXG4gICAgICAgICAgeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sXG4gICAgICAgIClcbiAgICAgICAgdmFyIHYyID0gdGhpcy5xU1ZHLnZlY3RvclhZKHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LCBzbmFwKVxuICAgICAgICB2YXIgbmV3QW5nbGUgPSB0aGlzLnFTVkcudmVjdG9yRGV0ZXIodjEsIHYyKVxuICAgICAgICB0aGlzLmJpbmRlci5hbmdsZVNpZ24gPSAwXG4gICAgICAgIGlmIChNYXRoLnNpZ24odGhpcy5uZXdBbmdsZSkgPT0gMSkge1xuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlU2lnbiA9IDFcbiAgICAgICAgICBhbmdsZVdhbGwgKz0gMTgwXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW1pdHMgPSBsaW1pdE9iaih3YWxsLmVxdWF0aW9ucy5iYXNlLCB0aGlzLmJpbmRlci5zaXplLCB3YWxsU2VsZWN0KVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMF0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzFdLnksIHdhbGwuc3RhcnQueSwgd2FsbC5lbmQueSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5iaW5kZXIueCA9IHdhbGxTZWxlY3QueFxuICAgICAgICAgIHRoaXMuYmluZGVyLnkgPSB3YWxsU2VsZWN0LnlcbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICAgIHRoaXMuYmluZGVyLnRoaWNrID0gd2FsbC50aGlja1xuICAgICAgICAgIHRoaXMuYmluZGVyLmxpbWl0ID0gbGltaXRzXG4gICAgICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAod2FsbFNlbGVjdC54ID09IHdhbGwuc3RhcnQueCAmJiB3YWxsU2VsZWN0LnkgPT0gd2FsbC5zdGFydC55KSB8fFxuICAgICAgICAgICh3YWxsU2VsZWN0LnggPT0gd2FsbC5lbmQueCAmJiB3YWxsU2VsZWN0LnkgPT0gd2FsbC5lbmQueSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1swXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRlci54ID0gbGltaXRzWzBdLnhcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnkgPSBsaW1pdHNbMF0ueVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMV0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzFdLnksIHdhbGwuc3RhcnQueSwgd2FsbC5lbmQueSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnggPSBsaW1pdHNbMV0ueFxuICAgICAgICAgICAgdGhpcy5iaW5kZXIueSA9IGxpbWl0c1sxXS55XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYmluZGVyLmxpbWl0ID0gbGltaXRzXG4gICAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgICAgICB0aGlzLmJpbmRlci50aGljayA9IHdhbGwudGhpY2tcbiAgICAgICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VNb3ZlX21vZGVfbmV0d29yayA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnbmV0d29ya19tb2RlJykge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcblxuICBpZiAoKHdhbGxTZWxlY3QgPSB0aGlzLmVkaXRvci5uZWFyV2FsbChzbmFwKSkpIHtcbiAgICBjb25zdCB3YWxsID0gd2FsbFNlbGVjdC53YWxsXG4gICAgaWYgKHdhbGwudHlwZSAhPSAnc2VwYXJhdGUnKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGZhbWlseSwgY2xhc3NlLCB0eXBlLCBwb3MsIGFuZ2xlLCBhbmdsZVNpZ24sIHNpemUsIGhpbmdlLCB0aGlja1xuICAgICAgICB0aGlzLmJpbmRlciA9IHRoaXMuZWRpdG9yLm9iajJEKFxuICAgICAgICAgICdpbldhbGwnLFxuICAgICAgICAgICduZXR3b3JrJyxcbiAgICAgICAgICB0aGlzLm1vZGVPcHRpb24sXG4gICAgICAgICAgd2FsbFNlbGVjdCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgNjAsXG4gICAgICAgICAgJ25vcm1hbCcsXG4gICAgICAgICAgd2FsbC50aGljayxcbiAgICAgICAgKVxuICAgICAgICB2YXIgYW5nbGVXYWxsID0gdGhpcy5xU1ZHLmFuZ2xlRGVnKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICB3YWxsLnN0YXJ0LnksXG4gICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MSA9IHRoaXMucVNWRy52ZWN0b3JYWShcbiAgICAgICAgICB7IHg6IHdhbGwuc3RhcnQueCwgeTogd2FsbC5zdGFydC55IH0sXG4gICAgICAgICAgeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sXG4gICAgICAgIClcbiAgICAgICAgdmFyIHYyID0gdGhpcy5xU1ZHLnZlY3RvclhZKHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LCBzbmFwKVxuICAgICAgICB2YXIgbmV3QW5nbGUgPSB0aGlzLnFTVkcudmVjdG9yRGV0ZXIodjEsIHYyKVxuICAgICAgICBpZiAoTWF0aC5zaWduKG5ld0FuZ2xlKSA9PSAxKSB7XG4gICAgICAgICAgYW5nbGVXYWxsICs9IDE4MFxuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlU2lnbiA9IDFcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydENvb3JkcyA9IHRoaXMucVNWRy5taWRkbGUoXG4gICAgICAgICAgd2FsbC5zdGFydC54LFxuICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICB3YWxsLmVuZC54LFxuICAgICAgICAgIHdhbGwuZW5kLnksXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5iaW5kZXIueCA9IHN0YXJ0Q29vcmRzLnhcbiAgICAgICAgdGhpcy5iaW5kZXIueSA9IHN0YXJ0Q29vcmRzLnlcbiAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICAgICAgJCgnI2JveGJpbmQnKS5hcHBlbmQodGhpcy5iaW5kZXIuZ3JhcGgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYW5nbGVXYWxsID0gdGhpcy5xU1ZHLmFuZ2xlRGVnKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICB3YWxsLnN0YXJ0LnksXG4gICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MSA9IHRoaXMucVNWRy52ZWN0b3JYWShcbiAgICAgICAgICB7IHg6IHdhbGwuc3RhcnQueCwgeTogd2FsbC5zdGFydC55IH0sXG4gICAgICAgICAgeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sXG4gICAgICAgIClcbiAgICAgICAgdmFyIHYyID0gdGhpcy5xU1ZHLnZlY3RvclhZKHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LCBzbmFwKVxuICAgICAgICB2YXIgbmV3QW5nbGUgPSB0aGlzLnFTVkcudmVjdG9yRGV0ZXIodjEsIHYyKVxuICAgICAgICB0aGlzLmJpbmRlci5hbmdsZVNpZ24gPSAwXG4gICAgICAgIGlmIChNYXRoLnNpZ24obmV3QW5nbGUpID09IDEpIHtcbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZVNpZ24gPSAxXG4gICAgICAgICAgYW5nbGVXYWxsICs9IDE4MFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGltaXRzID0gbGltaXRPYmood2FsbC5lcXVhdGlvbnMuYmFzZSwgdGhpcy5iaW5kZXIuc2l6ZSwgd2FsbFNlbGVjdClcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1swXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLnksIHdhbGwuc3RhcnQueSwgd2FsbC5lbmQueSkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMV0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuYmluZGVyLnggPSB3YWxsU2VsZWN0LnhcbiAgICAgICAgICB0aGlzLmJpbmRlci55ID0gd2FsbFNlbGVjdC55XG4gICAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgICAgICB0aGlzLmJpbmRlci50aGljayA9IHdhbGwudGhpY2tcbiAgICAgICAgICB0aGlzLmJpbmRlci5saW1pdCA9IGxpbWl0c1xuICAgICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgKHdhbGxTZWxlY3QueCA9PSB3YWxsLnN0YXJ0LnggJiYgd2FsbFNlbGVjdC55ID09IHdhbGwuc3RhcnQueSkgfHxcbiAgICAgICAgICAod2FsbFNlbGVjdC54ID09IHdhbGwuZW5kLnggJiYgd2FsbFNlbGVjdC55ID09IHdhbGwuZW5kLnkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1swXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMF0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5iaW5kZXIueCA9IGxpbWl0c1swXS54XG4gICAgICAgICAgICB0aGlzLmJpbmRlci55ID0gbGltaXRzWzBdLnlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzFdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRlci54ID0gbGltaXRzWzFdLnhcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnkgPSBsaW1pdHNbMV0ueVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmJpbmRlci5saW1pdCA9IGxpbWl0c1xuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlID0gYW5nbGVXYWxsXG4gICAgICAgICAgdGhpcy5iaW5kZXIudGhpY2sgPSB3YWxsLnRoaWNrXG4gICAgICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlTW92ZV9tb2RlX2VsZWN0cmljYWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ2VsZWN0cmljYWxfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBzbmFwID0gdGhpcy5jYWxjdWxfc25hcChldmVudCwgdGhpcy5ncmlkX3NuYXApXG5cbiAgaWYgKCh3YWxsU2VsZWN0ID0gdGhpcy5lZGl0b3IubmVhcldhbGwoc25hcCkpKSB7XG4gICAgY29uc3Qgd2FsbCA9IHdhbGxTZWxlY3Qud2FsbFxuICAgIGlmICh3YWxsLnR5cGUgIT0gJ3NlcGFyYXRlJykge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBmYW1pbHksIGNsYXNzZSwgdHlwZSwgcG9zLCBhbmdsZSwgYW5nbGVTaWduLCBzaXplLCBoaW5nZSwgdGhpY2tcbiAgICAgICAgdGhpcy5iaW5kZXIgPSB0aGlzLmVkaXRvci5vYmoyRChcbiAgICAgICAgICAnaW5XYWxsJyxcbiAgICAgICAgICAnZWxlY3RyaWNhbCcsXG4gICAgICAgICAgdGhpcy5tb2RlT3B0aW9uLFxuICAgICAgICAgIHdhbGxTZWxlY3QsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAwLFxuICAgICAgICAgIDYwLFxuICAgICAgICAgICdub3JtYWwnLFxuICAgICAgICAgIHdhbGwudGhpY2ssXG4gICAgICAgIClcbiAgICAgICAgdmFyIGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZURlZyhcbiAgICAgICAgICB3YWxsLnN0YXJ0LngsXG4gICAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgKVxuICAgICAgICB2YXIgdjEgPSB0aGlzLnFTVkcudmVjdG9yWFkoXG4gICAgICAgICAgeyB4OiB3YWxsLnN0YXJ0LngsIHk6IHdhbGwuc3RhcnQueSB9LFxuICAgICAgICAgIHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MiA9IHRoaXMucVNWRy52ZWN0b3JYWSh7IHg6IHdhbGwuZW5kLngsIHk6IHdhbGwuZW5kLnkgfSwgc25hcClcbiAgICAgICAgdmFyIG5ld0FuZ2xlID0gdGhpcy5xU1ZHLnZlY3RvckRldGVyKHYxLCB2MilcbiAgICAgICAgaWYgKE1hdGguc2lnbihuZXdBbmdsZSkgPT0gMSkge1xuICAgICAgICAgIGFuZ2xlV2FsbCArPSAxODBcbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZVNpZ24gPSAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRDb29yZHMgPSB0aGlzLnFTVkcubWlkZGxlKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICB3YWxsLnN0YXJ0LnksXG4gICAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIHRoaXMuYmluZGVyLnggPSBzdGFydENvb3Jkcy54XG4gICAgICAgIHRoaXMuYmluZGVyLnkgPSBzdGFydENvb3Jkcy55XG4gICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlID0gYW5nbGVXYWxsXG4gICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG4gICAgICAgICQoJyNib3hiaW5kJykuYXBwZW5kKHRoaXMuYmluZGVyLmdyYXBoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZURlZyhcbiAgICAgICAgICB3YWxsLnN0YXJ0LngsXG4gICAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgKVxuICAgICAgICB2YXIgdjEgPSB0aGlzLnFTVkcudmVjdG9yWFkoXG4gICAgICAgICAgeyB4OiB3YWxsLnN0YXJ0LngsIHk6IHdhbGwuc3RhcnQueSB9LFxuICAgICAgICAgIHsgeDogd2FsbC5lbmQueCwgeTogd2FsbC5lbmQueSB9LFxuICAgICAgICApXG4gICAgICAgIHZhciB2MiA9IHRoaXMucVNWRy52ZWN0b3JYWSh7IHg6IHdhbGwuZW5kLngsIHk6IHdhbGwuZW5kLnkgfSwgc25hcClcbiAgICAgICAgdmFyIG5ld0FuZ2xlID0gdGhpcy5xU1ZHLnZlY3RvckRldGVyKHYxLCB2MilcbiAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGVTaWduID0gMFxuICAgICAgICBpZiAoTWF0aC5zaWduKG5ld0FuZ2xlKSA9PSAxKSB7XG4gICAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGVTaWduID0gMVxuICAgICAgICAgIGFuZ2xlV2FsbCArPSAxODBcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpbWl0cyA9IGxpbWl0T2JqKHdhbGwuZXF1YXRpb25zLmJhc2UsIHRoaXMuYmluZGVyLnNpemUsIHdhbGxTZWxlY3QpXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMF0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1swXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzFdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMV0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLmJpbmRlci54ID0gd2FsbFNlbGVjdC54XG4gICAgICAgICAgdGhpcy5iaW5kZXIueSA9IHdhbGxTZWxlY3QueVxuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlID0gYW5nbGVXYWxsXG4gICAgICAgICAgdGhpcy5iaW5kZXIudGhpY2sgPSB3YWxsLnRoaWNrXG4gICAgICAgICAgdGhpcy5iaW5kZXIubGltaXQgPSBsaW1pdHNcbiAgICAgICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICh3YWxsU2VsZWN0LnggPT0gd2FsbC5zdGFydC54ICYmIHdhbGxTZWxlY3QueSA9PSB3YWxsLnN0YXJ0LnkpIHx8XG4gICAgICAgICAgKHdhbGxTZWxlY3QueCA9PSB3YWxsLmVuZC54ICYmIHdhbGxTZWxlY3QueSA9PSB3YWxsLmVuZC55KVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMF0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLnksIHdhbGwuc3RhcnQueSwgd2FsbC5lbmQueSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnggPSBsaW1pdHNbMF0ueFxuICAgICAgICAgICAgdGhpcy5iaW5kZXIueSA9IGxpbWl0c1swXS55XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMV0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5iaW5kZXIueCA9IGxpbWl0c1sxXS54XG4gICAgICAgICAgICB0aGlzLmJpbmRlci55ID0gbGltaXRzWzFdLnlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5iaW5kZXIubGltaXQgPSBsaW1pdHNcbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICAgIHRoaXMuYmluZGVyLnRoaWNrID0gd2FsbC50aGlja1xuICAgICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5iaW5kZXIuZ3JhcGgucmVtb3ZlKClcbiAgICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZU1vdmVfbW9kZV9kaXN0YW5jZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnZGlzdGFuY2VfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgIGNyb3NzID0gdGhpcy5xU1ZHLmNyZWF0ZSgnYm94YmluZCcsICdwYXRoJywge1xuICAgICAgZDogJ00tMzAwMCwwIEwzMDAwLDAgTTAsLTMwMDAgTDAsMzAwMCcsXG4gICAgICAnc3Ryb2tlLXdpZHRoJzogMC41LFxuICAgICAgJ3N0cm9rZS1vcGFjaXR5JzogJzAuOCcsXG4gICAgICBzdHJva2U6ICcjZTJiNjUzJyxcbiAgICAgIGZpbGw6ICcjZTJiNjUzJyxcbiAgICB9KVxuICAgIHRoaXMuYmluZGVyID0gdGhpcy5lZGl0b3Iub2JqMkQoXG4gICAgICAnZnJlZScsXG4gICAgICAnbWVhc3VyZScsXG4gICAgICAnJyxcbiAgICAgIHsgeDogMCwgeTogMCB9LFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgJ25vcm1hbCcsXG4gICAgICAwLFxuICAgICAgJycsXG4gICAgKVxuICAgIGxhYmVsTWVhc3VyZSA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAndGV4dCcsIHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAtMTAsXG4gICAgICAnZm9udC1zaXplJzogJzEuMmVtJyxcbiAgICAgIHN0cm9rZTogJyNmZmZmZmYnLFxuICAgICAgJ3N0cm9rZS13aWR0aCc6ICcwLjRweCcsXG4gICAgICAnZm9udC1mYW1pbHknOiAncm9ib3RvJyxcbiAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLFxuICAgICAgZmlsbDogJyMzNjcyZDknLFxuICAgIH0pXG4gICAgdGhpcy5iaW5kZXIuZ3JhcGguYXBwZW5kKGxhYmVsTWVhc3VyZSlcbiAgICAkKCcjYm94YmluZCcpLmFwcGVuZCh0aGlzLmJpbmRlci5ncmFwaClcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBzbmFwLnhcbiAgICB0aGlzLnkgPSBzbmFwLnlcbiAgICBjcm9zcy5hdHRyKHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgnICsgc25hcC54ICsgJywnICsgc25hcC55ICsgJyknLFxuICAgIH0pXG4gICAgaWYgKGFjdGlvbiA9PSAxKSB7XG4gICAgICBjb25zdCBzdGFydFRleHQgPSB0aGlzLnFTVkcubWlkZGxlKHRoaXMucG94LCB0aGlzLnBveSwgdGhpcy54LCB0aGlzLnkpXG4gICAgICBjb25zdCBhbmdsZVRleHQgPSB0aGlzLnFTVkcuYW5nbGUodGhpcy5wb3gsIHRoaXMucG95LCB0aGlzLngsIHRoaXMueSlcbiAgICAgIGxldCB2YWx1ZVRleHQgPSB0aGlzLnFTVkcubWVhc3VyZShcbiAgICAgICAge1xuICAgICAgICAgIHg6IHRoaXMucG94LFxuICAgICAgICAgIHk6IHRoaXMucG95LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgeDogdGhpcy54LFxuICAgICAgICAgIHk6IHRoaXMueSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICAgIHRoaXMuYmluZGVyLnNpemUgPSB2YWx1ZVRleHRcbiAgICAgIHRoaXMuYmluZGVyLnggPSBzdGFydFRleHQueFxuICAgICAgdGhpcy5iaW5kZXIueSA9IHN0YXJ0VGV4dC55XG4gICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlVGV4dC5kZWdcbiAgICAgIHZhbHVlVGV4dCA9ICh2YWx1ZVRleHQgLyB0aGlzLm1ldGVyKS50b0ZpeGVkKDIpICsgJyBtJ1xuICAgICAgLy9sYWJlbE1lYXN1cmUuY29udGV4dC50ZXh0Q29udGVudCA9IHZhbHVlVGV4dDtcbiAgICAgIGxhYmVsTWVhc3VyZVswXS50ZXh0Q29udGVudCA9IHZhbHVlVGV4dFxuXG4gICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgIH1cbiAgfVxufVxuXG4vLyBcImN1dFwiIGZ1bmN0aW9uYWxpdHlcbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZU1vdmVfbW9kZV9ub2RlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdub2RlX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBzbmFwID0gdGhpcy5jYWxjdWxfc25hcChldmVudCwgdGhpcy5ncmlkX3NuYXApXG5cbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICgoYWRkTm9kZSA9IHRoaXMuZWRpdG9yLm5lYXJXYWxsKHNuYXAsIDMwKSkpIHtcbiAgICAgIHZhciB4MiA9IGFkZE5vZGUud2FsbC5lbmQueFxuICAgICAgdmFyIHkyID0gYWRkTm9kZS53YWxsLmVuZC55XG4gICAgICB2YXIgeDEgPSBhZGROb2RlLndhbGwuc3RhcnQueFxuICAgICAgdmFyIHkxID0gYWRkTm9kZS53YWxsLnN0YXJ0LnlcbiAgICAgIGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZSh4MSwgeTEsIHgyLCB5MilcbiAgICAgIHRoaXMuYmluZGVyID0gdGhpcy5xU1ZHLmNyZWF0ZSgnYm94YmluZCcsICdwYXRoJywge1xuICAgICAgICBpZDogJ2NpcmNsZWJpbmRlcicsXG4gICAgICAgIGQ6ICdNLTIwLC0xMCBMLTEzLDAgTC0yMCwxMCBaIE0tMTMsMCBMMTMsMCBNMTMsMCBMMjAsLTEwIEwyMCwxMCBaJyxcbiAgICAgICAgc3Ryb2tlOiAnIzVjYmE3OScsXG4gICAgICAgIGZpbGw6ICcjNWNiYTc5JyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6ICcxLjVweCcsXG4gICAgICB9KVxuICAgICAgdGhpcy5iaW5kZXIuYXR0cih7XG4gICAgICAgIHRyYW5zZm9ybTpcbiAgICAgICAgICAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgIGFkZE5vZGUueCArXG4gICAgICAgICAgJywnICtcbiAgICAgICAgICBhZGROb2RlLnkgK1xuICAgICAgICAgICcpIHJvdGF0ZSgnICtcbiAgICAgICAgICAoYW5nbGVXYWxsLmRlZyArIDkwKSArXG4gICAgICAgICAgJywwLDApJyxcbiAgICAgIH0pXG4gICAgICB0aGlzLmJpbmRlci5kYXRhID0gYWRkTm9kZVxuICAgICAgdGhpcy5iaW5kZXIueDEgPSB4MVxuICAgICAgdGhpcy5iaW5kZXIueDIgPSB4MlxuICAgICAgdGhpcy5iaW5kZXIueTEgPSB5MVxuICAgICAgdGhpcy5iaW5kZXIueTIgPSB5MlxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoKGFkZE5vZGUgPSB0aGlzLmVkaXRvci5uZWFyV2FsbChzbmFwLCAzMCkpKSB7XG4gICAgICBpZiAoYWRkTm9kZSkge1xuICAgICAgICB2YXIgeDIgPSBhZGROb2RlLndhbGwuZW5kLnhcbiAgICAgICAgdmFyIHkyID0gYWRkTm9kZS53YWxsLmVuZC55XG4gICAgICAgIHZhciB4MSA9IGFkZE5vZGUud2FsbC5zdGFydC54XG4gICAgICAgIHZhciB5MSA9IGFkZE5vZGUud2FsbC5zdGFydC55XG4gICAgICAgIGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZSh4MSwgeTEsIHgyLCB5MilcbiAgICAgICAgdGhpcy5iaW5kZXIuYXR0cih7XG4gICAgICAgICAgdHJhbnNmb3JtOlxuICAgICAgICAgICAgJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgIGFkZE5vZGUueCArXG4gICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgYWRkTm9kZS55ICtcbiAgICAgICAgICAgICcpIHJvdGF0ZSgnICtcbiAgICAgICAgICAgIChhbmdsZVdhbGwuZGVnICsgOTApICtcbiAgICAgICAgICAgICcsMCwwKScsXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuYmluZGVyLmRhdGEgPSBhZGROb2RlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBpcyBmb3Igd2hlbiBhbiBTVkcgZWxlbWVudCBpcyBiZWluZyBpbnRlcmFjdGVkIHdpdGhcbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZU1vdmVfbW9kZV9iaW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdiaW5kX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3Qgc25hcCA9IHRoaXMuY2FsY3VsX3NuYXAoZXZlbnQsIHRoaXMuZ3JpZF9zbmFwKVxuXG4gIGlmICh0aGlzLmJpbmRlci50eXBlID09ICdub2RlJykge1xuICAgIGNvbnN0IGNvb3JkcyA9IHNuYXBcbiAgICBsZXQgbWFnbmV0aWMgPSBmYWxzZVxuICAgIGZvciAodmFyIGsgaW4gdGhpcy53YWxsTGlzdFJ1bikge1xuICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyh0aGlzLndhbGxMaXN0UnVuW2tdLmVuZCwgdGhpcy5iaW5kZXIuZGF0YSkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMud2FsbExpc3RSdW5ba10uc3RhcnQueCAtIHNuYXAueCkgPCAyMCkge1xuICAgICAgICAgIGNvb3Jkcy54ID0gdGhpcy53YWxsTGlzdFJ1bltrXS5zdGFydC54XG4gICAgICAgICAgbWFnbmV0aWMgPSAnSCdcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy53YWxsTGlzdFJ1bltrXS5zdGFydC55IC0gc25hcC55KSA8IDIwKSB7XG4gICAgICAgICAgY29vcmRzLnkgPSB0aGlzLndhbGxMaXN0UnVuW2tdLnN0YXJ0LnlcbiAgICAgICAgICBtYWduZXRpYyA9ICdWJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3RzRXF1YWxzKHRoaXMud2FsbExpc3RSdW5ba10uc3RhcnQsIHRoaXMuYmluZGVyLmRhdGEpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLndhbGxMaXN0UnVuW2tdLmVuZC54IC0gc25hcC54KSA8IDIwKSB7XG4gICAgICAgICAgY29vcmRzLnggPSB0aGlzLndhbGxMaXN0UnVuW2tdLmVuZC54XG4gICAgICAgICAgbWFnbmV0aWMgPSAnSCdcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy53YWxsTGlzdFJ1bltrXS5lbmQueSAtIHNuYXAueSkgPCAyMCkge1xuICAgICAgICAgIGNvb3Jkcy55ID0gdGhpcy53YWxsTGlzdFJ1bltrXS5lbmQueVxuICAgICAgICAgIG1hZ25ldGljID0gJ1YnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoKG5vZGVNb3ZlID0gdGhpcy5lZGl0b3IubmVhcldhbGxOb2RlKHNuYXAsIDE1LCB0aGlzLndhbGxMaXN0UnVuKSkpIHtcbiAgICAgIGNvb3Jkcy54ID0gbm9kZU1vdmUueFxuICAgICAgY29vcmRzLnkgPSBub2RlTW92ZS55XG4gICAgICAkKCcjY2lyY2xlYmluZGVyJykuYXR0cih7XG4gICAgICAgIGNsYXNzOiAnY2lyY2xlR3VtJyxcbiAgICAgICAgY3g6IGNvb3Jkcy54LFxuICAgICAgICBjeTogY29vcmRzLnksXG4gICAgICB9KVxuICAgICAgY3Vyc29yKCdncmFiJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hZ25ldGljICE9IGZhbHNlKSB7XG4gICAgICAgIGlmIChtYWduZXRpYyA9PSAnSCcpIHtcbiAgICAgICAgICBzbmFwLnggPSBjb29yZHMueFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNuYXAueSA9IGNvb3Jkcy55XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgodGhpcy5oZWxwQ29uc3RydWMgPSB0aGlzLmludGVyc2VjdGlvbihzbmFwLCAxMCwgdGhpcy53YWxsTGlzdFJ1bikpKSB7XG4gICAgICAgIGNvb3Jkcy54ID0gdGhpcy5oZWxwQ29uc3RydWMueFxuICAgICAgICBjb29yZHMueSA9IHRoaXMuaGVscENvbnN0cnVjLnlcbiAgICAgICAgc25hcC54ID0gdGhpcy5oZWxwQ29uc3RydWMueFxuICAgICAgICBzbmFwLnkgPSB0aGlzLmhlbHBDb25zdHJ1Yy55XG4gICAgICAgIGlmIChtYWduZXRpYyAhPSBmYWxzZSkge1xuICAgICAgICAgIGlmIChtYWduZXRpYyA9PSAnSCcpIHtcbiAgICAgICAgICAgIHNuYXAueCA9IGNvb3Jkcy54XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNuYXAueSA9IGNvb3Jkcy55XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnNvcignZ3JhYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJzb3IoJ21vdmUnKVxuICAgICAgfVxuICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgIC8vJCgnI2NpcmNsZWJpbmRlcicpLmF0dHIoe1wiY2xhc3NcIjogXCJjaXJjbGVfY3NzXCIsIGN4OiBjb29yZHMueCwgY3k6IGNvb3Jkcy55fSk7XG4gICAgfVxuICAgIGZvciAodmFyIGsgaW4gdGhpcy53YWxsTGlzdFJ1bikge1xuICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyh0aGlzLndhbGxMaXN0UnVuW2tdLnN0YXJ0LCB0aGlzLmJpbmRlci5kYXRhKSkge1xuICAgICAgICB0aGlzLndhbGxMaXN0UnVuW2tdLnN0YXJ0LnggPSBjb29yZHMueFxuICAgICAgICB0aGlzLndhbGxMaXN0UnVuW2tdLnN0YXJ0LnkgPSBjb29yZHMueVxuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyh0aGlzLndhbGxMaXN0UnVuW2tdLmVuZCwgdGhpcy5iaW5kZXIuZGF0YSkpIHtcbiAgICAgICAgdGhpcy53YWxsTGlzdFJ1bltrXS5lbmQueCA9IGNvb3Jkcy54XG4gICAgICAgIHRoaXMud2FsbExpc3RSdW5ba10uZW5kLnkgPSBjb29yZHMueVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmJpbmRlci5kYXRhID0gY29vcmRzXG4gICAgdGhpcy5lZGl0b3Iud2FsbHNDb21wdXRpbmcodGhpcy5XQUxMUywgZmFsc2UpIC8vIFVQREFURSBGQUxTRVxuXG4gICAgZm9yICh2YXIgayBpbiB0aGlzLndhbGxMaXN0T2JqKSB7XG4gICAgICB2YXIgd2FsbCA9IHRoaXMud2FsbExpc3RPYmpba10ud2FsbFxuICAgICAgdmFyIG9ialRhcmdldCA9IHRoaXMud2FsbExpc3RPYmpba10ub2JqXG4gICAgICB2YXIgYW5nbGVXYWxsID0gdGhpcy5xU1ZHLmFuZ2xlRGVnKFxuICAgICAgICB3YWxsLnN0YXJ0LngsXG4gICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgd2FsbC5lbmQueCxcbiAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgIClcbiAgICAgIHZhciBsaW1pdHMgPSBsaW1pdE9iaihcbiAgICAgICAgd2FsbC5lcXVhdGlvbnMuYmFzZSxcbiAgICAgICAgMiAqIHRoaXMud2FsbExpc3RPYmpba10uZGlzdGFuY2UsXG4gICAgICAgIHRoaXMud2FsbExpc3RPYmpba10uZnJvbVxuICAgICAgKSAvLyBDT09SRFMgT0JKIEFGVEVSIFJPVEFUSU9OXG4gICAgICBsZXQgaW5kZXhMaW1pdHMgPSAwXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpXG4gICAgICApIHtcbiAgICAgICAgaW5kZXhMaW1pdHMgPSAxXG4gICAgICB9XG4gICAgICAvLyBORVcgQ09PUkRTIE9CSkRBVEFbb2JqXVxuICAgICAgb2JqVGFyZ2V0LnggPSBsaW1pdHNbaW5kZXhMaW1pdHNdLnhcbiAgICAgIG9ialRhcmdldC55ID0gbGltaXRzW2luZGV4TGltaXRzXS55XG4gICAgICBvYmpUYXJnZXQuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgIGlmIChvYmpUYXJnZXQuYW5nbGVTaWduID09IDEpIHtcbiAgICAgICAgb2JqVGFyZ2V0LmFuZ2xlID0gYW5nbGVXYWxsICsgMTgwXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxpbWl0QnR3biA9IGxpbWl0T2JqKHdhbGwuZXF1YXRpb25zLmJhc2UsIG9ialRhcmdldC5zaXplKSAvLyBPQkogU0laRSBPSyBCVFdOIHh5MS94eTJcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdEJ0d25bMF0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdEJ0d25bMF0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdEJ0d25bMV0ueCwgd2FsbC5zdGFydC54LCB3YWxsLmVuZC54KSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdEJ0d25bMV0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgKSB7XG4gICAgICAgIG9ialRhcmdldC5saW1pdCA9IGxpbWl0QnR3blxuICAgICAgICBvYmpUYXJnZXQudXBkYXRlKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialRhcmdldC5ncmFwaC5yZW1vdmUoKVxuICAgICAgICBvYmpUYXJnZXQgPSB1bmRlZmluZWRcbiAgICAgICAgT0JKREFUQS5zcGxpY2Uod2FsbC5pbmRleE9iaiwgMSlcbiAgICAgICAgd2FsbExpc3RPYmouc3BsaWNlKGssIDEpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciAoayBpbiB0b0NsZWFuKVxuICAgICQoJyNib3hSb29tJykuZW1wdHkoKVxuICAgICQoJyNib3hTdXJmYWNlJykuZW1wdHkoKVxuICAgIFJvb21zID0gdGhpcy5xU1ZHLnBvbHlnb25pemUodGhpcy5XQUxMUylcbiAgICB0aGlzLmVkaXRvci5yb29tTWFrZXIoUm9vbXMpXG4gIH1cblxuICAvLyBXQUxMIE1PVklORyAtLS0tQklOREVSIFRZUEUgU0VHTUVOVC0tLS0tLS0tIEZVTkNUSU9OIEZPUiBILFYgYW5kIENhbGN1bGF0ZSBWZWN0b3JpYWwgVHJhbnNsYXRpb25cblxuICBpZiAodGhpcy5iaW5kZXIudHlwZSA9PSAnc2VnbWVudCcgJiYgdGhpcy5hY3Rpb24gPT0gMSkge1xuICAgIHRoaXMucmliKClcblxuICAgIGlmICh0aGlzLmVxdWF0aW9uMi5BID09ICd2Jykge1xuICAgICAgdGhpcy5lcXVhdGlvbjIuQiA9IHNuYXAueFxuICAgIH0gZWxzZSBpZiAodGhpcy5lcXVhdGlvbjIuQSA9PSAnaCcpIHtcbiAgICAgIHRoaXMuZXF1YXRpb24yLkIgPSBzbmFwLnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcXVhdGlvbjIuQiA9IHNuYXAueSAtIHNuYXAueCAqIHRoaXMuZXF1YXRpb24yLkFcbiAgICB9XG5cbiAgICBjb25zdCBpbnRlcnNlY3Rpb24xID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgdGhpcy5lcXVhdGlvbjEsXG4gICAgICB0aGlzLmVxdWF0aW9uMixcbiAgICAgICdvYmonLFxuICAgIClcbiAgICBjb25zdCBpbnRlcnNlY3Rpb24yID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgdGhpcy5lcXVhdGlvbjIsXG4gICAgICB0aGlzLmVxdWF0aW9uMyxcbiAgICAgICdvYmonLFxuICAgIClcbiAgICBjb25zdCBpbnRlcnNlY3Rpb24zID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgdGhpcy5lcXVhdGlvbjEsXG4gICAgICB0aGlzLmVxdWF0aW9uMyxcbiAgICAgICdvYmonLFxuICAgIClcblxuICAgIGlmICh0aGlzLmJpbmRlci53YWxsLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGlzT2JqZWN0c0VxdWFscyh0aGlzLmJpbmRlci53YWxsLnBhcmVudC5lbmQsIHRoaXMuYmluZGVyLndhbGwuc3RhcnQpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5wYXJlbnQuZW5kID0gaW50ZXJzZWN0aW9uMVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgaXNPYmplY3RzRXF1YWxzKHRoaXMuYmluZGVyLndhbGwucGFyZW50LnN0YXJ0LCB0aGlzLmJpbmRlci53YWxsLnN0YXJ0KVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLndhbGwucGFyZW50LnN0YXJ0ID0gaW50ZXJzZWN0aW9uMVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5wYXJlbnQuZW5kID0gaW50ZXJzZWN0aW9uMVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmJpbmRlci53YWxsLmNoaWxkICE9IG51bGwpIHtcbiAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy5iaW5kZXIud2FsbC5jaGlsZC5zdGFydCwgdGhpcy5iaW5kZXIud2FsbC5lbmQpKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLndhbGwuY2hpbGQuc3RhcnQgPSBpbnRlcnNlY3Rpb24yXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBpc09iamVjdHNFcXVhbHModGhpcy5iaW5kZXIud2FsbC5jaGlsZC5lbmQsIHRoaXMuYmluZGVyLndhbGwuZW5kKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLndhbGwuY2hpbGQuZW5kID0gaW50ZXJzZWN0aW9uMlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5jaGlsZC5zdGFydCA9IGludGVyc2VjdGlvbjJcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0ID0gaW50ZXJzZWN0aW9uMVxuICAgIHRoaXMuYmluZGVyLndhbGwuZW5kID0gaW50ZXJzZWN0aW9uMlxuICAgIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICAgLy8gYmluZGVyLmdyYXBoWzBdLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcIngxXCIsaW50ZXJzZWN0aW9uMS54KTtcbiAgICAvLyBiaW5kZXIuZ3JhcGhbMF0uY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwieDJcIixpbnRlcnNlY3Rpb24yLngpO1xuICAgIC8vIGJpbmRlci5ncmFwaFswXS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJ5MVwiLGludGVyc2VjdGlvbjEueSk7XG4gICAgLy8gYmluZGVyLmdyYXBoWzBdLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcInkyXCIsaW50ZXJzZWN0aW9uMi55KTtcbiAgICAvLyBiaW5kZXIuZ3JhcGhbMF0uY2hpbGRyZW5bMV0uc2V0QXR0cmlidXRlKFwiY3hcIixpbnRlcnNlY3Rpb24xLngpO1xuICAgIC8vIGJpbmRlci5ncmFwaFswXS5jaGlsZHJlblsxXS5zZXRBdHRyaWJ1dGUoXCJjeVwiLGludGVyc2VjdGlvbjEueSk7XG4gICAgLy8gYmluZGVyLmdyYXBoWzBdLmNoaWxkcmVuWzJdLnNldEF0dHJpYnV0ZShcImN4XCIsaW50ZXJzZWN0aW9uMi54KTtcbiAgICAvLyBiaW5kZXIuZ3JhcGhbMF0uY2hpbGRyZW5bMl0uc2V0QXR0cmlidXRlKFwiY3lcIixpbnRlcnNlY3Rpb24yLnkpO1xuXG4gICAgLy8gVEhFIEVRIEZPTExPV0VEIEJZIGVxIChQQVJFTlQgRVExIC0tLSBDSElMRCBFUTMpXG4gICAgaWYgKHRoaXMuZXF1YXRpb24xLmZvbGxvdyAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5xU1ZHLnJheUNhc3RpbmcoaW50ZXJzZWN0aW9uMSwgdGhpcy5lcXVhdGlvbjEuYmFja1VwLmNvb3JkcykpIHtcbiAgICAgICAgLy8gSUYgT1VUIE9GIFdBTEwgRk9MTE9XRURcbiAgICAgICAgdmFyIGRpc3RhbmNlRnJvbVN0YXJ0ID0gdGhpcy5xU1ZHLmdhcChcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMS5iYWNrVXAuc3RhcnQsXG4gICAgICAgICAgaW50ZXJzZWN0aW9uMSxcbiAgICAgICAgKVxuICAgICAgICB2YXIgZGlzdGFuY2VGcm9tRW5kID0gdGhpcy5xU1ZHLmdhcChcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMS5iYWNrVXAuZW5kLFxuICAgICAgICAgIGludGVyc2VjdGlvbjEsXG4gICAgICAgIClcbiAgICAgICAgaWYgKGRpc3RhbmNlRnJvbVN0YXJ0ID4gZGlzdGFuY2VGcm9tRW5kKSB7XG4gICAgICAgICAgLy8gTkVBUiBGUk9NIEVuZFxuICAgICAgICAgIHRoaXMuZXF1YXRpb24xLmZvbGxvdy5lbmQgPSBpbnRlcnNlY3Rpb24xXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lcXVhdGlvbjEuZm9sbG93LnN0YXJ0ID0gaW50ZXJzZWN0aW9uMVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVxdWF0aW9uMS5mb2xsb3cuZW5kID0gdGhpcy5lcXVhdGlvbjEuYmFja1VwLmVuZFxuICAgICAgICB0aGlzLmVxdWF0aW9uMS5mb2xsb3cuc3RhcnQgPSB0aGlzLmVxdWF0aW9uMS5iYWNrVXAuc3RhcnRcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZXF1YXRpb24zLmZvbGxvdyAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghdGhpcy5xU1ZHLnJheUNhc3RpbmcoaW50ZXJzZWN0aW9uMiwgdGhpcy5lcXVhdGlvbjMuYmFja1VwLmNvb3JkcykpIHtcbiAgICAgICAgLy8gSUYgT1VUIE9GIFdBTEwgRk9MTE9XRURcbiAgICAgICAgdmFyIGRpc3RhbmNlRnJvbVN0YXJ0ID0gdGhpcy5xU1ZHLmdhcChcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMy5iYWNrVXAuc3RhcnQsXG4gICAgICAgICAgaW50ZXJzZWN0aW9uMixcbiAgICAgICAgKVxuICAgICAgICB2YXIgZGlzdGFuY2VGcm9tRW5kID0gdGhpcy5xU1ZHLmdhcChcbiAgICAgICAgICB0aGlzLmVxdWF0aW9uMy5iYWNrVXAuZW5kLFxuICAgICAgICAgIGludGVyc2VjdGlvbjIsXG4gICAgICAgIClcbiAgICAgICAgaWYgKGRpc3RhbmNlRnJvbVN0YXJ0ID4gZGlzdGFuY2VGcm9tRW5kKSB7XG4gICAgICAgICAgLy8gTkVBUiBGUk9NIEVuZFxuICAgICAgICAgIHRoaXMuZXF1YXRpb24zLmZvbGxvdy5lbmQgPSBpbnRlcnNlY3Rpb24yXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lcXVhdGlvbjMuZm9sbG93LnN0YXJ0ID0gaW50ZXJzZWN0aW9uMlxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVxdWF0aW9uMy5mb2xsb3cuZW5kID0gdGhpcy5lcXVhdGlvbjMuYmFja1VwLmVuZFxuICAgICAgICB0aGlzLmVxdWF0aW9uMy5mb2xsb3cuc3RhcnQgPSB0aGlzLmVxdWF0aW9uMy5iYWNrVXAuc3RhcnRcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFUSBGT0xMT1dFUlMgV0FMTCBNT1ZJTkdcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXF1YXRpb25Gb2xsb3dlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbkZvbGxvd2VycyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgdGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS5lcSxcbiAgICAgICAgdGhpcy5lcXVhdGlvbjIsXG4gICAgICAgICdvYmonLFxuICAgICAgKVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICBpbnRlcnNlY3Rpb25Gb2xsb3dlcnMueCxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LngsXG4gICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueCxcbiAgICAgICAgICAncm91bmQnLFxuICAgICAgICApICYmXG4gICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgIGludGVyc2VjdGlvbkZvbGxvd2Vycy55LFxuICAgICAgICAgIHRoaXMuYmluZGVyLndhbGwuc3RhcnQueSxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLmVuZC55LFxuICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5xU1ZHLm1lYXN1cmUoXG4gICAgICAgICAgdGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS53YWxsLnN0YXJ0LFxuICAgICAgICAgIHRoaXMuZXF1YXRpb25Gb2xsb3dlcnNbaV0ud2FsbC5lbmQsXG4gICAgICAgIClcbiAgICAgICAgaWYgKHRoaXMuZXF1YXRpb25Gb2xsb3dlcnNbaV0udHlwZSA9PSAnc3RhcnQnKSB7XG4gICAgICAgICAgdGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS53YWxsLnN0YXJ0ID0gaW50ZXJzZWN0aW9uRm9sbG93ZXJzXG4gICAgICAgICAgaWYgKHNpemUgPCA1KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS53YWxsLmNoaWxkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5XQUxMUy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5XQUxMUy5pbmRleE9mKHRoaXMuZXF1YXRpb25Gb2xsb3dlcnNbaV0ud2FsbCksXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB0aGlzLmVxdWF0aW9uRm9sbG93ZXJzLnNwbGljZShpLCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS50eXBlID09ICdlbmQnKSB7XG4gICAgICAgICAgdGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS53YWxsLmVuZCA9IGludGVyc2VjdGlvbkZvbGxvd2Vyc1xuICAgICAgICAgIGlmIChzaXplIDwgNSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXF1YXRpb25Gb2xsb3dlcnNbaV0ud2FsbC5wYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLldBTExTLnNwbGljZShcbiAgICAgICAgICAgICAgICB0aGlzLldBTExTLmluZGV4T2YodGhpcy5lcXVhdGlvbkZvbGxvd2Vyc1tpXS53YWxsKSxcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHRoaXMuZXF1YXRpb25Gb2xsb3dlcnMuc3BsaWNlKGksIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdBTEwgQ09NUFVUSU5HLCBCTE9DSyBGQU1JTFkgT0YgQklOREVSV0FMTCBJRiBOVUxMIChTVEFSVCBPUiBFTkQpICEhISEhXG4gICAgdGhpcy5lZGl0b3Iud2FsbHNDb21wdXRpbmcodGhpcy5XQUxMUywgJ21vdmUnKVxuICAgIFJvb21zID0gdGhpcy5xU1ZHLnBvbHlnb25pemUodGhpcy5XQUxMUylcblxuICAgIC8vIE9CSkRBVEEocykgRk9MTE9XIDkwwrAgRURHRSBTRUxFQ1RFRFxuICAgIGZvciAobGV0IHJwID0gMDsgcnAgPCB0aGlzLmVxdWF0aW9uc09iai5sZW5ndGg7IHJwKyspIHtcbiAgICAgIHZhciBvYmpUYXJnZXQgPSB0aGlzLmVxdWF0aW9uc09ialtycF0ub2JqXG4gICAgICBjb25zdCBpbnRlcnNlY3Rpb25PYmogPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgIHRoaXMuZXF1YXRpb25zT2JqW3JwXS5lcSxcbiAgICAgICAgdGhpcy5lcXVhdGlvbjIsXG4gICAgICApXG4gICAgICAvLyBORVcgQ09PUkRTIE9CSkRBVEFbb11cbiAgICAgIG9ialRhcmdldC54ID0gaW50ZXJzZWN0aW9uT2JqWzBdXG4gICAgICBvYmpUYXJnZXQueSA9IGludGVyc2VjdGlvbk9ialsxXVxuICAgICAgdmFyIGxpbWl0cyA9IGxpbWl0T2JqKHRoaXMuZXF1YXRpb24yLCBvYmpUYXJnZXQuc2l6ZSwgb2JqVGFyZ2V0KVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICBsaW1pdHNbMF0ueCxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LngsXG4gICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueCxcbiAgICAgICAgKSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICBsaW1pdHNbMF0ueSxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LnksXG4gICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueSxcbiAgICAgICAgKSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICBsaW1pdHNbMV0ueCxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LngsXG4gICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueCxcbiAgICAgICAgKSAmJlxuICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICBsaW1pdHNbMV0ueSxcbiAgICAgICAgICB0aGlzLmJpbmRlci53YWxsLnN0YXJ0LnksXG4gICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIG9ialRhcmdldC5saW1pdCA9IGxpbWl0c1xuICAgICAgICBvYmpUYXJnZXQudXBkYXRlKClcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gREVMRVRJTkcgQUxMIE9CSkVDVCBcIklOV0FMTFwiIE9WRVJTSVpFRCBJTlRPIElUUyBFREdFIChFREdFIEJZIEVER0UgQ09OVFJPTClcbiAgICBmb3IgKHZhciBrIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgIHZhciBvYmpXYWxsID0gdGhpcy5lZGl0b3Iub2JqRnJvbVdhbGwodGhpcy5XQUxMU1trXSkgLy8gTElTVCBPQkogT04gRURHRVxuICAgICAgZm9yICh2YXIgb2IgaW4gb2JqV2FsbCkge1xuICAgICAgICB2YXIgb2JqVGFyZ2V0ID0gb2JqV2FsbFtvYl1cbiAgICAgICAgY29uc3QgZXEgPSB0aGlzLmVkaXRvci5jcmVhdGVFcXVhdGlvbkZyb21XYWxsKHRoaXMuV0FMTFNba10pXG4gICAgICAgIHZhciBsaW1pdHMgPSBsaW1pdE9iaihlcSwgb2JqVGFyZ2V0LnNpemUsIG9ialRhcmdldClcbiAgICAgICAgaWYgKFxuICAgICAgICAgICF0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgIGxpbWl0c1swXS54LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5zdGFydC54LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5lbmQueCxcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgIXRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgbGltaXRzWzBdLnksXG4gICAgICAgICAgICB0aGlzLldBTExTW2tdLnN0YXJ0LnksXG4gICAgICAgICAgICB0aGlzLldBTExTW2tdLmVuZC55LFxuICAgICAgICAgICkgfHxcbiAgICAgICAgICAhdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICBsaW1pdHNbMV0ueCxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNba10uc3RhcnQueCxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNba10uZW5kLngsXG4gICAgICAgICAgKSB8fFxuICAgICAgICAgICF0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgIGxpbWl0c1sxXS55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5zdGFydC55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5lbmQueSxcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIG9ialRhcmdldC5ncmFwaC5yZW1vdmUoKVxuICAgICAgICAgIG9ialRhcmdldCA9IHVuZGVmaW5lZFxuICAgICAgICAgIGNvbnN0IGluZGV4T2JqID0gdGhpcy5PQkpEQVRBLmluZGV4T2Yob2JqVGFyZ2V0KVxuICAgICAgICAgIHRoaXMuT0JKREFUQS5zcGxpY2UoaW5kZXhPYmosIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVxdWF0aW9uc09iaiA9IFtdIC8vIFJFSU5JVCBlcU9iaiAtPiBNQVlCRSBPTkUgT1IgUExVUyBPRiBPQkpEQVRBIFJFTU9WRUQgISEhIVxuICAgIHZhciBvYmpXYWxsID0gdGhpcy5lZGl0b3Iub2JqRnJvbVdhbGwodGhpcy5iaW5kZXIud2FsbCkgLy8gTElTVCBPQkogT04gRURHRVxuICAgIGZvciAodmFyIG9iID0gMDsgb2IgPCBvYmpXYWxsLmxlbmd0aDsgb2IrKykge1xuICAgICAgdmFyIG9ialRhcmdldCA9IG9ialdhbGxbb2JdXG4gICAgICB0aGlzLmVxdWF0aW9uc09iai5wdXNoKHtcbiAgICAgICAgb2JqOiBvYmpUYXJnZXQsXG4gICAgICAgIHdhbGw6IHRoaXMuYmluZGVyLndhbGwsXG4gICAgICAgIGVxOiB0aGlzLnFTVkcucGVycGVuZGljdWxhckVxdWF0aW9uKFxuICAgICAgICAgIHRoaXMuZXF1YXRpb24yLFxuICAgICAgICAgIG9ialRhcmdldC54LFxuICAgICAgICAgIG9ialRhcmdldC55LFxuICAgICAgICApLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAkKCcjYm94Um9vbScpLmVtcHR5KClcbiAgICAkKCcjYm94U3VyZmFjZScpLmVtcHR5KClcbiAgICB0aGlzLmVkaXRvci5yb29tTWFrZXIoUm9vbXMpXG4gICAgJCgnI2xpbicpLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKVxuICB9XG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBCT1VORElORyBCT1ggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgLy8gYmluZGVyLm9iai5wYXJhbXMubW92ZSAtLS0+IEZPUiBNRUFTVVJFIERPTlQgTU9WRVxuICBpZiAoXG4gICAgdGhpcy5iaW5kZXIudHlwZSA9PSAnYm91bmRpbmdCb3gnICYmXG4gICAgdGhpcy5hY3Rpb24gPT0gMSAmJlxuICAgIHRoaXMuYmluZGVyLm9iai5wYXJhbXMubW92ZVxuICApIHtcbiAgICB0aGlzLmJpbmRlci54ID0gc25hcC54XG4gICAgdGhpcy5iaW5kZXIueSA9IHNuYXAueVxuICAgIHRoaXMuYmluZGVyLm9iai54ID0gc25hcC54XG4gICAgdGhpcy5iaW5kZXIub2JqLnkgPSBzbmFwLnlcbiAgICB0aGlzLmJpbmRlci5vYmoudXBkYXRlKClcbiAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICB9XG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBPQkogTU9WSU5HXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgaWYgKHRoaXMuYmluZGVyLnR5cGUgPT0gJ29iaicgJiYgdGhpcy5hY3Rpb24gPT0gMSkge1xuICAgIGlmICgod2FsbFNlbGVjdCA9IHRoaXMuZWRpdG9yLm5lYXJXYWxsKHNuYXApKSkge1xuICAgICAgaWYgKHdhbGxTZWxlY3Qud2FsbC50eXBlICE9ICdzZXBhcmF0ZScpIHtcbiAgICAgICAgdGhpcy5pbldhbGxSaWIod2FsbFNlbGVjdC53YWxsKVxuXG4gICAgICAgIHZhciBvYmpUYXJnZXQgPSB0aGlzLmJpbmRlci5vYmpcbiAgICAgICAgdmFyIHdhbGwgPSB3YWxsU2VsZWN0LndhbGxcbiAgICAgICAgdmFyIGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZURlZyhcbiAgICAgICAgICB3YWxsLnN0YXJ0LngsXG4gICAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgKVxuICAgICAgICBjb25zdCB2MSA9IHRoaXMucVNWRy52ZWN0b3JYWShcbiAgICAgICAgICB7IHg6IHdhbGwuc3RhcnQueCwgeTogd2FsbC5zdGFydC55IH0sXG4gICAgICAgICAgeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgdjIgPSB0aGlzLnFTVkcudmVjdG9yWFkoeyB4OiB3YWxsLmVuZC54LCB5OiB3YWxsLmVuZC55IH0sIHNuYXApXG4gICAgICAgIGNvbnN0IG5ld0FuZ2xlID0gdGhpcy5xU1ZHLnZlY3RvckRldGVyKHYxLCB2MilcbiAgICAgICAgdGhpcy5iaW5kZXIuYW5nbGVTaWduID0gMFxuICAgICAgICBvYmpUYXJnZXQuYW5nbGVTaWduID0gMFxuICAgICAgICBpZiAoTWF0aC5zaWduKG5ld0FuZ2xlKSA9PSAxKSB7XG4gICAgICAgICAgYW5nbGVXYWxsICs9IDE4MFxuICAgICAgICAgIHRoaXMuYmluZGVyLmFuZ2xlU2lnbiA9IDFcbiAgICAgICAgICBvYmpUYXJnZXQuYW5nbGVTaWduID0gMVxuICAgICAgICB9XG4gICAgICAgIHZhciBsaW1pdHMgPSBsaW1pdE9iaih3YWxsLmVxdWF0aW9ucy5iYXNlLCB0aGlzLmJpbmRlci5zaXplLCB3YWxsU2VsZWN0KVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMF0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzFdLnksIHdhbGwuc3RhcnQueSwgd2FsbC5lbmQueSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5iaW5kZXIueCA9IHdhbGxTZWxlY3QueFxuICAgICAgICAgIHRoaXMuYmluZGVyLnkgPSB3YWxsU2VsZWN0LnlcbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICAgIHRoaXMuYmluZGVyLnRoaWNrID0gd2FsbC50aGlja1xuICAgICAgICAgIG9ialRhcmdldC54ID0gd2FsbFNlbGVjdC54XG4gICAgICAgICAgb2JqVGFyZ2V0LnkgPSB3YWxsU2VsZWN0LnlcbiAgICAgICAgICBvYmpUYXJnZXQuYW5nbGUgPSBhbmdsZVdhbGxcbiAgICAgICAgICBvYmpUYXJnZXQudGhpY2sgPSB3YWxsLnRoaWNrXG4gICAgICAgICAgb2JqVGFyZ2V0LmxpbWl0ID0gbGltaXRzXG4gICAgICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICAgICAgICBvYmpUYXJnZXQudXBkYXRlKClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAod2FsbFNlbGVjdC54ID09IHdhbGwuc3RhcnQueCAmJiB3YWxsU2VsZWN0LnkgPT0gd2FsbC5zdGFydC55KSB8fFxuICAgICAgICAgICh3YWxsU2VsZWN0LnggPT0gd2FsbC5lbmQueCAmJiB3YWxsU2VsZWN0LnkgPT0gd2FsbC5lbmQueSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24obGltaXRzWzBdLngsIHdhbGwuc3RhcnQueCwgd2FsbC5lbmQueCkgJiZcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1swXS55LCB3YWxsLnN0YXJ0LnksIHdhbGwuZW5kLnkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmRlci54ID0gbGltaXRzWzBdLnhcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLnkgPSBsaW1pdHNbMF0ueVxuICAgICAgICAgICAgb2JqVGFyZ2V0LnggPSBsaW1pdHNbMF0ueFxuICAgICAgICAgICAgb2JqVGFyZ2V0LnkgPSBsaW1pdHNbMF0ueVxuICAgICAgICAgICAgb2JqVGFyZ2V0LmxpbWl0ID0gbGltaXRzXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKGxpbWl0c1sxXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihsaW1pdHNbMV0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5iaW5kZXIueCA9IGxpbWl0c1sxXS54XG4gICAgICAgICAgICB0aGlzLmJpbmRlci55ID0gbGltaXRzWzFdLnlcbiAgICAgICAgICAgIG9ialRhcmdldC54ID0gbGltaXRzWzFdLnhcbiAgICAgICAgICAgIG9ialRhcmdldC55ID0gbGltaXRzWzFdLnlcbiAgICAgICAgICAgIG9ialRhcmdldC5saW1pdCA9IGxpbWl0c1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICAgIHRoaXMuYmluZGVyLnRoaWNrID0gd2FsbC50aGlja1xuICAgICAgICAgIG9ialRhcmdldC5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICAgIG9ialRhcmdldC50aGljayA9IHdhbGwudGhpY2tcbiAgICAgICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgICAgICAgIG9ialRhcmdldC51cGRhdGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuYmluZGVyLnR5cGUgIT0gJ29iaicgJiYgdGhpcy5iaW5kZXIudHlwZSAhPSAnc2VnbWVudCcpIHtcbiAgICB0aGlzLnJpYigpXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlTW92ZV9tb2RlX3RleHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ3RleHRfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcbiAgaWYgKHRoaXMuYWN0aW9uID09IDApIHtcbiAgICBjdXJzb3IoJ3RleHQnKVxuICB9IGVsc2Uge1xuICAgIGN1cnNvcignbm9uZScpXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlTW92ZV9tb2RlX29iamVjdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnb2JqZWN0X21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBzbmFwID0gdGhpcy5jYWxjdWxfc25hcChldmVudCwgdGhpcy5ncmlkX3NuYXApXG4gIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAkKCcjb2JqZWN0X2xpc3QnKS5oaWRlKDIwMClcbiAgICBpZiAodGhpcy5tb2RlT3B0aW9uID09ICdzaW1wbGVTdGFpcicpIHtcbiAgICAgIHRoaXMuYmluZGVyID0gdGhpcy5lZGl0b3Iub2JqMkQoXG4gICAgICAgICdmcmVlJyxcbiAgICAgICAgJ3N0YWlyJyxcbiAgICAgICAgJ3NpbXBsZVN0YWlyJyxcbiAgICAgICAgc25hcCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgJ25vcm1hbCcsXG4gICAgICAgIDAsXG4gICAgICAgIDE1LFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0eXBlT2JqID0gdGhpcy5tb2RlT3B0aW9uXG4gICAgICB0aGlzLmJpbmRlciA9IHRoaXMuZWRpdG9yLm9iajJEKFxuICAgICAgICAnZnJlZScsXG4gICAgICAgICdlbmVyZ3knLFxuICAgICAgICB0eXBlT2JqLFxuICAgICAgICBzbmFwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAnbm9ybWFsJyxcbiAgICAgICAgMCxcbiAgICAgIClcbiAgICB9XG5cbiAgICAkKCcjYm94YmluZCcpLmFwcGVuZCh0aGlzLmJpbmRlci5ncmFwaClcbiAgfSBlbHNlIHtcbiAgICBpZiAoXG4gICAgICAodGhpcy5iaW5kZXIuZmFtaWx5ICE9ICdzdGljaycgJiYgdGhpcy5iaW5kZXIuZmFtaWx5ICE9ICdjb2xsaXNpb24nKSB8fFxuICAgICAgdGhpcy5XQUxMUy5sZW5ndGggPT0gMFxuICAgICkge1xuICAgICAgdGhpcy5iaW5kZXIueCA9IHNuYXAueFxuICAgICAgdGhpcy5iaW5kZXIueSA9IHNuYXAueVxuICAgICAgdGhpcy5iaW5kZXIub2xkWCA9IHRoaXMuYmluZGVyLnhcbiAgICAgIHRoaXMuYmluZGVyLm9sZFkgPSB0aGlzLmJpbmRlci55XG4gICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIuZmFtaWx5ID09ICdjb2xsaXNpb24nKSB7XG4gICAgICBsZXQgZm91bmQgPSBmYWxzZVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZWRpdG9yLnJheUNhc3RpbmdXYWxscyh7XG4gICAgICAgICAgeDogdGhpcy5iaW5kZXIuYmJveC5sZWZ0LFxuICAgICAgICAgIHk6IHRoaXMuYmluZGVyLmJib3gudG9wLFxuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhZm91bmQgJiZcbiAgICAgICAgdGhpcy5lZGl0b3IucmF5Q2FzdGluZ1dhbGxzKHtcbiAgICAgICAgICB4OiB0aGlzLmJpbmRlci5iYm94LmxlZnQsXG4gICAgICAgICAgeTogdGhpcy5iaW5kZXIuYmJveC5ib3R0b20sXG4gICAgICAgIH0pXG4gICAgICApIHtcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgICFmb3VuZCAmJlxuICAgICAgICB0aGlzLmVkaXRvci5yYXlDYXN0aW5nV2FsbHMoe1xuICAgICAgICAgIHg6IHRoaXMuYmluZGVyLmJib3gucmlnaHQsXG4gICAgICAgICAgeTogdGhpcy5iaW5kZXIuYmJveC50b3AsXG4gICAgICAgIH0pXG4gICAgICApIHtcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgICFmb3VuZCAmJlxuICAgICAgICB0aGlzLmVkaXRvci5yYXlDYXN0aW5nV2FsbHMoe1xuICAgICAgICAgIHg6IHRoaXMuYmluZGVyLmJib3gucmlnaHQsXG4gICAgICAgICAgeTogdGhpcy5iaW5kZXIuYmJveC5ib3R0b20sXG4gICAgICAgIH0pXG4gICAgICApIHtcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgdGhpcy5iaW5kZXIueCA9IHNuYXAueFxuICAgICAgICB0aGlzLmJpbmRlci55ID0gc25hcC55XG4gICAgICAgIHRoaXMuYmluZGVyLm9sZFggPSB0aGlzLmJpbmRlci54XG4gICAgICAgIHRoaXMuYmluZGVyLm9sZFkgPSB0aGlzLmJpbmRlci55XG4gICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRlci54ID0gdGhpcy5iaW5kZXIub2xkWFxuICAgICAgICB0aGlzLmJpbmRlci55ID0gdGhpcy5iaW5kZXIub2xkWVxuICAgICAgICB0aGlzLmJpbmRlci51cGRhdGUoKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIuZmFtaWx5ID09ICdzdGljaycpIHtcbiAgICAgIHBvcyA9IHRoaXMuZWRpdG9yLnN0aWNrT25XYWxsKHNuYXApXG4gICAgICB0aGlzLmJpbmRlci5vbGRYID0gcG9zLnhcbiAgICAgIHRoaXMuYmluZGVyLm9sZFkgPSBwb3MueVxuICAgICAgbGV0IGFuZ2xlV2FsbCA9IHRoaXMucVNWRy5hbmdsZURlZyhcbiAgICAgICAgcG9zLndhbGwuc3RhcnQueCxcbiAgICAgICAgcG9zLndhbGwuc3RhcnQueSxcbiAgICAgICAgcG9zLndhbGwuZW5kLngsXG4gICAgICAgIHBvcy53YWxsLmVuZC55LFxuICAgICAgKVxuICAgICAgY29uc3QgdjEgPSB0aGlzLnFTVkcudmVjdG9yWFkoXG4gICAgICAgIHsgeDogcG9zLndhbGwuc3RhcnQueCwgeTogcG9zLndhbGwuc3RhcnQueSB9LFxuICAgICAgICB7IHg6IHBvcy53YWxsLmVuZC54LCB5OiBwb3Mud2FsbC5lbmQueSB9LFxuICAgICAgKVxuICAgICAgY29uc3QgdjIgPSB0aGlzLnFTVkcudmVjdG9yWFkoXG4gICAgICAgIHsgeDogcG9zLndhbGwuZW5kLngsIHk6IHBvcy53YWxsLmVuZC55IH0sXG4gICAgICAgIHNuYXAsXG4gICAgICApXG4gICAgICB0aGlzLmJpbmRlci54ID1cbiAgICAgICAgcG9zLnggLVxuICAgICAgICAoTWF0aC5zaW4ocG9zLndhbGwuYW5nbGUgKiAoKDM2MCAvIDIpICogTWF0aC5QSSkpICogdGhpcy5iaW5kZXIudGhpY2spIC9cbiAgICAgICAgICAyXG4gICAgICB0aGlzLmJpbmRlci55ID1cbiAgICAgICAgcG9zLnkgLVxuICAgICAgICAoTWF0aC5jb3MocG9zLndhbGwuYW5nbGUgKiAoKDM2MCAvIDIpICogTWF0aC5QSSkpICogdGhpcy5iaW5kZXIudGhpY2spIC9cbiAgICAgICAgICAyXG4gICAgICBjb25zdCBuZXdBbmdsZSA9IHRoaXMucVNWRy52ZWN0b3JEZXRlcih2MSwgdjIpXG4gICAgICBpZiAoTWF0aC5zaWduKG5ld0FuZ2xlKSA9PSAxKSB7XG4gICAgICAgIGFuZ2xlV2FsbCArPSAxODBcbiAgICAgICAgdGhpcy5iaW5kZXIueCA9XG4gICAgICAgICAgcG9zLnggK1xuICAgICAgICAgIChNYXRoLnNpbihwb3Mud2FsbC5hbmdsZSAqICgoMzYwIC8gMikgKiBNYXRoLlBJKSkgKiBiaW5kZXIudGhpY2spIC8gMlxuICAgICAgICB0aGlzLmJpbmRlci55ID1cbiAgICAgICAgICBwb3MueSArXG4gICAgICAgICAgKE1hdGguY29zKHBvcy53YWxsLmFuZ2xlICogKCgzNjAgLyAyKSAqIE1hdGguUEkpKSAqIGJpbmRlci50aGljaykgLyAyXG4gICAgICB9XG4gICAgICB0aGlzLmJpbmRlci5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgdGhpcy5iaW5kZXIudXBkYXRlKClcbiAgICB9XG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlTW92ZV9tb2RlX3Jvb20gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ3Jvb21fbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHNuYXAgPSB0aGlzLmNhbGN1bF9zbmFwKGV2ZW50LCB0aGlzLmdyaWRfc25hcClcblxuICBsZXQgcm9vbVRhcmdldFxuXG4gIGlmICgocm9vbVRhcmdldCA9IHRoaXMuZWRpdG9yLnJheUNhc3RpbmdSb29tKHNuYXApKSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuYmluZGVyLnJlbW92ZSgpXG4gICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IHBhdGhTdXJmYWNlID0gcm9vbVRhcmdldC5jb29yZHNcbiAgICBsZXQgcGF0aENyZWF0ZSA9ICdNJyArIHBhdGhTdXJmYWNlWzBdLnggKyAnLCcgKyBwYXRoU3VyZmFjZVswXS55XG4gICAgZm9yIChsZXQgcCA9IDE7IHAgPCBwYXRoU3VyZmFjZS5sZW5ndGggLSAxOyBwKyspIHtcbiAgICAgIHBhdGhDcmVhdGUgPVxuICAgICAgICBwYXRoQ3JlYXRlICsgJyAnICsgJ0wnICsgcGF0aFN1cmZhY2VbcF0ueCArICcsJyArIHBhdGhTdXJmYWNlW3BdLnlcbiAgICB9XG4gICAgcGF0aENyZWF0ZSA9IHBhdGhDcmVhdGUgKyAnWidcblxuICAgIGlmIChyb29tVGFyZ2V0Lmluc2lkZS5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpbnMgPSAwOyBpbnMgPCByb29tVGFyZ2V0Lmluc2lkZS5sZW5ndGg7IGlucysrKSB7XG4gICAgICAgIHBhdGhDcmVhdGUgPVxuICAgICAgICAgIHBhdGhDcmVhdGUgK1xuICAgICAgICAgICcgTScgK1xuICAgICAgICAgIFJvb21zLnBvbHlnb25zW3Jvb21UYXJnZXQuaW5zaWRlW2luc11dLmNvb3Jkc1tcbiAgICAgICAgICAgIFJvb21zLnBvbHlnb25zW3Jvb21UYXJnZXQuaW5zaWRlW2luc11dLmNvb3Jkcy5sZW5ndGggLSAxXG4gICAgICAgICAgXS54ICtcbiAgICAgICAgICAnLCcgK1xuICAgICAgICAgIFJvb21zLnBvbHlnb25zW3Jvb21UYXJnZXQuaW5zaWRlW2luc11dLmNvb3Jkc1tcbiAgICAgICAgICAgIFJvb21zLnBvbHlnb25zW3Jvb21UYXJnZXQuaW5zaWRlW2luc11dLmNvb3Jkcy5sZW5ndGggLSAxXG4gICAgICAgICAgXS55XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGZyZWUgPSBSb29tcy5wb2x5Z29uc1tyb29tVGFyZ2V0Lmluc2lkZVtpbnNdXS5jb29yZHMubGVuZ3RoIC0gMjtcbiAgICAgICAgICBmcmVlID4gLTE7XG4gICAgICAgICAgZnJlZS0tXG4gICAgICAgICkge1xuICAgICAgICAgIHBhdGhDcmVhdGUgPVxuICAgICAgICAgICAgcGF0aENyZWF0ZSArXG4gICAgICAgICAgICAnIEwnICtcbiAgICAgICAgICAgIFJvb21zLnBvbHlnb25zW3Jvb21UYXJnZXQuaW5zaWRlW2luc11dLmNvb3Jkc1tmcmVlXS54ICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICBSb29tcy5wb2x5Z29uc1tyb29tVGFyZ2V0Lmluc2lkZVtpbnNdXS5jb29yZHNbZnJlZV0ueVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kZXIgPSB0aGlzLnFTVkcuY3JlYXRlKCdib3hiaW5kJywgJ3BhdGgnLCB7XG4gICAgICBpZDogJ3Jvb21TZWxlY3RlZCcsXG4gICAgICBkOiBwYXRoQ3JlYXRlLFxuICAgICAgZmlsbDogJyNjOWMxNGMnLFxuICAgICAgJ2ZpbGwtb3BhY2l0eSc6IDAuNSxcbiAgICAgIHN0cm9rZTogJyNjOWMxNGMnLFxuICAgICAgJ2ZpbGwtcnVsZSc6ICdldmVub2RkJyxcbiAgICAgICdzdHJva2Utd2lkdGgnOiAzLFxuICAgIH0pXG4gICAgdGhpcy5iaW5kZXIudHlwZSA9ICdyb29tJ1xuICAgIHRoaXMuYmluZGVyLmFyZWEgPSByb29tVGFyZ2V0LmFyZWFcbiAgICB0aGlzLmJpbmRlci5pZCA9IHRoaXMuUk9PTS5pbmRleE9mKHJvb21UYXJnZXQpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5iaW5kZXIucmVtb3ZlKClcbiAgICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZU1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAkKCcuc3ViJykuaGlkZSgxMDApXG5cbiAgdGhpcy5tb3VzZU1vdmVfbW9kZV9zZWxlY3QoZXZlbnQpXG4gIHRoaXMubW91c2VNb3ZlX21vZGVfbGluZV9wYXJ0aXRpb24oZXZlbnQpXG4gIHRoaXMubW91c2VNb3ZlX21vZGVfZG9vcihldmVudClcbiAgdGhpcy5tb3VzZU1vdmVfbW9kZV9lbGVjdHJpY2FsKGV2ZW50KVxuICB0aGlzLm1vdXNlTW92ZV9tb2RlX25ldHdvcmsoZXZlbnQpXG4gIHRoaXMubW91c2VNb3ZlX21vZGVfZGlzdGFuY2UoZXZlbnQpXG4gIHRoaXMubW91c2VNb3ZlX21vZGVfbm9kZShldmVudClcbiAgdGhpcy5tb3VzZU1vdmVfbW9kZV9iaW5kKGV2ZW50KVxuICB0aGlzLm1vdXNlTW92ZV9tb2RlX3RleHQoZXZlbnQpXG4gIHRoaXMubW91c2VNb3ZlX21vZGVfb2JqZWN0KGV2ZW50KVxuICB0aGlzLm1vdXNlTW92ZV9tb2RlX3Jvb20oZXZlbnQpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZVVwX21vZGVfc2VsZWN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdzZWxlY3RfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgdGhpcy5zYXZlKClcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VVcF9tb2RlX2xpbmVfcGFydGl0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdsaW5lX21vZGUnICYmIHRoaXMubW9kZSAhPT0gJ3BhcnRpdGlvbl9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgJCgnI2xpbmV0ZW1wJykucmVtb3ZlKCkgLy8gREVMIExJTkUgSEVMUCBDT05TVFJVQyAwIDQ1IDkwXG4gIHRoaXMuaW50ZXJzZWN0aW9uT2ZmKClcblxuICBsZXQgc2l6ZVdhbGwgPSB0aGlzLnFTVkcubWVhc3VyZShcbiAgICB7IHg6IHRoaXMueCwgeTogdGhpcy55IH0sXG4gICAgeyB4OiB0aGlzLnBveCwgeTogdGhpcy5wb3kgfSxcbiAgKVxuICBzaXplV2FsbCA9IHNpemVXYWxsIC8gdGhpcy5tZXRlclxuICBpZiAoJCgnI2xpbmVfY29uc3RydWMnKS5sZW5ndGggJiYgc2l6ZVdhbGwgPiAwLjMpIHtcbiAgICBzaXplV2FsbCA9IHRoaXMud2FsbFNpemVcbiAgICBpZiAodGhpcy5tb2RlID09ICdwYXJ0aXRpb25fbW9kZScpIHtcbiAgICAgIHNpemVXYWxsID0gcGFydGl0aW9uU2l6ZVxuICAgIH1cbiAgICBjb25zdCB3YWxsID0gdGhpcy5lZGl0b3Iud2FsbChcbiAgICAgIHsgeDogdGhpcy5wb3gsIHk6IHRoaXMucG95IH0sXG4gICAgICB7IHg6IHRoaXMueCwgeTogdGhpcy55IH0sXG4gICAgICAnbm9ybWFsJyxcbiAgICAgIHNpemVXYWxsLFxuICAgIClcbiAgICB0aGlzLldBTExTLnB1c2god2FsbClcbiAgICB0aGlzLmVkaXRvci5hcmNoaXRlY3QodGhpcy5XQUxMUylcblxuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXVsdGknKS5jaGVja2VkICYmICF3YWxsRW5kQ29uc3RydWMpIHtcbiAgICAgIGN1cnNvcigndmFsaWRhdGlvbicpXG4gICAgICB0aGlzLmFjdGlvbiA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3Rpb24gPSAwXG4gICAgfVxuICAgICQoJyNib3hpbmZvJykuaHRtbChcbiAgICAgIFwiV2FsbCBhZGRlZCA8c3BhbiBzdHlsZT0nZm9udC1zaXplOjAuNmVtJz5Nb3kuIFwiICtcbiAgICAgICAgKFxuICAgICAgICAgIHRoaXMucVNWRy5tZWFzdXJlKFxuICAgICAgICAgICAgeyB4OiB0aGlzLnBveCwgeTogdGhpcy5wb3kgfSxcbiAgICAgICAgICAgIHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSxcbiAgICAgICAgICApIC8gNjBcbiAgICAgICAgKS50b0ZpeGVkKDIpICtcbiAgICAgICAgJyBtPC9zcGFuPicsXG4gICAgKVxuICAgICQoJyNsaW5lX2NvbnN0cnVjJykucmVtb3ZlKCkgLy8gREVMIExJTkUgQ09OU1RSVUMgSEVMUCBUTyBWSUVXIE5FVyBTRUcgUEFUSFxuICAgIHRoaXMubGVuZ3RoVGVtcC5yZW1vdmUoKVxuICAgIHRoaXMubGVuZ3RoVGVtcCA9IHVuZGVmaW5lZFxuICAgIGNvbnN0cnVjID0gMFxuICAgIGlmICh3YWxsRW5kQ29uc3RydWMpIHtcbiAgICAgIHRoaXMuYWN0aW9uID0gMFxuICAgIH1cbiAgICB3YWxsRW5kQ29uc3RydWMgPSB1bmRlZmluZWRcbiAgICB0aGlzLnBveCA9IHRoaXMueFxuICAgIHRoaXMucG95ID0gdGhpcy55XG4gICAgdGhpcy5zYXZlKClcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFjdGlvbiA9IDBcbiAgICB0aGlzLmNvbnN0cnVjID0gMFxuICAgICQoJyNib3hpbmZvJykuaHRtbCgnU2VsZWN0IG1vZGUnKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ3NlbGVjdF9tb2RlJylcbiAgICBpZiAodHlwZW9mIHRoaXMuYmluZGVyICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB9XG4gICAgY29uc3Qgc25hcCA9IHRoaXMuY2FsY3VsX3NuYXAoZXZlbnQsIHRoaXMuZ3JpZF9zbmFwKVxuICAgIHRoaXMucG94ID0gc25hcC54XG4gICAgdGhpcy5wb3kgPSBzbmFwLnlcbiAgfVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VVcF9tb2RlX2VsZWN0cmljYWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ2VsZWN0cmljYWxfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhpcy5iaW5kZXIgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAkKCcjYm94aW5mbycpLmh0bWwoJ1RoZSBwbGFuIGN1cnJlbnRseSBjb250YWlucyBubyB3YWxsLicpXG4gICAgdGhpcy5mb25jX2J1dHRvbignc2VsZWN0X21vZGUnKVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRoaXMuT0JKREFUQS5wdXNoKHRoaXMuYmluZGVyKVxuICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAkKCcjYm94Y2FycGVudHJ5JykuYXBwZW5kKHRoaXMuT0JKREFUQVt0aGlzLk9CSkRBVEEubGVuZ3RoIC0gMV0uZ3JhcGgpXG4gIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICQoJyNib3hpbmZvJykuaHRtbCgnRWxlbWVudCBhZGRlZCcpXG4gIHRoaXMuZm9uY19idXR0b24oJ3NlbGVjdF9tb2RlJylcbiAgdGhpcy5zYXZlKClcbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlVXBfbW9kZV9uZXR3b3JrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICduZXR3b3JrX21vZGUnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAodHlwZW9mIHRoaXMuYmluZGVyID09ICd1bmRlZmluZWQnKSB7XG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdUaGUgcGxhbiBjdXJyZW50bHkgY29udGFpbnMgbm8gd2FsbC4nKVxuICAgIHRoaXMuZm9uY19idXR0b24oJ3NlbGVjdF9tb2RlJylcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0aGlzLk9CSkRBVEEucHVzaCh0aGlzLmJpbmRlcilcbiAgdGhpcy5iaW5kZXIuZ3JhcGgucmVtb3ZlKClcbiAgJCgnI2JveGNhcnBlbnRyeScpLmFwcGVuZCh0aGlzLk9CSkRBVEFbdGhpcy5PQkpEQVRBLmxlbmd0aCAtIDFdLmdyYXBoKVxuICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAkKCcjYm94aW5mbycpLmh0bWwoJ0VsZW1lbnQgYWRkZWQnKVxuICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gIHRoaXMuc2F2ZSgpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZVVwX21vZGVfZG9vciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnZG9vcl9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgICQoJyNib3hpbmZvJykuaHRtbCgnVGhlIHBsYW4gY3VycmVudGx5IGNvbnRhaW5zIG5vIHdhbGwuJylcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGhpcy5PQkpEQVRBLnB1c2godGhpcy5iaW5kZXIpXG4gIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gICQoJyNib3hjYXJwZW50cnknKS5hcHBlbmQodGhpcy5PQkpEQVRBW3RoaXMuT0JKREFUQS5sZW5ndGggLSAxXS5ncmFwaClcbiAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgJCgnI2JveGluZm8nKS5odG1sKCdFbGVtZW50IGFkZGVkJylcbiAgdGhpcy5mb25jX2J1dHRvbignc2VsZWN0X21vZGUnKVxuICB0aGlzLnNhdmUoKVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VVcF9tb2RlX2Rpc3RhbmNlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmICh0aGlzLm1vZGUgIT09ICdkaXN0YW5jZV9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHRoaXMuYWN0aW9uID09IDEpIHtcbiAgICB0aGlzLmFjdGlvbiA9IDBcbiAgICAvLyBNT0RJRlkgQkJPWCBGT1IgQklOREVSIFpPTkUgKFRYVClcbiAgICBjb25zdCBiYm94ID0gdGhpcy5sYWJlbE1lYXN1cmUuZ2V0KDApLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgYmJveC54ID1cbiAgICAgIGJib3gueCAqIHRoaXMuc2NhbGVGYWN0b3IgLVxuICAgICAgdGhpcy5vZmZzZXQubGVmdCAqIHRoaXMuc2NhbGVGYWN0b3IgK1xuICAgICAgdGhpcy5vcmlnaW5YX3ZpZXdib3hcbiAgICBiYm94LnkgPVxuICAgICAgYmJveC55ICogdGhpcy5zY2FsZUZhY3RvciAtXG4gICAgICB0aGlzLm9mZnNldC50b3AgKiB0aGlzLnNjYWxlRmFjdG9yICtcbiAgICAgIHRoaXMub3JpZ2luWV92aWV3Ym94XG4gICAgYmJveC5vcmlnaW4gPSB7IHg6IGJib3gueCArIGJib3gud2lkdGggLyAyLCB5OiBiYm94LnkgKyBiYm94LmhlaWdodCAvIDIgfVxuICAgIHRoaXMuYmluZGVyLmJib3ggPSBiYm94XG4gICAgdGhpcy5iaW5kZXIucmVhbEJib3ggPSBbXG4gICAgICB7IHg6IHRoaXMuYmluZGVyLmJib3gueCwgeTogdGhpcy5iaW5kZXIuYmJveC55IH0sXG4gICAgICB7IHg6IHRoaXMuYmluZGVyLmJib3gueCArIHRoaXMuYmluZGVyLmJib3gud2lkdGgsIHk6IHRoaXMuYmluZGVyLmJib3gueSB9LFxuICAgICAge1xuICAgICAgICB4OiB0aGlzLmJpbmRlci5iYm94LnggKyB0aGlzLmJpbmRlci5iYm94LndpZHRoLFxuICAgICAgICB5OiB0aGlzLmJpbmRlci5iYm94LnkgKyB0aGlzLmJpbmRlci5iYm94LmhlaWdodCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHg6IHRoaXMuYmluZGVyLmJib3gueCxcbiAgICAgICAgeTogdGhpcy5iaW5kZXIuYmJveC55ICsgdGhpcy5iaW5kZXIuYmJveC5oZWlnaHQsXG4gICAgICB9LFxuICAgIF1cbiAgICB0aGlzLmJpbmRlci5zaXplID0gdGhpcy5iaW5kZXIuYmJveC53aWR0aFxuICAgIHRoaXMuYmluZGVyLnRoaWNrID0gdGhpcy5iaW5kZXIuYmJveC5oZWlnaHRcbiAgICB0aGlzLmJpbmRlci5ncmFwaC5hcHBlbmQodGhpcy5sYWJlbE1lYXN1cmUpXG4gICAgdGhpcy5PQkpEQVRBLnB1c2godGhpcy5iaW5kZXIpXG4gICAgdGhpcy5iaW5kZXIuZ3JhcGgucmVtb3ZlKClcbiAgICAkKCcjYm94Y2FycGVudHJ5JykuYXBwZW5kKHRoaXMuT0JKREFUQVt0aGlzLk9CSkRBVEEubGVuZ3RoIC0gMV0uZ3JhcGgpXG4gICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB0aGlzLmxhYmVsTWVhc3VyZSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuY3Jvc3MucmVtb3ZlKClcbiAgICB0aGlzLmNyb3NzID0gdW5kZWZpbmVkXG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdNZWFzdXJlIGFkZGVkJylcbiAgICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gICAgdGhpcy5zYXZlKClcbiAgfVxufVxuXG4vLyBcImN1dFwiIGZ1bmN0aW9uYWxpdHlcbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZVVwX21vZGVfbm9kZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnbm9kZV9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIEFMU08gT04gTU9VU0VVUCBXSVRIIEhBVkUgQ0lSQ0xFQklOREVSIE9OIEFERFBPSU5UXG4gICAgY29uc3QgbmV3V2FsbCA9IHRoaXMuZWRpdG9yLndhbGwoXG4gICAgICB7IHg6IHRoaXMuYmluZGVyLmRhdGEueCwgeTogdGhpcy5iaW5kZXIuZGF0YS55IH0sXG4gICAgICB0aGlzLmJpbmRlci5kYXRhLndhbGwuZW5kLFxuICAgICAgJ25vcm1hbCcsXG4gICAgICB0aGlzLmJpbmRlci5kYXRhLndhbGwudGhpY2ssXG4gICAgKVxuICAgIHRoaXMuV0FMTFMucHVzaChuZXdXYWxsKVxuICAgIHRoaXMuYmluZGVyLmRhdGEud2FsbC5lbmQgPSB7IHg6IHRoaXMuYmluZGVyLmRhdGEueCwgeTogdGhpcy5iaW5kZXIuZGF0YS55IH1cbiAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgIHRoaXMuYmluZGVyID0gdW5kZWZpbmVkXG4gICAgdGhpcy5lZGl0b3IuYXJjaGl0ZWN0KHRoaXMuV0FMTFMpXG4gICAgdGhpcy5zYXZlKClcbiAgfVxuXG4gIHRoaXMuZm9uY19idXR0b24oJ3NlbGVjdF9tb2RlJylcbn1cblxuLy8gVGhpcyBpcyBmb3Igd2hlbiBhbiBTVkcgZWxlbWVudCBpcyBiZWluZyBpbnRlcmFjdGVkIHdpdGhcbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZVVwX21vZGVfYmluZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAnYmluZF9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG4gIHRoaXMuYWN0aW9uID0gMFxuICB0aGlzLmNvbnN0cnVjID0gMCAvLyBDT05TVFJVQyAwIFRPIEZSRUUgQklOREVSIEdST1VQIE5PREUgV0FMTCBNT1ZJTkdcbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuZm9uY19idXR0b24oJ3NlbGVjdF9tb2RlJylcbiAgICBpZiAodGhpcy5iaW5kZXIudHlwZSA9PSAnbm9kZScpIHtcbiAgICB9IC8vIEVORCBCSU5ERVIgTk9ERVxuXG4gICAgaWYgKHRoaXMuYmluZGVyLnR5cGUgPT0gJ3NlZ21lbnQnKSB7XG4gICAgICBsZXQgZm91bmQgPSBmYWxzZVxuICAgICAgaWYgKHRoaXMuYmluZGVyLndhbGwuc3RhcnQgPT0gdGhpcy5iaW5kZXIuYmVmb3JlKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgJCgnI3BhbmVsJykuaGlkZSgxMDApXG4gICAgICAgIGNvbnN0IG9ialdhbGwgPSB0aGlzLmVkaXRvci5vYmpGcm9tV2FsbCh0aGlzLndhbGxCaW5kKVxuICAgICAgICAkKCcjYm94aW5mbycpLmh0bWwoXG4gICAgICAgICAgJ01vZGlmeSBhIHdhbGw8YnIvPjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjAuN2VtO2NvbG9yOiNkZTliNDNcIj5UaGlzIHdhbGwgY2FuXFwndCBiZWNvbWUgYSBzZXBhcmF0aW9uIChjb250YWlucyBkb29ycyBvciB3aW5kb3dzKSAhPC9zcGFuPicsXG4gICAgICAgIClcbiAgICAgICAgaWYgKG9ialdhbGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICQoJyNzZXBhcmF0ZScpLmhpZGUoKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmluZGVyLndhbGwudHlwZSA9PSAnc2VwYXJhdGUnKSB7XG4gICAgICAgICAgJCgnI3NlcGFyYXRlJykuaGlkZSgpXG4gICAgICAgICAgJCgnI3JhbmdlVGhpY2snKS5oaWRlKClcbiAgICAgICAgICAkKCcjcmVjb21iaW5lJykuc2hvdygpXG4gICAgICAgICAgJCgnI2N1dFdhbGwnKS5oaWRlKClcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGVXYWxsVG9vbHMnKS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICAnTW9kaWZ5IHRoZSBzZXBhcmF0aW9uJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQoJyNjdXRXYWxsJykuc2hvdygpXG4gICAgICAgICAgJCgnI3NlcGFyYXRlJykuc2hvdygpXG4gICAgICAgICAgJCgnI3JhbmdlVGhpY2snKS5zaG93KClcbiAgICAgICAgICAkKCcjcmVjb21iaW5lJykuaGlkZSgpXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlV2FsbFRvb2xzJykudGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgJ01vZGlmeSB0aGUgd2FsbCdcbiAgICAgICAgICAkKCcjYm94aW5mbycpLmh0bWwoJ01vZGlmeSB0aGUgd2FsbCcpXG4gICAgICAgIH1cbiAgICAgICAgJCgnI3dhbGxUb29scycpLnNob3coMjAwKVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FsbFdpZHRoJykuc2V0QXR0cmlidXRlKCdtaW4nLCA3KVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FsbFdpZHRoJykuc2V0QXR0cmlidXRlKCdtYXgnLCA1MClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dhbGxXaWR0aFNjYWxlJykudGV4dENvbnRlbnQgPSAnNy01MCdcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dhbGxXaWR0aCcpLnZhbHVlID0gdGhpcy5iaW5kZXIud2FsbC50aGlja1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2FsbFdpZHRoVmFsJykudGV4dENvbnRlbnQgPVxuICAgICAgICAgIHRoaXMuYmluZGVyLndhbGwudGhpY2tcbiAgICAgICAgdGhpcy5tb2RlID0gJ2VkaXRfd2FsbF9tb2RlJ1xuICAgICAgfVxuICAgICAgdGhpcy5lcXVhdGlvbjEgPSB1bmRlZmluZWRcbiAgICAgIHRoaXMuZXF1YXRpb24yID0gdW5kZWZpbmVkXG4gICAgICB0aGlzLmVxdWF0aW9uMyA9IHVuZGVmaW5lZFxuICAgICAgdGhpcy5pbnRlcnNlY3Rpb25Gb2xsb3dlcnMgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iaW5kZXIudHlwZSA9PSAnb2JqJykge1xuICAgICAgdmFyIG1vdmVPYmogPVxuICAgICAgICBNYXRoLmFicyh0aGlzLmJpbmRlci5vbGRYWS54IC0gdGhpcy5iaW5kZXIueCkgK1xuICAgICAgICBNYXRoLmFicyh0aGlzLmJpbmRlci5vbGRYWS55IC0gdGhpcy5iaW5kZXIueSlcbiAgICAgIGlmIChtb3ZlT2JqIDwgMSkge1xuICAgICAgICAkKCcjcGFuZWwnKS5oaWRlKDEwMClcbiAgICAgICAgJCgnI29ialRvb2xzJykuc2hvdygnMjAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQoJyNsaW4nKS5jc3MoJ2N1cnNvcicsICdkZWZhdWx0JylcbiAgICAgICAgICAkKCcjYm94aW5mbycpLmh0bWwoJ0NvbmZpZy4gdGhlIGRvb3Ivd2luZG93JylcbiAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKCdkb29yV2luZG93V2lkdGgnKVxuICAgICAgICAgICAgLnNldEF0dHJpYnV0ZSgnbWluJywgdGhpcy5iaW5kZXIub2JqLnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aC5taW4pXG4gICAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZCgnZG9vcldpbmRvd1dpZHRoJylcbiAgICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoJ21heCcsIHRoaXMuYmluZGVyLm9iai5wYXJhbXMucmVzaXplTGltaXQud2lkdGgubWF4KVxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb29yV2luZG93V2lkdGhTY2FsZScpLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIHRoaXMuYmluZGVyLm9iai5wYXJhbXMucmVzaXplTGltaXQud2lkdGgubWluICtcbiAgICAgICAgICAgICctJyArXG4gICAgICAgICAgICB0aGlzLmJpbmRlci5vYmoucGFyYW1zLnJlc2l6ZUxpbWl0LndpZHRoLm1heFxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb29yV2luZG93V2lkdGgnKS52YWx1ZSA9XG4gICAgICAgICAgICB0aGlzLmJpbmRlci5vYmouc2l6ZVxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb29yV2luZG93V2lkdGhWYWwnKS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICB0aGlzLmJpbmRlci5vYmouc2l6ZVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLm1vZGUgPSAnZWRpdF9kb29yX21vZGUnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1vZGUgPSAnc2VsZWN0X21vZGUnXG4gICAgICAgIHRoaXMuYWN0aW9uID0gMFxuICAgICAgICB0aGlzLmJpbmRlci5ncmFwaC5yZW1vdmUoKVxuICAgICAgICB0aGlzLmJpbmRlciA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiB0aGlzLmJpbmRlciAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgdGhpcy5iaW5kZXIudHlwZSA9PSAnYm91bmRpbmdCb3gnXG4gICAgKSB7XG4gICAgICB2YXIgbW92ZU9iaiA9XG4gICAgICAgIE1hdGguYWJzKHRoaXMuYmluZGVyLm9sZFggLSB0aGlzLmJpbmRlci54KSArXG4gICAgICAgIE1hdGguYWJzKHRoaXMuYmluZGVyLm9sZFkgLSB0aGlzLmJpbmRlci55KVxuICAgICAgY29uc3Qgb2JqVGFyZ2V0ID0gdGhpcy5iaW5kZXIub2JqXG4gICAgICBpZiAoIW9ialRhcmdldC5wYXJhbXMubW92ZSkge1xuICAgICAgICAvLyBUTyBSRU1PVkUgTUVBU1VSRSBPTiBQTEFOXG4gICAgICAgIG9ialRhcmdldC5ncmFwaC5yZW1vdmUoKVxuICAgICAgICBPQkpEQVRBLnNwbGljZShPQkpEQVRBLmluZGV4T2Yob2JqVGFyZ2V0KSwgMSlcbiAgICAgICAgJCgnI2JveGluZm8nKS5odG1sKCdNZWFzdXJlIGRlbGV0ZWQgIScpXG4gICAgICB9XG4gICAgICBpZiAobW92ZU9iaiA8IDEgJiYgb2JqVGFyZ2V0LnBhcmFtcy5tb3ZlKSB7XG4gICAgICAgIGlmICghb2JqVGFyZ2V0LnBhcmFtcy5yZXNpemUpIHtcbiAgICAgICAgICAkKCcjb2JqQm91bmRpbmdCb3hTY2FsZScpLmhpZGUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQoJyNvYmpCb3VuZGluZ0JveFNjYWxlJykuc2hvdygpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvYmpUYXJnZXQucGFyYW1zLnJvdGF0ZSkge1xuICAgICAgICAgICQoJyNvYmpCb3VuZGluZ0JveFJvdGF0aW9uJykuaGlkZSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCgnI29iakJvdW5kaW5nQm94Um90YXRpb24nKS5zaG93KClcbiAgICAgICAgfVxuICAgICAgICAkKCcjcGFuZWwnKS5oaWRlKDEwMClcbiAgICAgICAgJCgnI29iakJvdW5kaW5nQm94Jykuc2hvdygnMjAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQoJyNsaW4nKS5jc3MoJ2N1cnNvcicsICdkZWZhdWx0JylcbiAgICAgICAgICAkKCcjYm94aW5mbycpLmh0bWwoJ01vZGlmeSB0aGUgb2JqZWN0JylcbiAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKCdiYm94V2lkdGgnKVxuICAgICAgICAgICAgLnNldEF0dHJpYnV0ZSgnbWluJywgb2JqVGFyZ2V0LnBhcmFtcy5yZXNpemVMaW1pdC53aWR0aC5taW4pXG4gICAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZCgnYmJveFdpZHRoJylcbiAgICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoJ21heCcsIG9ialRhcmdldC5wYXJhbXMucmVzaXplTGltaXQud2lkdGgubWF4KVxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYm94V2lkdGhTY2FsZScpLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIG9ialRhcmdldC5wYXJhbXMucmVzaXplTGltaXQud2lkdGgubWluICtcbiAgICAgICAgICAgICctJyArXG4gICAgICAgICAgICBvYmpUYXJnZXQucGFyYW1zLnJlc2l6ZUxpbWl0LmhlaWdodC5tYXhcbiAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKCdiYm94SGVpZ2h0JylcbiAgICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoJ21pbicsIG9ialRhcmdldC5wYXJhbXMucmVzaXplTGltaXQuaGVpZ2h0Lm1pbilcbiAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKCdiYm94SGVpZ2h0JylcbiAgICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoJ21heCcsIG9ialRhcmdldC5wYXJhbXMucmVzaXplTGltaXQuaGVpZ2h0Lm1heClcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJveEhlaWdodFNjYWxlJykudGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgb2JqVGFyZ2V0LnBhcmFtcy5yZXNpemVMaW1pdC5oZWlnaHQubWluICtcbiAgICAgICAgICAgICctJyArXG4gICAgICAgICAgICBvYmpUYXJnZXQucGFyYW1zLnJlc2l6ZUxpbWl0LmhlaWdodC5tYXhcbiAgICAgICAgICAkKCcjc3RlcHNDb3VudGVyJykuaGlkZSgpXG4gICAgICAgICAgaWYgKG9ialRhcmdldC5jbGFzc09iaiA9PSAnc3RhaXInKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJveFN0ZXBzVmFsJykudGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgICBvYmpUYXJnZXQudmFsdWVcbiAgICAgICAgICAgICQoJyNzdGVwc0NvdW50ZXInKS5zaG93KClcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jib3hXaWR0aCcpLnZhbHVlID0gb2JqVGFyZ2V0LndpZHRoICogMTAwXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jib3hXaWR0aFZhbCcpLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIG9ialRhcmdldC53aWR0aCAqIDEwMFxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYm94SGVpZ2h0JykudmFsdWUgPSBvYmpUYXJnZXQuaGVpZ2h0ICogMTAwXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jib3hIZWlnaHRWYWwnKS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICBvYmpUYXJnZXQuaGVpZ2h0ICogMTAwXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jib3hSb3RhdGlvbicpLnZhbHVlID0gb2JqVGFyZ2V0LmFuZ2xlXG4gICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jib3hSb3RhdGlvblZhbCcpLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIG9ialRhcmdldC5hbmdsZVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLm1vZGUgPSAnZWRpdF9ib3VuZGluZ0JveF9tb2RlJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tb2RlID0gJ3NlbGVjdF9tb2RlJ1xuICAgICAgICB0aGlzLmFjdGlvbiA9IDBcbiAgICAgICAgdGhpcy5iaW5kZXIuZ3JhcGgucmVtb3ZlKClcbiAgICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb2RlID09ICdiaW5kX21vZGUnKSB7XG4gICAgICB0aGlzLmJpbmRlci5yZW1vdmUoKVxuICAgICAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICB0aGlzLnNhdmUoKVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VVcF9tb2RlX3RleHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ3RleHRfbW9kZScpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh0aGlzLmFjdGlvbiA9PSAwKSB7XG4gICAgdGhpcy5hY3Rpb24gPSAxXG4gICAgY29uc3QgdGV4dE1vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbCgkKCcjdGV4dFRvTGF5ZXInKSlcbiAgICB0ZXh0TW9kYWwuc2hvdygpXG5cbiAgICB0aGlzLm1vZGUgPSAnZWRpdF90ZXh0X21vZGUnXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLm1vdXNlVXBfbW9kZV9vYmplY3QgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKHRoaXMubW9kZSAhPT0gJ29iamVjdF9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5PQkpEQVRBLnB1c2godGhpcy5iaW5kZXIpXG4gIHRoaXMuYmluZGVyLmdyYXBoLnJlbW92ZSgpXG4gIGxldCB0YXJnZXRCb3ggPSAnYm94Y2FycGVudHJ5J1xuICBpZiAodGhpcy5PQkpEQVRBW3RoaXMuT0JKREFUQS5sZW5ndGggLSAxXS5jbGFzc09iaiA9PSAnZW5lcmd5Jykge1xuICAgIHRhcmdldEJveCA9ICdib3hFbmVyZ3knXG4gIH1cbiAgaWYgKHRoaXMuT0JKREFUQVt0aGlzLk9CSkRBVEEubGVuZ3RoIC0gMV0uY2xhc3NPYmogPT0gJ2Z1cm5pdHVyZScpIHtcbiAgICB0YXJnZXRCb3ggPSAnYm94RnVybml0dXJlJ1xuICB9XG4gICQoJyMnICsgdGFyZ2V0Qm94KS5hcHBlbmQodGhpcy5PQkpEQVRBW3RoaXMuT0JKREFUQS5sZW5ndGggLSAxXS5ncmFwaClcbiAgdGhpcy5iaW5kZXIgPSB1bmRlZmluZWRcbiAgJCgnI2JveGluZm8nKS5odG1sKCdPYmplY3QgYWRkZWQnKVxuICB0aGlzLmZvbmNfYnV0dG9uKCdzZWxlY3RfbW9kZScpXG4gIHRoaXMuc2F2ZSgpXG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5tb3VzZVVwX21vZGVfcm9vbSA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5tb2RlICE9PSAncm9vbV9tb2RlJykge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGlzLmJpbmRlciA9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgY29uc3QgYXJlYSA9IHRoaXMuYmluZGVyLmFyZWEgLyAzNjAwXG4gIHRoaXMuYmluZGVyLmF0dHIoeyBmaWxsOiAnbm9uZScsIHN0cm9rZTogJyNkZGYwMGEnLCAnc3Ryb2tlLXdpZHRoJzogNyB9KVxuICAkKCcuc2l6ZScpLmh0bWwoYXJlYS50b0ZpeGVkKDIpICsgJyBtwrInKVxuICAkKCcjcm9vbUluZGV4JykudmFsKHRoaXMuYmluZGVyLmlkKVxuICBpZiAodGhpcy5ST09NW3RoaXMuYmluZGVyLmlkXS5zdXJmYWNlICE9ICcnKSB7XG4gICAgJCgnI3Jvb21TdXJmYWNlJykudmFsKHRoaXMuUk9PTVt0aGlzLmJpbmRlci5pZF0uc3VyZmFjZSlcbiAgfSBlbHNlIHtcbiAgICAkKCcjcm9vbVN1cmZhY2UnKS52YWwoJycpXG4gIH1cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlZUFyZWEnKS5jaGVja2VkID1cbiAgICB0aGlzLlJPT01bdGhpcy5iaW5kZXIuaWRdLnNob3dTdXJmYWNlXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb29tQmFja2dyb3VuZCcpLnZhbHVlID1cbiAgICB0aGlzLlJPT01bdGhpcy5iaW5kZXIuaWRdLmNvbG9yXG4gIGNvbnN0IHJvb21OYW1lID0gUk9PTVt0aGlzLmJpbmRlci5pZF0ubmFtZVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vbU5hbWUnKS52YWx1ZSA9IHJvb21OYW1lXG4gIGlmICh0aGlzLlJPT01bdGhpcy5iaW5kZXIuaWRdLm5hbWUgIT0gJycpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vbUxhYmVsJykuaW5uZXJIVE1MID1cbiAgICAgIHJvb21OYW1lICsgJyA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPidcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcm9vbUxhYmVsJykuaW5uZXJIVE1MID1cbiAgICAgICdOb25lIDxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+J1xuICB9XG5cbiAgY29uc3QgYWN0aW9uVG9EbyA9IHRoaXMuUk9PTVt0aGlzLmJpbmRlci5pZF0uYWN0aW9uXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYWN0aW9uVG9EbyArICdBY3Rpb24nKS5jaGVja2VkID0gdHJ1ZVxuICAkKCcjcGFuZWwnKS5oaWRlKDEwMClcbiAgJCgnI3Jvb21Ub29scycpLnNob3coJzMwMCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCcjbGluJykuY3NzKCdjdXJzb3InLCAnZGVmYXVsdCcpXG4gICAgJCgnI2JveGluZm8nKS5odG1sKCdDb25maWcuIHRoZSByb29tJylcbiAgfSlcbiAgdGhpcy5tb2RlID0gJ2VkaXRfcm9vbV9tb2RlJ1xuICB0aGlzLnNhdmUoKVxufVxuXG5BcHBsaWNhdGlvbi5wcm90b3R5cGUubW91c2VVcEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gaWYgKHNob3dSaWIpICQoJyNib3hTY2FsZScpLnNob3coMjAwKVxuXG4gIHRoaXMuZHJhZyA9ICdvZmYnXG5cbiAgY3Vyc29yKCdkZWZhdWx0JylcblxuICB0aGlzLm1vdXNlVXBfbW9kZV9zZWxlY3QoZXZlbnQpXG4gIHRoaXMubW91c2VVcF9tb2RlX2xpbmVfcGFydGl0aW9uKGV2ZW50KVxuICB0aGlzLm1vdXNlVXBfbW9kZV9kb29yKGV2ZW50KVxuICB0aGlzLm1vdXNlVXBfbW9kZV9uZXR3b3JrKGV2ZW50KVxuICB0aGlzLm1vdXNlVXBfbW9kZV9lbGVjdHJpY2FsKGV2ZW50KVxuICB0aGlzLm1vdXNlVXBfbW9kZV9kaXN0YW5jZShldmVudClcbiAgdGhpcy5tb3VzZVVwX21vZGVfbm9kZShldmVudClcbiAgdGhpcy5tb3VzZVVwX21vZGVfYmluZChldmVudClcbiAgdGhpcy5tb3VzZVVwX21vZGVfdGV4dChldmVudClcbiAgdGhpcy5tb3VzZVVwX21vZGVfb2JqZWN0KGV2ZW50KVxuICB0aGlzLm1vdXNlVXBfbW9kZV9yb29tKGV2ZW50KVxuXG4gIGlmICh0aGlzLm1vZGUgIT0gJ2VkaXRfcm9vbV9tb2RlJykge1xuICAgIHRoaXMuZWRpdG9yLnNob3dTY2FsZUJveCgpXG4gICAgdGhpcy5yaWIoKVxuICB9XG59XG5cbkFwcGxpY2F0aW9uLnByb3RvdHlwZS5xU1ZHRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IChpZCwgc2hhcGUsIGF0dHJzKSA9PiB7XG4gICAgICB2YXIgc2hhcGUgPSAkKFxuICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgc2hhcGUpLFxuICAgICAgKVxuICAgICAgZm9yIChjb25zdCBrIGluIGF0dHJzKSB7XG4gICAgICAgIHNoYXBlLmF0dHIoaywgYXR0cnNba10pXG4gICAgICB9XG4gICAgICBpZiAoaWQgIT0gJ25vbmUnKSB7XG4gICAgICAgICQoJyMnICsgaWQpLmFwcGVuZChzaGFwZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaGFwZVxuICAgIH0sXG4gICAgYW5nbGVEZWc6IChjeCwgY3ksIGV4LCBleSkgPT4ge1xuICAgICAgY29uc3QgZHkgPSBleSAtIGN5XG4gICAgICBjb25zdCBkeCA9IGV4IC0gY3hcbiAgICAgIGxldCB0aGV0YSA9IE1hdGguYXRhbjIoZHksIGR4KSAvLyByYW5nZSAoLVBJLCBQSV1cbiAgICAgIHRoZXRhICo9IDE4MCAvIE1hdGguUEkgLy8gcmFkcyB0byBkZWdzLCByYW5nZSAoLTE4MCwgMTgwXVxuICAgICAgaWYgKHRoZXRhIDwgMCkge1xuICAgICAgICB0aGV0YSA9IDM2MCArIHRoZXRhXG4gICAgICB9IC8vIHJhbmdlIFswLCAzNjApXG4gICAgICByZXR1cm4gdGhldGFcbiAgICB9LFxuICAgIGFuZ2xlOiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MykgPT4ge1xuICAgICAgdmFyIHgxID0gcGFyc2VJbnQoeDEpXG4gICAgICB2YXIgeTEgPSBwYXJzZUludCh5MSlcbiAgICAgIHZhciB4MiA9IHBhcnNlSW50KHgyKVxuICAgICAgdmFyIHkyID0gcGFyc2VJbnQoeTIpXG4gICAgICBsZXQgYW5nbGVyYWRcbiAgICAgIGlmICgheDMpIHtcbiAgICAgICAgaWYgKHgxIC0geDIgPT0gMCkge1xuICAgICAgICAgIGFuZ2xlcmFkID0gTWF0aC5QSSAvIDJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmdsZXJhZCA9IE1hdGguYXRhbigoeTEgLSB5MikgLyAoeDEgLSB4MikpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFuZ2xlZGVnID0gKGFuZ2xlcmFkICogMTgwKSAvIE1hdGguUElcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB4MyA9IHBhcnNlSW50KHgzKVxuICAgICAgICB2YXIgeTMgPSBwYXJzZUludCh5MylcbiAgICAgICAgY29uc3QgYSA9IE1hdGguc3FydChcbiAgICAgICAgICBNYXRoLnBvdyhNYXRoLmFicyh4MiAtIHgxKSwgMikgKyBNYXRoLnBvdyhNYXRoLmFicyh5MiAtIHkxKSwgMiksXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgYiA9IE1hdGguc3FydChcbiAgICAgICAgICBNYXRoLnBvdyhNYXRoLmFicyh4MiAtIHgzKSwgMikgKyBNYXRoLnBvdyhNYXRoLmFicyh5MiAtIHkzKSwgMiksXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgYyA9IE1hdGguc3FydChcbiAgICAgICAgICBNYXRoLnBvdyhNYXRoLmFicyh4MyAtIHgxKSwgMikgKyBNYXRoLnBvdyhNYXRoLmFicyh5MyAtIHkxKSwgMiksXG4gICAgICAgIClcbiAgICAgICAgaWYgKGEgPT0gMCB8fCBiID09IDApIHtcbiAgICAgICAgICBhbmdsZXJhZCA9IE1hdGguUEkgLyAyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5nbGVyYWQgPSBNYXRoLmFjb3MoXG4gICAgICAgICAgICAoTWF0aC5wb3coYSwgMikgKyBNYXRoLnBvdyhiLCAyKSAtIE1hdGgucG93KGMsIDIpKSAvICgyICogYSAqIGIpLFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBhbmdsZWRlZyA9ICgzNjAgKiBhbmdsZXJhZCkgLyAoMiAqIE1hdGguUEkpXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByYWQ6IGFuZ2xlcmFkLFxuICAgICAgICBkZWc6IGFuZ2xlZGVnLFxuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0QW5nbGU6IChlbDEsIGVsMikgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmFkOiBNYXRoLmF0YW4yKGVsMi55IC0gZWwxLnksIGVsMi54IC0gZWwxLngpLFxuICAgICAgICBkZWc6IChNYXRoLmF0YW4yKGVsMi55IC0gZWwxLnksIGVsMi54IC0gZWwxLngpICogMTgwKSAvIE1hdGguUEksXG4gICAgICB9XG4gICAgfSxcbiAgICBtaWRkbGU6ICh4bywgeW8sIHhkLCB5ZCkgPT4ge1xuICAgICAgY29uc3QgeDEgPSBwYXJzZUludCh4bylcbiAgICAgIGNvbnN0IHkxID0gcGFyc2VJbnQoeW8pXG4gICAgICBjb25zdCB4MiA9IHBhcnNlSW50KHhkKVxuICAgICAgY29uc3QgeTIgPSBwYXJzZUludCh5ZClcbiAgICAgIGNvbnN0IG1pZGRsZVggPSBNYXRoLmFicyh4MSArIHgyKSAvIDJcbiAgICAgIGNvbnN0IG1pZGRsZVkgPSBNYXRoLmFicyh5MSArIHkyKSAvIDJcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IG1pZGRsZVgsXG4gICAgICAgIHk6IG1pZGRsZVksXG4gICAgICB9XG4gICAgfSxcbiAgICB0cmlhbmdsZUFyZWE6IChmcCwgc3AsIHRwKSA9PiB7XG4gICAgICBsZXQgQSA9IDBcbiAgICAgIGxldCBCID0gMFxuICAgICAgbGV0IEMgPSAwXG4gICAgICBsZXQgcCA9IDBcbiAgICAgIEEgPSB0aGlzLnFTVkcubWVhc3VyZShmcCwgc3ApXG4gICAgICBCID0gdGhpcy5xU1ZHLm1lYXN1cmUoc3AsIHRwKVxuICAgICAgQyA9IHRoaXMucVNWRy5tZWFzdXJlKHRwLCBmcClcbiAgICAgIHAgPSAoQSArIEIgKyBDKSAvIDJcbiAgICAgIHJldHVybiBNYXRoLnNxcnQocCAqIChwIC0gQSkgKiAocCAtIEIpICogKHAgLSBDKSlcbiAgICB9LFxuICAgIG1lYXN1cmU6IChwbywgcHQpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG8ueCAtIHB0LngsIDIpICsgTWF0aC5wb3cocG8ueSAtIHB0LnksIDIpKVxuICAgIH0sXG4gICAgZ2FwOiAocG8sIHB0KSA9PiB7XG4gICAgICByZXR1cm4gTWF0aC5wb3cocG8ueCAtIHB0LngsIDIpICsgTWF0aC5wb3cocG8ueSAtIHB0LnksIDIpXG4gICAgfSxcbiAgICBwRGlzdGFuY2U6IChwb2ludCwgcG9pbnRBLCBwb2ludEIpID0+IHtcbiAgICAgIGNvbnN0IHggPSBwb2ludC54XG4gICAgICBjb25zdCB5ID0gcG9pbnQueVxuICAgICAgY29uc3QgeDEgPSBwb2ludEEueFxuICAgICAgY29uc3QgeTEgPSBwb2ludEEueVxuICAgICAgY29uc3QgeDIgPSBwb2ludEIueFxuICAgICAgY29uc3QgeTIgPSBwb2ludEIueVxuICAgICAgY29uc3QgQSA9IHggLSB4MVxuICAgICAgY29uc3QgQiA9IHkgLSB5MVxuICAgICAgY29uc3QgQyA9IHgyIC0geDFcbiAgICAgIGNvbnN0IEQgPSB5MiAtIHkxXG4gICAgICBjb25zdCBkb3QgPSBBICogQyArIEIgKiBEXG4gICAgICBjb25zdCBsZW5fc3EgPSBDICogQyArIEQgKiBEXG4gICAgICBsZXQgcGFyYW0gPSAtMVxuICAgICAgaWYgKGxlbl9zcSAhPSAwKSB7XG4gICAgICAgIC8vaW4gY2FzZSBvZiAwIGxlbmd0aCBsaW5lXG4gICAgICAgIHBhcmFtID0gZG90IC8gbGVuX3NxXG4gICAgICB9XG4gICAgICBsZXQgeHgsIHl5XG4gICAgICBpZiAocGFyYW0gPCAwKSB7XG4gICAgICAgIHh4ID0geDFcbiAgICAgICAgeXkgPSB5MVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+IDEpIHtcbiAgICAgICAgeHggPSB4MlxuICAgICAgICB5eSA9IHkyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4eCA9IHgxICsgcGFyYW0gKiBDXG4gICAgICAgIHl5ID0geTEgKyBwYXJhbSAqIERcbiAgICAgIH1cbiAgICAgIGNvbnN0IGR4ID0geCAtIHh4XG4gICAgICBjb25zdCBkeSA9IHkgLSB5eVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogeHgsXG4gICAgICAgIHk6IHl5LFxuICAgICAgICBkaXN0YW5jZTogTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSxcbiAgICAgIH1cbiAgICB9LFxuICAgIG5lYXJQb2ludE9uRXF1YXRpb246IChlcXVhdGlvbiwgcG9pbnQpID0+IHtcbiAgICAgIC8vIFkgPSBBeCArIEIgLS0tLSBlcXVhdGlvbiB7QTp2YWwsIEI6dmFsfVxuICAgICAgY29uc3QgcG9pbnRBID0ge31cbiAgICAgIGNvbnN0IHBvaW50QiA9IHt9XG4gICAgICBpZiAoZXF1YXRpb24uQSA9PSAnaCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBwb2ludC54LFxuICAgICAgICAgIHk6IGVxdWF0aW9uLkIsXG4gICAgICAgICAgZGlzdGFuY2U6IE1hdGguYWJzKGVxdWF0aW9uLkIgLSBwb2ludC55KSxcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlcXVhdGlvbi5BID09ICd2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IGVxdWF0aW9uLkIsXG4gICAgICAgICAgeTogcG9pbnQueSxcbiAgICAgICAgICBkaXN0YW5jZTogTWF0aC5hYnMoZXF1YXRpb24uQiAtIHBvaW50LngpLFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludEEueCA9IHBvaW50LnhcbiAgICAgICAgcG9pbnRBLnkgPSBlcXVhdGlvbi5BICogcG9pbnQueCArIGVxdWF0aW9uLkJcbiAgICAgICAgcG9pbnRCLnggPSAocG9pbnQueSAtIGVxdWF0aW9uLkIpIC8gZXF1YXRpb24uQVxuICAgICAgICBwb2ludEIueSA9IHBvaW50LnlcbiAgICAgICAgcmV0dXJuIHRoaXMucVNWRy5wRGlzdGFuY2UocG9pbnQsIHBvaW50QSwgcG9pbnRCKVxuICAgICAgfVxuICAgIH0sXG4gICAgY2lyY2xlUGF0aDogKGN4LCBjeSwgcikgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJ00gJyArXG4gICAgICAgIGN4ICtcbiAgICAgICAgJyAnICtcbiAgICAgICAgY3kgK1xuICAgICAgICAnIG0gLScgK1xuICAgICAgICByICtcbiAgICAgICAgJywgMCBhICcgK1xuICAgICAgICByICtcbiAgICAgICAgJywnICtcbiAgICAgICAgciArXG4gICAgICAgICcgMCAxLDAgJyArXG4gICAgICAgIHIgKiAyICtcbiAgICAgICAgJywwIGEgJyArXG4gICAgICAgIHIgK1xuICAgICAgICAnLCcgK1xuICAgICAgICByICtcbiAgICAgICAgJyAwIDEsMCAtJyArXG4gICAgICAgIHIgKiAyICtcbiAgICAgICAgJywwJ1xuICAgICAgKVxuICAgIH0sXG4gICAgY3JlYXRlRXF1YXRpb246ICh4MCwgeTAsIHgxLCB5MSkgPT4ge1xuICAgICAgaWYgKHgxIC0geDAgPT0gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIEE6ICd2JyxcbiAgICAgICAgICBCOiB4MCxcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh5MSAtIHkwID09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBBOiAnaCcsXG4gICAgICAgICAgQjogeTAsXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQTogKHkxIC0geTApIC8gKHgxIC0geDApLFxuICAgICAgICAgIEI6IHkxIC0geDEgKiAoKHkxIC0geTApIC8gKHgxIC0geDApKSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcGVycGVuZGljdWxhckVxdWF0aW9uOiAoZXF1YXRpb24sIHgxLCB5MSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBlcXVhdGlvbi5BICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQTogLTEgLyBlcXVhdGlvbi5BLFxuICAgICAgICAgIEI6IHkxIC0gKC0xIC8gZXF1YXRpb24uQSkgKiB4MSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVxdWF0aW9uLkEgPT0gJ2gnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQTogJ3YnLFxuICAgICAgICAgIEI6IHgxLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXF1YXRpb24uQSA9PSAndicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBBOiAnaCcsXG4gICAgICAgICAgQjogeTEsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFuZ2xlQmV0d2VlbkVxdWF0aW9uczogKG0xLCBtMikgPT4ge1xuICAgICAgaWYgKG0xID09ICdoJykge1xuICAgICAgICBtMSA9IDBcbiAgICAgIH1cbiAgICAgIGlmIChtMiA9PSAnaCcpIHtcbiAgICAgICAgbTIgPSAwXG4gICAgICB9XG4gICAgICBpZiAobTEgPT0gJ3YnKSB7XG4gICAgICAgIG0xID0gMTAwMDBcbiAgICAgIH1cbiAgICAgIGlmIChtMiA9PSAndicpIHtcbiAgICAgICAgbTIgPSAxMDAwMFxuICAgICAgfVxuICAgICAgY29uc3QgYW5nbGVSYWQgPSBNYXRoLmF0YW4oTWF0aC5hYnMoKG0yIC0gbTEpIC8gKDEgKyBtMSAqIG0yKSkpXG4gICAgICByZXR1cm4gKDM2MCAqIGFuZ2xlUmFkKSAvICgyICogTWF0aC5QSSlcbiAgICB9LFxuICAgIGludGVyc2VjdGlvbk9mRXF1YXRpb25zOiAoXG4gICAgICBlcXVhdGlvbjEsXG4gICAgICBlcXVhdGlvbjIsXG4gICAgICB0eXBlID0gJ2FycmF5JyxcbiAgICAgIG1lc3NhZ2UgPSBmYWxzZSxcbiAgICApID0+IHtcbiAgICAgIC8vIHR5cGUgYXJyYXkgcmV0dXJuIFt4LHldIC0tLS0gdHlwZSBvYmplY3QgcmV0dXJuIHt4OngsIHk6eX1cbiAgICAgIGxldCByZXRBcnJheVxuICAgICAgbGV0IHJldE9ialxuICAgICAgaWYgKGVxdWF0aW9uMS5BID09IGVxdWF0aW9uMi5BKSB7XG4gICAgICAgIHJldEFycmF5ID0gZmFsc2VcbiAgICAgICAgcmV0T2JqID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChlcXVhdGlvbjEuQSA9PSAndicgJiYgZXF1YXRpb24yLkEgPT0gJ2gnKSB7XG4gICAgICAgIHJldEFycmF5ID0gW2VxdWF0aW9uMS5CLCBlcXVhdGlvbjIuQl1cbiAgICAgICAgcmV0T2JqID0geyB4OiBlcXVhdGlvbjEuQiwgeTogZXF1YXRpb24yLkIgfVxuICAgICAgfVxuICAgICAgaWYgKGVxdWF0aW9uMS5BID09ICdoJyAmJiBlcXVhdGlvbjIuQSA9PSAndicpIHtcbiAgICAgICAgcmV0QXJyYXkgPSBbZXF1YXRpb24yLkIsIGVxdWF0aW9uMS5CXVxuICAgICAgICByZXRPYmogPSB7IHg6IGVxdWF0aW9uMi5CLCB5OiBlcXVhdGlvbjEuQiB9XG4gICAgICB9XG4gICAgICBpZiAoZXF1YXRpb24xLkEgPT0gJ2gnICYmIGVxdWF0aW9uMi5BICE9ICd2JyAmJiBlcXVhdGlvbjIuQSAhPSAnaCcpIHtcbiAgICAgICAgcmV0QXJyYXkgPSBbKGVxdWF0aW9uMS5CIC0gZXF1YXRpb24yLkIpIC8gZXF1YXRpb24yLkEsIGVxdWF0aW9uMS5CXVxuICAgICAgICByZXRPYmogPSB7XG4gICAgICAgICAgeDogKGVxdWF0aW9uMS5CIC0gZXF1YXRpb24yLkIpIC8gZXF1YXRpb24yLkEsXG4gICAgICAgICAgeTogZXF1YXRpb24xLkIsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlcXVhdGlvbjEuQSA9PSAndicgJiYgZXF1YXRpb24yLkEgIT0gJ3YnICYmIGVxdWF0aW9uMi5BICE9ICdoJykge1xuICAgICAgICByZXRBcnJheSA9IFtlcXVhdGlvbjEuQiwgZXF1YXRpb24yLkEgKiBlcXVhdGlvbjEuQiArIGVxdWF0aW9uMi5CXVxuICAgICAgICByZXRPYmogPSB7IHg6IGVxdWF0aW9uMS5CLCB5OiBlcXVhdGlvbjIuQSAqIGVxdWF0aW9uMS5CICsgZXF1YXRpb24yLkIgfVxuICAgICAgfVxuICAgICAgaWYgKGVxdWF0aW9uMi5BID09ICdoJyAmJiBlcXVhdGlvbjEuQSAhPSAndicgJiYgZXF1YXRpb24xLkEgIT0gJ2gnKSB7XG4gICAgICAgIHJldEFycmF5ID0gWyhlcXVhdGlvbjIuQiAtIGVxdWF0aW9uMS5CKSAvIGVxdWF0aW9uMS5BLCBlcXVhdGlvbjIuQl1cbiAgICAgICAgcmV0T2JqID0ge1xuICAgICAgICAgIHg6IChlcXVhdGlvbjIuQiAtIGVxdWF0aW9uMS5CKSAvIGVxdWF0aW9uMS5BLFxuICAgICAgICAgIHk6IGVxdWF0aW9uMi5CLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXF1YXRpb24yLkEgPT0gJ3YnICYmIGVxdWF0aW9uMS5BICE9ICd2JyAmJiBlcXVhdGlvbjEuQSAhPSAnaCcpIHtcbiAgICAgICAgcmV0QXJyYXkgPSBbZXF1YXRpb24yLkIsIGVxdWF0aW9uMS5BICogZXF1YXRpb24yLkIgKyBlcXVhdGlvbjEuQl1cbiAgICAgICAgcmV0T2JqID0geyB4OiBlcXVhdGlvbjIuQiwgeTogZXF1YXRpb24xLkEgKiBlcXVhdGlvbjIuQiArIGVxdWF0aW9uMS5CIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgZXF1YXRpb24xLkEgIT0gJ2gnICYmXG4gICAgICAgIGVxdWF0aW9uMS5BICE9ICd2JyAmJlxuICAgICAgICBlcXVhdGlvbjIuQSAhPSAndicgJiZcbiAgICAgICAgZXF1YXRpb24yLkEgIT0gJ2gnXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgeFQgPSAoZXF1YXRpb24yLkIgLSBlcXVhdGlvbjEuQikgLyAoZXF1YXRpb24xLkEgLSBlcXVhdGlvbjIuQSlcbiAgICAgICAgY29uc3QgeVQgPSBlcXVhdGlvbjEuQSAqIHhUICsgZXF1YXRpb24xLkJcbiAgICAgICAgcmV0QXJyYXkgPSBbeFQsIHlUXVxuICAgICAgICByZXRPYmogPSB7IHg6IHhULCB5OiB5VCB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PSAnYXJyYXknKSB7XG4gICAgICAgIHJldHVybiByZXRBcnJheVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJldE9ialxuICAgICAgfVxuICAgIH0sXG4gICAgdmVjdG9yWFk6IChvYmoxLCBvYmoyKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiBvYmoyLnggLSBvYmoxLngsXG4gICAgICAgIHk6IG9iajIueSAtIG9iajEueSxcbiAgICAgIH1cbiAgICB9LFxuICAgIHZlY3RvckFuZ2xlOiAodjEsIHYyKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoTWF0aC5hdGFuMih2Mi55IC0gdjEueSwgdjIueCAtIHYxLngpICsgTWF0aC5QSSAvIDIpICogKDE4MCAvIE1hdGguUEkpXG4gICAgICApXG4gICAgfSxcbiAgICB2ZWN0b3JEZXRlcjogKHYxLCB2MikgPT4ge1xuICAgICAgcmV0dXJuIHYxLnggKiB2Mi55IC0gdjEueSAqIHYyLnhcbiAgICB9LFxuICAgIGJ0d246IChhLCBiMSwgYjIsIHJvdW5kID0gZmFsc2UpID0+IHtcbiAgICAgIGlmIChyb3VuZCkge1xuICAgICAgICBhID0gTWF0aC5yb3VuZChhKVxuICAgICAgICBiMSA9IE1hdGgucm91bmQoYjEpXG4gICAgICAgIGIyID0gTWF0aC5yb3VuZChiMilcbiAgICAgIH1cbiAgICAgIGlmIChhID49IGIxICYmIGEgPD0gYjIpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChhID49IGIyICYmIGEgPD0gYjEpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0sXG4gICAgbmVhclBvaW50RnJvbVBhdGg6IChQYXRoc3ZnLCBwb2ludCwgcmFuZ2UgPSBJbmZpbml0eSkgPT4ge1xuICAgICAgY29uc3QgcGF0aExlbmd0aCA9IFBhdGhzdmcuZ2V0VG90YWxMZW5ndGgoKVxuICAgICAgaWYgKHBhdGhMZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBwcmVjaXNpb24gPSA0MFxuICAgICAgICBsZXQgYmVzdFxuICAgICAgICBsZXQgYmVzdExlbmd0aFxuICAgICAgICBsZXQgYmVzdERpc3RhbmNlID0gSW5maW5pdHlcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgc2Nhbiwgc2Nhbkxlbmd0aCA9IDAsIHNjYW5EaXN0YW5jZTtcbiAgICAgICAgICBzY2FuTGVuZ3RoIDw9IHBhdGhMZW5ndGg7XG4gICAgICAgICAgc2Nhbkxlbmd0aCArPSBwcmVjaXNpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgc2NhbiA9IFBhdGhzdmcuZ2V0UG9pbnRBdExlbmd0aChzY2FuTGVuZ3RoKVxuICAgICAgICAgIHNjYW5EaXN0YW5jZSA9IHRoaXMucVNWRy5nYXAoc2NhbiwgcG9pbnQpXG4gICAgICAgICAgaWYgKHNjYW5EaXN0YW5jZSA8IGJlc3REaXN0YW5jZSkge1xuICAgICAgICAgICAgOyhiZXN0ID0gc2NhbiksXG4gICAgICAgICAgICAgIChiZXN0TGVuZ3RoID0gc2Nhbkxlbmd0aCksXG4gICAgICAgICAgICAgIChiZXN0RGlzdGFuY2UgPSBzY2FuRGlzdGFuY2UpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGJpbmFyeSBzZWFyY2ggZm9yIHByZWNpc2UgZXN0aW1hdGVcbiAgICAgICAgcHJlY2lzaW9uIC89IDJcbiAgICAgICAgd2hpbGUgKHByZWNpc2lvbiA+IDEpIHtcbiAgICAgICAgICB2YXIgYmVmb3JlLFxuICAgICAgICAgICAgYWZ0ZXIsXG4gICAgICAgICAgICBiZWZvcmVMZW5ndGgsXG4gICAgICAgICAgICBhZnRlckxlbmd0aCxcbiAgICAgICAgICAgIGJlZm9yZURpc3RhbmNlLFxuICAgICAgICAgICAgYWZ0ZXJEaXN0YW5jZVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChiZWZvcmVMZW5ndGggPSBiZXN0TGVuZ3RoIC0gcHJlY2lzaW9uKSA+PSAwICYmXG4gICAgICAgICAgICAoYmVmb3JlRGlzdGFuY2UgPSB0aGlzLnFTVkcuZ2FwKFxuICAgICAgICAgICAgICAoYmVmb3JlID0gUGF0aHN2Zy5nZXRQb2ludEF0TGVuZ3RoKGJlZm9yZUxlbmd0aCkpLFxuICAgICAgICAgICAgICBwb2ludCxcbiAgICAgICAgICAgICkpIDwgYmVzdERpc3RhbmNlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICA7KGJlc3QgPSBiZWZvcmUpLFxuICAgICAgICAgICAgICAoYmVzdExlbmd0aCA9IGJlZm9yZUxlbmd0aCksXG4gICAgICAgICAgICAgIChiZXN0RGlzdGFuY2UgPSBiZWZvcmVEaXN0YW5jZSlcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKGFmdGVyTGVuZ3RoID0gYmVzdExlbmd0aCArIHByZWNpc2lvbikgPD0gcGF0aExlbmd0aCAmJlxuICAgICAgICAgICAgKGFmdGVyRGlzdGFuY2UgPSB0aGlzLnFTVkcuZ2FwKFxuICAgICAgICAgICAgICAoYWZ0ZXIgPSBQYXRoc3ZnLmdldFBvaW50QXRMZW5ndGgoYWZ0ZXJMZW5ndGgpKSxcbiAgICAgICAgICAgICAgcG9pbnQsXG4gICAgICAgICAgICApKSA8IGJlc3REaXN0YW5jZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgOyhiZXN0ID0gYWZ0ZXIpLFxuICAgICAgICAgICAgICAoYmVzdExlbmd0aCA9IGFmdGVyTGVuZ3RoKSxcbiAgICAgICAgICAgICAgKGJlc3REaXN0YW5jZSA9IGFmdGVyRGlzdGFuY2UpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZWNpc2lvbiAvPSAyXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJlc3REaXN0YW5jZSA8PSByYW5nZSAqIHJhbmdlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGJlc3QueCxcbiAgICAgICAgICAgIHk6IGJlc3QueSxcbiAgICAgICAgICAgIGxlbmd0aDogYmVzdExlbmd0aCxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBiZXN0RGlzdGFuY2UsXG4gICAgICAgICAgICBzZWc6IFBhdGhzdmcuZ2V0UGF0aFNlZ0F0TGVuZ3RoKGJlc3RMZW5ndGgpLFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBnZXROb2RlRnJvbVBhdGg6IChQYXRoc3ZnLCBwb2ludCwgZXhjZXB0ID0gWycnXSkgPT4ge1xuICAgICAgLy8gIE9OIFBBVEggUkVUVVJOIEZBTFNFIElGIDAgTk9ERSBPTiBQQVRIU1ZHIFdJVEggUE9JTlQgY29vcmRzXG4gICAgICAvLyAgUkVUVVJOIElOREVYIEFSUkFZIE9GIE5PREVzIG9uUG9pbnRcbiAgICAgIGNvbnN0IG5vZGVMaXN0ID0gUGF0aHN2Zy5nZXRQYXRoRGF0YSgpXG4gICAgICBsZXQgayA9IDBcbiAgICAgIGNvbnN0IG5vZGVzID0gW11cbiAgICAgIGxldCBjb3VudE5vZGUgPSAwXG4gICAgICBmb3IgKGsgPSAwOyBrIDwgbm9kZUxpc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5vZGVMaXN0W2tdLnZhbHVlc1swXSA9PSBwb2ludC54ICYmXG4gICAgICAgICAgbm9kZUxpc3Rba10udmFsdWVzWzFdID09IHBvaW50LnkgJiZcbiAgICAgICAgICBub2RlTGlzdFtrXS50eXBlICE9ICdaJ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoZXhjZXB0LmluZGV4T2YoaykgPT0gLTEpIHtcbiAgICAgICAgICAgIGNvdW50Tm9kZSsrXG4gICAgICAgICAgICBub2Rlcy5wdXNoKGspXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY291bnROb2RlID09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZXNcbiAgICAgIH1cbiAgICB9LFxuICAgIHBvbHlnb25JbnRvV2FsbHM6ICh2ZXJ0ZXgsIHN1cmZhY2UpID0+IHtcbiAgICAgIC8vIFJFVFVSTiBBUlJBWSBbe3gseX0sIHt4LHl9LCAuLi5dIE9GIFJFQUwgQ09PUkRTIFBPTFlHT04gSU5UTyBXQUxMUywgVEhJQ0tORVNTIFBBUkFNXG4gICAgICBjb25zdCB2ZXJ0ZXhBcnJheSA9IHN1cmZhY2VcbiAgICAgIGNvbnN0IHdhbGwgPSBbXVxuICAgICAgY29uc3QgcG9seWdvbiA9IFtdXG4gICAgICBmb3IgKGxldCByciA9IDA7IHJyIDwgdmVydGV4QXJyYXkubGVuZ3RoOyBycisrKSB7XG4gICAgICAgIHBvbHlnb24ucHVzaCh7XG4gICAgICAgICAgeDogdmVydGV4W3ZlcnRleEFycmF5W3JyXV0ueCxcbiAgICAgICAgICB5OiB2ZXJ0ZXhbdmVydGV4QXJyYXlbcnJdXS55LFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgLy8gRklORCBFREdFIChXQUxMUyBIRVJFKSBPRiBUSEVTRSBUV08gVkVSVEVYXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRleEFycmF5Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBzZWdTdGFydCA9IDA7XG4gICAgICAgICAgc2VnU3RhcnQgPCB2ZXJ0ZXhbdmVydGV4QXJyYXlbaSArIDFdXS5zZWdtZW50Lmxlbmd0aDtcbiAgICAgICAgICBzZWdTdGFydCsrXG4gICAgICAgICkge1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgc2VnRW5kID0gMDtcbiAgICAgICAgICAgIHNlZ0VuZCA8IHZlcnRleFt2ZXJ0ZXhBcnJheVtpXV0uc2VnbWVudC5sZW5ndGg7XG4gICAgICAgICAgICBzZWdFbmQrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB2ZXJ0ZXhbdmVydGV4QXJyYXlbaSArIDFdXS5zZWdtZW50W3NlZ1N0YXJ0XSA9PVxuICAgICAgICAgICAgICB2ZXJ0ZXhbdmVydGV4QXJyYXlbaV1dLnNlZ21lbnRbc2VnRW5kXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdhbGwucHVzaCh7XG4gICAgICAgICAgICAgICAgeDE6IHZlcnRleFt2ZXJ0ZXhBcnJheVtpXV0ueCxcbiAgICAgICAgICAgICAgICB5MTogdmVydGV4W3ZlcnRleEFycmF5W2ldXS55LFxuICAgICAgICAgICAgICAgIHgyOiB2ZXJ0ZXhbdmVydGV4QXJyYXlbaSArIDFdXS54LFxuICAgICAgICAgICAgICAgIHkyOiB2ZXJ0ZXhbdmVydGV4QXJyYXlbaSArIDFdXS55LFxuICAgICAgICAgICAgICAgIHNlZ21lbnQ6IHZlcnRleFt2ZXJ0ZXhBcnJheVtpICsgMV1dLnNlZ21lbnRbc2VnU3RhcnRdLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ0FMQyBJTlRFUlNFQ1MgT0YgRVEgUEFUSFMgT0YgVEhFU0UgVFdPIFdBTExTLlxuICAgICAgY29uc3QgaW5zaWRlID0gW11cbiAgICAgIGNvbnN0IG91dHNpZGUgPSBbXVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3YWxsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGludGVyID0gW11cbiAgICAgICAgY29uc3QgZWRnZSA9IHdhbGxbaV1cbiAgICAgICAgaWYgKGkgPCB3YWxsLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB2YXIgbmV4dEVkZ2UgPSB3YWxsW2kgKyAxXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBuZXh0RWRnZSA9IHdhbGxbMF1cbiAgICAgICAgfVxuICAgICAgICBsZXQgYW5nbGVFZGdlID0gTWF0aC5hdGFuMihlZGdlLnkyIC0gZWRnZS55MSwgZWRnZS54MiAtIGVkZ2UueDEpXG4gICAgICAgIGxldCBhbmdsZU5leHRFZGdlID0gTWF0aC5hdGFuMihcbiAgICAgICAgICBuZXh0RWRnZS55MiAtIG5leHRFZGdlLnkxLFxuICAgICAgICAgIG5leHRFZGdlLngyIC0gbmV4dEVkZ2UueDEsXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZWRnZVRoaWNrbmVzc1ggPVxuICAgICAgICAgICh0aGlzLldBTExTW2VkZ2Uuc2VnbWVudF0udGhpY2sgLyAyKSAqIE1hdGguc2luKGFuZ2xlRWRnZSlcbiAgICAgICAgY29uc3QgZWRnZVRoaWNrbmVzc1kgPVxuICAgICAgICAgICh0aGlzLldBTExTW2VkZ2Uuc2VnbWVudF0udGhpY2sgLyAyKSAqIE1hdGguY29zKGFuZ2xlRWRnZSlcbiAgICAgICAgY29uc3QgbmV4dEVkZ2VUaGlja25lc3NYID1cbiAgICAgICAgICAodGhpcy5XQUxMU1tuZXh0RWRnZS5zZWdtZW50XS50aGljayAvIDIpICogTWF0aC5zaW4oYW5nbGVOZXh0RWRnZSlcbiAgICAgICAgY29uc3QgbmV4dEVkZ2VUaGlja25lc3NZID1cbiAgICAgICAgICAodGhpcy5XQUxMU1tuZXh0RWRnZS5zZWdtZW50XS50aGljayAvIDIpICogTWF0aC5jb3MoYW5nbGVOZXh0RWRnZSlcbiAgICAgICAgY29uc3QgZXFFZGdlVXAgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgZWRnZS54MSArIGVkZ2VUaGlja25lc3NYLFxuICAgICAgICAgIGVkZ2UueTEgLSBlZGdlVGhpY2tuZXNzWSxcbiAgICAgICAgICBlZGdlLngyICsgZWRnZVRoaWNrbmVzc1gsXG4gICAgICAgICAgZWRnZS55MiAtIGVkZ2VUaGlja25lc3NZLFxuICAgICAgICApXG4gICAgICAgIGNvbnN0IGVxRWRnZUR3ID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgIGVkZ2UueDEgLSBlZGdlVGhpY2tuZXNzWCxcbiAgICAgICAgICBlZGdlLnkxICsgZWRnZVRoaWNrbmVzc1ksXG4gICAgICAgICAgZWRnZS54MiAtIGVkZ2VUaGlja25lc3NYLFxuICAgICAgICAgIGVkZ2UueTIgKyBlZGdlVGhpY2tuZXNzWSxcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBlcU5leHRFZGdlVXAgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgbmV4dEVkZ2UueDEgKyBuZXh0RWRnZVRoaWNrbmVzc1gsXG4gICAgICAgICAgbmV4dEVkZ2UueTEgLSBuZXh0RWRnZVRoaWNrbmVzc1ksXG4gICAgICAgICAgbmV4dEVkZ2UueDIgKyBuZXh0RWRnZVRoaWNrbmVzc1gsXG4gICAgICAgICAgbmV4dEVkZ2UueTIgLSBuZXh0RWRnZVRoaWNrbmVzc1ksXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZXFOZXh0RWRnZUR3ID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgIG5leHRFZGdlLngxIC0gbmV4dEVkZ2VUaGlja25lc3NYLFxuICAgICAgICAgIG5leHRFZGdlLnkxICsgbmV4dEVkZ2VUaGlja25lc3NZLFxuICAgICAgICAgIG5leHRFZGdlLngyIC0gbmV4dEVkZ2VUaGlja25lc3NYLFxuICAgICAgICAgIG5leHRFZGdlLnkyICsgbmV4dEVkZ2VUaGlja25lc3NZLFxuICAgICAgICApXG5cbiAgICAgICAgYW5nbGVFZGdlID0gYW5nbGVFZGdlICogKDE4MCAvIE1hdGguUEkpXG4gICAgICAgIGFuZ2xlTmV4dEVkZ2UgPSBhbmdsZU5leHRFZGdlICogKDE4MCAvIE1hdGguUEkpXG5cbiAgICAgICAgaWYgKGVxRWRnZVVwLkEgIT0gZXFOZXh0RWRnZVVwLkEpIHtcbiAgICAgICAgICBpbnRlci5wdXNoKFxuICAgICAgICAgICAgdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKGVxRWRnZVVwLCBlcU5leHRFZGdlVXAsICdvYmplY3QnKSxcbiAgICAgICAgICApXG4gICAgICAgICAgaW50ZXIucHVzaChcbiAgICAgICAgICAgIHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhlcUVkZ2VEdywgZXFOZXh0RWRnZUR3LCAnb2JqZWN0JyksXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVyLnB1c2goe1xuICAgICAgICAgICAgeDogZWRnZS54MiArIGVkZ2VUaGlja25lc3NYLFxuICAgICAgICAgICAgeTogZWRnZS55MiAtIGVkZ2VUaGlja25lc3NZLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgaW50ZXIucHVzaCh7XG4gICAgICAgICAgICB4OiBlZGdlLngyIC0gZWRnZVRoaWNrbmVzc1gsXG4gICAgICAgICAgICB5OiBlZGdlLnkyICsgZWRnZVRoaWNrbmVzc1ksXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBpbnRlci5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5xU1ZHLnJheUNhc3RpbmcoaW50ZXJbaWldLCBwb2x5Z29uKSkge1xuICAgICAgICAgICAgaW5zaWRlLnB1c2goaW50ZXJbaWldKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRzaWRlLnB1c2goaW50ZXJbaWldKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zaWRlLnB1c2goaW5zaWRlWzBdKVxuICAgICAgb3V0c2lkZS5wdXNoKG91dHNpZGVbMF0pXG4gICAgICByZXR1cm4geyBpbnNpZGU6IGluc2lkZSwgb3V0c2lkZTogb3V0c2lkZSB9XG4gICAgfSxcbiAgICBhcmVhOiAoY29vcmRzcykgPT4ge1xuICAgICAgaWYgKGNvb3Jkc3MubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCByZWFsQXJlYSA9IDBcbiAgICAgIGxldCBqID0gY29vcmRzcy5sZW5ndGggLSAxXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3Jkc3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVhbEFyZWEgPVxuICAgICAgICAgIHJlYWxBcmVhICtcbiAgICAgICAgICAoY29vcmRzc1tqXS54ICsgY29vcmRzc1tpXS54KSAqIChjb29yZHNzW2pdLnkgLSBjb29yZHNzW2ldLnkpXG4gICAgICAgIGogPSBpXG4gICAgICB9XG4gICAgICByZWFsQXJlYSA9IHJlYWxBcmVhIC8gMlxuICAgICAgcmV0dXJuIE1hdGguYWJzKHJlYWxBcmVhLnRvRml4ZWQoMikpXG4gICAgfSxcbiAgICBhcmVhUm9vbTogKHZlcnRleCwgY29vcmRzLCBkaWdpdCA9IDIpID0+IHtcbiAgICAgIGNvbnN0IHZlcnRleEFycmF5ID0gY29vcmRzXG4gICAgICBsZXQgcm91Z2hBcmVhID0gMFxuICAgICAgbGV0IGogPSB2ZXJ0ZXhBcnJheS5sZW5ndGggLSAyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRleEFycmF5Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICByb3VnaEFyZWEgPVxuICAgICAgICAgIHJvdWdoQXJlYSArXG4gICAgICAgICAgKHZlcnRleFt2ZXJ0ZXhBcnJheVtqXV0ueCArIHZlcnRleFt2ZXJ0ZXhBcnJheVtpXV0ueCkgKlxuICAgICAgICAgICAgKHZlcnRleFt2ZXJ0ZXhBcnJheVtqXV0ueSAtIHZlcnRleFt2ZXJ0ZXhBcnJheVtpXV0ueSlcbiAgICAgICAgaiA9IGlcbiAgICAgIH1cbiAgICAgIHJvdWdoQXJlYSA9IHJvdWdoQXJlYSAvIDJcbiAgICAgIHJldHVybiBNYXRoLmFicyhyb3VnaEFyZWEudG9GaXhlZChkaWdpdCkpXG4gICAgfSxcbiAgICBwZXJpbWV0ZXJSb29tOiAoY29vcmRzLCBkaWdpdCA9IDIpID0+IHtcbiAgICAgIGNvbnN0IHZlcnRleEFycmF5ID0gY29vcmRzXG4gICAgICBsZXQgcm91Z2hSb29tID0gMFxuICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRleEFycmF5Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBhZGRlZCA9IHRoaXMucVNWRy5tZWFzdXJlKFxuICAgICAgICAgIHZlcnRleFt2ZXJ0ZXhBcnJheVtpXV0sXG4gICAgICAgICAgdmVydGV4W3ZlcnRleEFycmF5W2kgKyAxXV0sXG4gICAgICAgIClcbiAgICAgICAgcm91Z2hSb29tID0gcm91Z2hSb29tICsgYWRkZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3VnaFJvb20udG9GaXhlZChkaWdpdClcbiAgICB9LFxuICAgIGp1bmN0aW9uTGlzdDogKFdBTExTKSA9PiB7XG4gICAgICAvLyBIICYmIFYgUFJPQkxFTSBXSEVOIFRXTyBTRUdNRU5UIEFSRSB2Ly0+ID09IEkvLT5cbiAgICAgIGNvbnN0IGp1bmN0aW9uID0gW11cbiAgICAgIGNvbnN0IHNlZ21lbnRKdW5jdGlvbiA9IFtdXG4gICAgICBjb25zdCBqdW5jdGlvbkNoaWxkID0gW11cbiAgICAgIC8vIEpVTkNUSU9OIEFSUkFZIExJU1QgQUxMIFNFR01FTlQgSU5URVJTRUNUSU9OU1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBXQUxMUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBlcXVhdGlvbjEgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgV0FMTFNbaV0uc3RhcnQueCxcbiAgICAgICAgICBXQUxMU1tpXS5zdGFydC55LFxuICAgICAgICAgIFdBTExTW2ldLmVuZC54LFxuICAgICAgICAgIFdBTExTW2ldLmVuZC55LFxuICAgICAgICApXG4gICAgICAgIGZvciAobGV0IHYgPSAwOyB2IDwgV0FMTFMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgICBpZiAodiAhPSBpKSB7XG4gICAgICAgICAgICBjb25zdCBlcXVhdGlvbjIgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgICAgIFdBTExTW3ZdLnN0YXJ0LngsXG4gICAgICAgICAgICAgIFdBTExTW3ZdLnN0YXJ0LnksXG4gICAgICAgICAgICAgIFdBTExTW3ZdLmVuZC54LFxuICAgICAgICAgICAgICBXQUxMU1t2XS5lbmQueSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoaW50ZXJzZWMgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgICAgZXF1YXRpb24xLFxuICAgICAgICAgICAgICAgIGVxdWF0aW9uMixcbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKFdBTExTW2ldLmVuZC54ID09IFdBTExTW3ZdLnN0YXJ0LnggJiZcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLmVuZC55ID09IFdBTExTW3ZdLnN0YXJ0LnkpIHx8XG4gICAgICAgICAgICAgICAgKFdBTExTW2ldLnN0YXJ0LnggPT0gV0FMTFNbdl0uZW5kLnggJiZcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLnN0YXJ0LnkgPT0gV0FMTFNbdl0uZW5kLnkpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLmVuZC54ID09IFdBTExTW3ZdLnN0YXJ0LnggJiZcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLmVuZC55ID09IFdBTExTW3ZdLnN0YXJ0LnlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGp1bmN0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50OiBpLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogdixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbV0FMTFNbdl0uc3RhcnQueCwgV0FMTFNbdl0uc3RhcnQueV0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICduYXR1cmFsJyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLnN0YXJ0LnggPT0gV0FMTFNbdl0uZW5kLnggJiZcbiAgICAgICAgICAgICAgICAgIFdBTExTW2ldLnN0YXJ0LnkgPT0gV0FMTFNbdl0uZW5kLnlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGp1bmN0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50OiBpLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZDogdixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbV0FMTFNbaV0uc3RhcnQueCwgV0FMTFNbaV0uc3RhcnQueV0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICduYXR1cmFsJyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY1swXSxcbiAgICAgICAgICAgICAgICAgICAgV0FMTFNbaV0uc3RhcnQueCxcbiAgICAgICAgICAgICAgICAgICAgV0FMTFNbaV0uZW5kLngsXG4gICAgICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWNbMV0sXG4gICAgICAgICAgICAgICAgICAgIFdBTExTW2ldLnN0YXJ0LnksXG4gICAgICAgICAgICAgICAgICAgIFdBTExTW2ldLmVuZC55LFxuICAgICAgICAgICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjWzBdLFxuICAgICAgICAgICAgICAgICAgICBXQUxMU1t2XS5zdGFydC54LFxuICAgICAgICAgICAgICAgICAgICBXQUxMU1t2XS5lbmQueCxcbiAgICAgICAgICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY1sxXSxcbiAgICAgICAgICAgICAgICAgICAgV0FMTFNbdl0uc3RhcnQueSxcbiAgICAgICAgICAgICAgICAgICAgV0FMTFNbdl0uZW5kLnksXG4gICAgICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpbnRlcnNlY1swXSA9IGludGVyc2VjWzBdXG4gICAgICAgICAgICAgICAgICBpbnRlcnNlY1sxXSA9IGludGVyc2VjWzFdXG4gICAgICAgICAgICAgICAgICBqdW5jdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudDogaSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IHYsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogW2ludGVyc2VjWzBdLCBpbnRlcnNlY1sxXV0sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnRlcnNlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElGIEVRMSA9PSBFUSAyIEZJTkQgSUYgU1RBUlQgT0YgU0VDT05EIFNFRyA9PSBFTkQgT0YgRklSU1Qgc2VnIChlcS5BIG1heWJlIHZhbHVlcyBIIG91IFYpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIChNYXRoLmFicyhlcXVhdGlvbjEuQSkgPT0gTWF0aC5hYnMoZXF1YXRpb24yLkEpIHx8XG4gICAgICAgICAgICAgICAgZXF1YXRpb24xLkEgPT0gZXF1YXRpb24yLkEpICYmXG4gICAgICAgICAgICAgIGVxdWF0aW9uMS5CID09IGVxdWF0aW9uMi5CXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIFdBTExTW2ldLmVuZC54ID09IFdBTExTW3ZdLnN0YXJ0LnggJiZcbiAgICAgICAgICAgICAgICBXQUxMU1tpXS5lbmQueSA9PSBXQUxMU1t2XS5zdGFydC55XG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGp1bmN0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgc2VnbWVudDogaSxcbiAgICAgICAgICAgICAgICAgIGNoaWxkOiB2LFxuICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbV0FMTFNbdl0uc3RhcnQueCwgV0FMTFNbdl0uc3RhcnQueV0sXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnbmF0dXJhbCcsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgV0FMTFNbaV0uc3RhcnQueCA9PSBXQUxMU1t2XS5lbmQueCAmJlxuICAgICAgICAgICAgICAgIFdBTExTW2ldLnN0YXJ0LnkgPT0gV0FMTFNbdl0uZW5kLnlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAganVuY3Rpb24ucHVzaCh7XG4gICAgICAgICAgICAgICAgICBzZWdtZW50OiBpLFxuICAgICAgICAgICAgICAgICAgY2hpbGQ6IHYsXG4gICAgICAgICAgICAgICAgICB2YWx1ZXM6IFtXQUxMU1tpXS5zdGFydC54LCBXQUxMU1tpXS5zdGFydC55XSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICduYXR1cmFsJyxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ganVuY3Rpb25cbiAgICB9LFxuICAgIHZlcnRleExpc3Q6IChqdW5jdGlvbiwgc2VnbWVudCkgPT4ge1xuICAgICAgY29uc3QgdmVydGV4ID0gW11cbiAgICAgIGNvbnN0IHZlcnRleHRlc3QgPSBbXVxuICAgICAgZm9yIChsZXQgamogPSAwOyBqaiA8IGp1bmN0aW9uLmxlbmd0aDsgamorKykge1xuICAgICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICAgIGZvciAobGV0IHZ2ID0gMDsgdnYgPCB2ZXJ0ZXgubGVuZ3RoOyB2disrKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgTWF0aC5yb3VuZChqdW5jdGlvbltqal0udmFsdWVzWzBdKSA9PSBNYXRoLnJvdW5kKHZlcnRleFt2dl0ueCkgJiZcbiAgICAgICAgICAgIE1hdGgucm91bmQoanVuY3Rpb25bampdLnZhbHVlc1sxXSkgPT0gTWF0aC5yb3VuZCh2ZXJ0ZXhbdnZdLnkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICB2ZXJ0ZXhbdnZdLnNlZ21lbnQucHVzaChqdW5jdGlvbltqal0uc2VnbWVudClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICB2ZXJ0ZXgucHVzaCh7XG4gICAgICAgICAgICB4OiBNYXRoLnJvdW5kKGp1bmN0aW9uW2pqXS52YWx1ZXNbMF0pLFxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChqdW5jdGlvbltqal0udmFsdWVzWzFdKSxcbiAgICAgICAgICAgIHNlZ21lbnQ6IFtqdW5jdGlvbltqal0uc2VnbWVudF0sXG4gICAgICAgICAgICBieXBhc3M6IDAsXG4gICAgICAgICAgICB0eXBlOiBqdW5jdGlvbltqal0udHlwZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCB0b0NsZWFuID0gW11cbiAgICAgIGZvciAobGV0IHNzID0gMDsgc3MgPCB2ZXJ0ZXgubGVuZ3RoOyBzcysrKSB7XG4gICAgICAgIHZlcnRleFtzc10uY2hpbGQgPSBbXVxuICAgICAgICB2ZXJ0ZXhbc3NdLnJlbW92ZWQgPSBbXVxuICAgICAgICBmb3IgKGxldCBzZyA9IDA7IHNnIDwgdmVydGV4W3NzXS5zZWdtZW50Lmxlbmd0aDsgc2crKykge1xuICAgICAgICAgIGZvciAobGV0IHNjID0gMDsgc2MgPCB2ZXJ0ZXgubGVuZ3RoOyBzYysrKSB7XG4gICAgICAgICAgICBpZiAoc2MgIT0gc3MpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgc2NnID0gMDsgc2NnIDwgdmVydGV4W3NjXS5zZWdtZW50Lmxlbmd0aDsgc2NnKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodmVydGV4W3NjXS5zZWdtZW50W3NjZ10gPT0gdmVydGV4W3NzXS5zZWdtZW50W3NnXSkge1xuICAgICAgICAgICAgICAgICAgdmVydGV4W3NzXS5jaGlsZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHNjLFxuICAgICAgICAgICAgICAgICAgICBhbmdsZTogTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnFTVkcuZ2V0QW5nbGUodmVydGV4W3NzXSwgdmVydGV4W3NjXSkuZGVnLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9DbGVhbiA9IFtdXG4gICAgICAgIGZvciAobGV0IGZyID0gMDsgZnIgPCB2ZXJ0ZXhbc3NdLmNoaWxkLmxlbmd0aCAtIDE7IGZyKyspIHtcbiAgICAgICAgICBmb3IgKGxldCBmdCA9IGZyICsgMTsgZnQgPCB2ZXJ0ZXhbc3NdLmNoaWxkLmxlbmd0aDsgZnQrKykge1xuICAgICAgICAgICAgaWYgKGZyICE9IGZ0ICYmIHR5cGVvZiB2ZXJ0ZXhbc3NdLmNoaWxkW2ZyXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWVcblxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICAgICAgICB2ZXJ0ZXhbc3NdLmNoaWxkW2Z0XS5hbmdsZSxcbiAgICAgICAgICAgICAgICAgIHZlcnRleFtzc10uY2hpbGRbZnJdLmFuZ2xlICsgMyxcbiAgICAgICAgICAgICAgICAgIHZlcnRleFtzc10uY2hpbGRbZnJdLmFuZ2xlIC0gMyxcbiAgICAgICAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgIGZvdW5kXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRPbmUgPSB0aGlzLnFTVkcuZ2FwKFxuICAgICAgICAgICAgICAgICAgdmVydGV4W3NzXSxcbiAgICAgICAgICAgICAgICAgIHZlcnRleFt2ZXJ0ZXhbc3NdLmNoaWxkW2Z0XS5pZF0sXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGNvbnN0IGRUd28gPSB0aGlzLnFTVkcuZ2FwKFxuICAgICAgICAgICAgICAgICAgdmVydGV4W3NzXSxcbiAgICAgICAgICAgICAgICAgIHZlcnRleFt2ZXJ0ZXhbc3NdLmNoaWxkW2ZyXS5pZF0sXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmIChkT25lID4gZFR3bykge1xuICAgICAgICAgICAgICAgICAgdG9DbGVhbi5wdXNoKGZ0KVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0b0NsZWFuLnB1c2goZnIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRvQ2xlYW4uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiIC0gYVxuICAgICAgICB9KVxuICAgICAgICB0b0NsZWFuLnB1c2goLTEpXG4gICAgICAgIGZvciAobGV0IGNjID0gMDsgY2MgPCB0b0NsZWFuLmxlbmd0aCAtIDE7IGNjKyspIHtcbiAgICAgICAgICBpZiAodG9DbGVhbltjY10gPiB0b0NsZWFuW2NjICsgMV0pIHtcbiAgICAgICAgICAgIHZlcnRleFtzc10ucmVtb3ZlZC5wdXNoKHZlcnRleFtzc10uY2hpbGRbdG9DbGVhbltjY11dLmlkKVxuICAgICAgICAgICAgdmVydGV4W3NzXS5jaGlsZC5zcGxpY2UodG9DbGVhbltjY10sIDEpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2ZXJ0ZXhUZXN0ID0gdmVydGV4XG4gICAgICByZXR1cm4gdmVydGV4XG4gICAgfSxcbiAgICBhcnJheUNvbXBhcmU6IChhcnIxLCBhcnIyLCBhcHApID0+IHtcbiAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgLy8qIEBhcnIxLCBhcnIyID0gQXJyYXkgdG8gY29tcGFyZSAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAvLyogQGFwcCA9IGFkZCBmdW5jdGlvbiBwb3AoKSBvciBzaGlmdCgpIHRvIEBhcnIxLCBhcnIyICpcbiAgICAgIC8vKiBGYWxzZSBpZiBhcnIxLmxlbmd0aCAhPSBhcnIyLmxlbmd0aCAgICAgICAgICAgICAgICAgKlxuICAgICAgLy8qIEZhbHNlIGlmIHZhbHVlIGludG8gYXJyMVtdICE9IGFycjJbXSAtIG5vIG9yZGVyICAgICAqXG4gICAgICAvLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgIC8vIGlmIChhcnIxLmxlbmd0aCAhPSBhcnIyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgbGV0IG1pbnVzID0gMFxuICAgICAgbGV0IHN0YXJ0ID0gMFxuICAgICAgaWYgKGFwcCA9PSAncG9wJykge1xuICAgICAgICBtaW51cyA9IDFcbiAgICAgIH1cbiAgICAgIGlmIChhcHAgPT0gJ3NoaWZ0Jykge1xuICAgICAgICBzdGFydCA9IDFcbiAgICAgIH1cbiAgICAgIGxldCBjb29yZENvdW50ZXIgPSBhcnIxLmxlbmd0aCAtIG1pbnVzIC0gc3RhcnRcbiAgICAgIGZvciAobGV0IGlGaXJzdCA9IHN0YXJ0OyBpRmlyc3QgPCBhcnIxLmxlbmd0aCAtIG1pbnVzOyBpRmlyc3QrKykge1xuICAgICAgICBmb3IgKGxldCBpU2Vjb25kID0gc3RhcnQ7IGlTZWNvbmQgPCBhcnIyLmxlbmd0aCAtIG1pbnVzOyBpU2Vjb25kKyspIHtcbiAgICAgICAgICBpZiAoYXJyMVtpRmlyc3RdID09IGFycjJbaVNlY29uZF0pIHtcbiAgICAgICAgICAgIGNvb3JkQ291bnRlci0tXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29vcmRDb3VudGVyID09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgdmVjdG9yVmVydGV4OiAodmV4MSwgdmV4MiwgdmV4MykgPT4ge1xuICAgICAgY29uc3QgdkN1cnIgPSB0aGlzLnFTVkcudmVjdG9yWFkodmV4MSwgdmV4MilcbiAgICAgIGNvbnN0IHZOZXh0ID0gdGhpcy5xU1ZHLnZlY3RvclhZKHZleDIsIHZleDMpXG4gICAgICBjb25zdCBOYSA9IE1hdGguc3FydCh2Q3Vyci54ICogdkN1cnIueCArIHZDdXJyLnkgKiB2Q3Vyci55KVxuICAgICAgY29uc3QgTmIgPSBNYXRoLnNxcnQodk5leHQueCAqIHZOZXh0LnggKyB2TmV4dC55ICogdk5leHQueSlcbiAgICAgIGNvbnN0IEMgPSAodkN1cnIueCAqIHZOZXh0LnggKyB2Q3Vyci55ICogdk5leHQueSkgLyAoTmEgKiBOYilcbiAgICAgIGNvbnN0IFMgPSB2Q3Vyci54ICogdk5leHQueSAtIHZDdXJyLnkgKiB2TmV4dC54XG4gICAgICBjb25zdCBCQUMgPSBNYXRoLnNpZ24oUykgKiBNYXRoLmFjb3MoQylcbiAgICAgIHJldHVybiBCQUMgKiAoMTgwIC8gTWF0aC5QSSlcbiAgICB9LFxuICAgIHNlZ21lbnRUcmVlOiAoVkVSVEVYX05VTUJFUiwgdmVydGV4KSA9PiB7XG4gICAgICBjb25zdCBUUkVFTElTVCA9IFtWRVJURVhfTlVNQkVSXVxuICAgICAgV0FZID0gW11cbiAgICAgIGNvbnN0IENPVU5UID0gdmVydGV4Lmxlbmd0aFxuICAgICAgY29uc3QgT1JJR0lOID0gVkVSVEVYX05VTUJFUlxuXG4gICAgICBjb25zdCB0cmVlID0gKFRSRUVMSVNULCBPUklHSU4sIENPVU5UKSA9PiB7XG4gICAgICAgIGlmIChUUkVFTElTVC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFRSRUVURU1QID0gW11cbiAgICAgICAgQ09VTlQtLVxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IFRSRUVMSVNULmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgICAgIGNvbnN0IFdSTyA9IFRSRUVMSVNUW2tdXG4gICAgICAgICAgY29uc3QgV1JPX0FSUkFZID0gV1JPLnRvU3RyaW5nKCkuc3BsaXQoJy0nKVxuICAgICAgICAgIGNvbnN0IFdSID0gV1JPX0FSUkFZW1dST19BUlJBWS5sZW5ndGggLSAxXVxuXG4gICAgICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCB2ZXJ0ZXhbV1JdLmNoaWxkLmxlbmd0aDsgdisrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHZlcnRleFtXUl0uY2hpbGRbdl0uaWQgPT0gT1JJR0lOICYmXG4gICAgICAgICAgICAgIENPVU5UIDwgdmVydGV4Lmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgV1JPX0FSUkFZLmxlbmd0aCA+IDJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBXQVlTIEhZUEVSXG4gICAgICAgICAgICAgIFdBWS5wdXNoKFdSTyArICctJyArIE9SSUdJTikgLy8gV0FZU1xuICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgdmFyIGJlc3RUb0FkZFxuICAgICAgICAgICAgY29uc3QgYmVzdERldCA9IDBcbiAgICAgICAgICAgIGxldCBuZXh0VmVydGV4ID0gLTFcbiAgICAgICAgICAgIC8vIHZhciBuZXh0VmVydGV4VmFsdWUgPSAzNjA7XG4gICAgICAgICAgICBsZXQgbmV4dERldGVyVmFsdWUgPSBJbmZpbml0eVxuICAgICAgICAgICAgbGV0IG5leHREZXRlclZhbCA9IDBcbiAgICAgICAgICAgIGxldCBuZXh0RmxhZyA9IDBcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXhbV1JdLmNoaWxkLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgIGlmIChXUiA9PSBPUklHSU4gJiYgQ09VTlQgPT0gdmVydGV4Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBUUkVFVEVNUC5wdXNoKFdSTyArICctJyArIHZlcnRleFtXUl0uY2hpbGRbMF0uaWQpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKFdSICE9IE9SSUdJTiAmJiBDT1VOVCA8IHZlcnRleC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgVFJFRVRFTVAucHVzaChXUk8gKyAnLScgKyB2ZXJ0ZXhbV1JdLmNoaWxkWzBdLmlkKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciB2ID0gMDtcbiAgICAgICAgICAgICAgICB2IDwgdmVydGV4W1dSXS5jaGlsZC5sZW5ndGggJiYgdmVydGV4W1dSXS5jaGlsZC5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgIHYrK1xuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoV1IgPT0gT1JJR0lOICYmIENPVU5UID09IHZlcnRleC5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUTyBJTklUIEZVTkNUSU9OIC0+IC8vIENMT0NLV0lTRSBSZXNlYXJjaFxuICAgICAgICAgICAgICAgICAgdmFyIHZEZXQgPSB0aGlzLnFTVkcudmVjdG9yVmVydGV4KFxuICAgICAgICAgICAgICAgICAgICB7IHg6IDAsIHk6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleFtXUl0sXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleFt2ZXJ0ZXhbV1JdLmNoaWxkW3ZdLmlkXSxcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGlmICh2RGV0ID49IG5leHREZXRlclZhbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0RmxhZyA9IDFcbiAgICAgICAgICAgICAgICAgICAgbmV4dERldGVyVmFsID0gdkRldFxuICAgICAgICAgICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGV4W1dSXS5jaGlsZFt2XS5pZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKE1hdGguc2lnbih2RGV0KSA9PSAtMSAmJiBuZXh0RmxhZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICB2RGV0IDwgbmV4dERldGVyVmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpZ24obmV4dERldGVyVmFsdWUpID4gLTFcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbmV4dERldGVyVmFsdWUgPSB2RGV0XG4gICAgICAgICAgICAgICAgICAgICAgbmV4dFZlcnRleCA9IHZlcnRleFtXUl0uY2hpbGRbdl0uaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgdkRldCA+IG5leHREZXRlclZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaWduKG5leHREZXRlclZhbHVlKSA9PSAtMVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0RGV0ZXJWYWx1ZSA9IHZEZXRcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGV4W1dSXS5jaGlsZFt2XS5pZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIFdSICE9IE9SSUdJTiAmJlxuICAgICAgICAgICAgICAgICAgV1JPX0FSUkFZW1dST19BUlJBWS5sZW5ndGggLSAyXSAhPSB2ZXJ0ZXhbV1JdLmNoaWxkW3ZdLmlkICYmXG4gICAgICAgICAgICAgICAgICBDT1VOVCA8IHZlcnRleC5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAvLyBDT1VOVEVSQ0xPQ0tXSVNFIFJlc2VhcmNoXG4gICAgICAgICAgICAgICAgICB2YXIgdkRldCA9IHRoaXMucVNWRy52ZWN0b3JWZXJ0ZXgoXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleFtXUk9fQVJSQVlbV1JPX0FSUkFZLmxlbmd0aCAtIDJdXSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4W1dSXSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4W3ZlcnRleFtXUl0uY2hpbGRbdl0uaWRdLFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgaWYgKHZEZXQgPCBuZXh0RGV0ZXJWYWx1ZSAmJiBuZXh0RmxhZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHREZXRlclZhbHVlID0gdkRldFxuICAgICAgICAgICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGV4W1dSXS5jaGlsZFt2XS5pZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKE1hdGguc2lnbih2RGV0KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0RmxhZyA9IDFcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZEZXQgPD0gbmV4dERldGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0RGV0ZXJWYWx1ZSA9IHZEZXRcbiAgICAgICAgICAgICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGV4W1dSXS5jaGlsZFt2XS5pZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZXh0VmVydGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgVFJFRVRFTVAucHVzaChXUk8gKyAnLScgKyBuZXh0VmVydGV4KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChDT1VOVCA+IDApIHtcbiAgICAgICAgICB0cmVlKFRSRUVURU1QLCBPUklHSU4sIENPVU5UKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRyZWUoVFJFRUxJU1QsIE9SSUdJTiwgQ09VTlQpXG4gICAgICByZXR1cm4gV0FZXG4gICAgfSxcbiAgICBwb2x5Z29uaXplOiAoc2VnbWVudCkgPT4ge1xuICAgICAganVuY3Rpb24gPSB0aGlzLnFTVkcuanVuY3Rpb25MaXN0KHNlZ21lbnQpXG4gICAgICB2ZXJ0ZXggPSB0aGlzLnFTVkcudmVydGV4TGlzdChqdW5jdGlvbiwgc2VnbWVudClcbiAgICAgIGNvbnN0IHZlcnRleENvcHkgPSB0aGlzLnFTVkcudmVydGV4TGlzdChqdW5jdGlvbiwgc2VnbWVudClcblxuICAgICAgY29uc3QgZWRnZXNDaGlsZCA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZlcnRleC5sZW5ndGg7IGorKykge1xuICAgICAgICBmb3IgKGxldCB2diA9IDA7IHZ2IDwgdmVydGV4W2pdLmNoaWxkLmxlbmd0aDsgdnYrKykge1xuICAgICAgICAgIGVkZ2VzQ2hpbGQucHVzaChbaiwgdmVydGV4W2pdLmNoaWxkW3Z2XS5pZF0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvbHlnb25zID0gW11cbiAgICAgIGxldCBXQVlTXG4gICAgICBmb3IgKGxldCBqYyA9IDA7IGpjIDwgZWRnZXNDaGlsZC5sZW5ndGg7IGpjKyspIHtcbiAgICAgICAgbGV0IGJlc3RWZXJ0ZXggPSAwXG4gICAgICAgIGxldCBiZXN0VmVydGV4VmFsdWUgPSBJbmZpbml0eVxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZlcnRleC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHZlcnRleFtqXS54IDwgYmVzdFZlcnRleFZhbHVlICYmXG4gICAgICAgICAgICB2ZXJ0ZXhbal0uY2hpbGQubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgdmVydGV4W2pdLmJ5cGFzcyA9PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBiZXN0VmVydGV4VmFsdWUgPSB2ZXJ0ZXhbal0ueFxuICAgICAgICAgICAgYmVzdFZlcnRleCA9IGpcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdmVydGV4W2pdLnggPT0gYmVzdFZlcnRleFZhbHVlICYmXG4gICAgICAgICAgICB2ZXJ0ZXhbal0uY2hpbGQubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgdmVydGV4W2pdLmJ5cGFzcyA9PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodmVydGV4W2pdLnkgPiB2ZXJ0ZXhbYmVzdFZlcnRleF0ueSkge1xuICAgICAgICAgICAgICBiZXN0VmVydGV4VmFsdWUgPSB2ZXJ0ZXhbal0ueFxuICAgICAgICAgICAgICBiZXN0VmVydGV4ID0galxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiJWMlc1wiLCBcImJhY2tncm91bmQ6IHllbGxvdzsgZm9udC1zaXplOiAxNHB4O1wiLFwiUkVTRUFSQ0ggV0FZIEZPUiBTVEFSVElORyBWRVJURVggXCIrYmVzdFZlcnRleCk7XG4gICAgICAgIFdBWVMgPSB0aGlzLnFTVkcuc2VnbWVudFRyZWUoYmVzdFZlcnRleCwgdmVydGV4KVxuICAgICAgICBpZiAoV0FZUy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHZlcnRleFtiZXN0VmVydGV4XS5ieXBhc3MgPSAxXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFdBWVMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHRlbXBTdXJmYWNlID0gV0FZU1swXS5zcGxpdCgnLScpXG4gICAgICAgICAgY29uc3QgbGVuZ3RoUm9vbSA9IHRoaXMucVNWRy5hcmVhUm9vbSh2ZXJ0ZXgsIHRlbXBTdXJmYWNlKVxuICAgICAgICAgIGNvbnN0IGJlc3RBcmVhID0gcGFyc2VJbnQobGVuZ3RoUm9vbSlcbiAgICAgICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICAgICAgZm9yIChsZXQgc3NzID0gMDsgc3NzIDwgcG9seWdvbnMubGVuZ3RoOyBzc3MrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMucVNWRy5hcnJheUNvbXBhcmUocG9seWdvbnNbc3NzXS53YXksIHRlbXBTdXJmYWNlLCAncG9wJykpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgICAgICB2ZXJ0ZXhbYmVzdFZlcnRleF0uYnlwYXNzID0gMVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChiZXN0QXJlYSA8IDM2MCkge1xuICAgICAgICAgICAgdmVydGV4W2Jlc3RWZXJ0ZXhdLmJ5cGFzcyA9IDFcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZlcnRleFtiZXN0VmVydGV4XS5ieXBhc3MgPT0gMCkge1xuICAgICAgICAgICAgLy8gPC0tLS0tLS0tIFRPIFJFVklTRSBJTVBPUlRBTlQgISEhISEhISEgYmVzdEFyZWEgQ29udHJvbCA/Pz9cbiAgICAgICAgICAgIGNvbnN0IHJlYWxDb29yZHMgPSB0aGlzLnFTVkcucG9seWdvbkludG9XYWxscyh2ZXJ0ZXgsIHRlbXBTdXJmYWNlKVxuICAgICAgICAgICAgY29uc3QgcmVhbEFyZWEgPSB0aGlzLnFTVkcuYXJlYShyZWFsQ29vcmRzLmluc2lkZSlcbiAgICAgICAgICAgIGNvbnN0IG91dHNpZGVBcmVhID0gdGhpcy5xU1ZHLmFyZWEocmVhbENvb3Jkcy5vdXRzaWRlKVxuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gW11cbiAgICAgICAgICAgIGZvciAobGV0IHJyID0gMDsgcnIgPCB0ZW1wU3VyZmFjZS5sZW5ndGg7IHJyKyspIHtcbiAgICAgICAgICAgICAgY29vcmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IHZlcnRleFt0ZW1wU3VyZmFjZVtycl1dLngsXG4gICAgICAgICAgICAgICAgeTogdmVydGV4W3RlbXBTdXJmYWNlW3JyXV0ueSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdBUk5JTkcgLT4gRkFLRVxuICAgICAgICAgICAgaWYgKHJlYWxDb29yZHMuaW5zaWRlLmxlbmd0aCAhPSByZWFsQ29vcmRzLm91dHNpZGUpIHtcbiAgICAgICAgICAgICAgcG9seWdvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgd2F5OiB0ZW1wU3VyZmFjZSxcbiAgICAgICAgICAgICAgICBjb29yZHM6IGNvb3JkcyxcbiAgICAgICAgICAgICAgICBjb29yZHNPdXRzaWRlOiByZWFsQ29vcmRzLm91dHNpZGUsXG4gICAgICAgICAgICAgICAgY29vcmRzSW5zaWRlOiByZWFsQ29vcmRzLmluc2lkZSxcbiAgICAgICAgICAgICAgICBhcmVhOiByZWFsQXJlYSxcbiAgICAgICAgICAgICAgICBvdXRzaWRlQXJlYTogb3V0c2lkZUFyZWEsXG4gICAgICAgICAgICAgICAgcmVhbEFyZWE6IGJlc3RBcmVhLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gUkVBTCBJTlNJREUgUE9MWUdPTkUgLT4gUk9PTVxuICAgICAgICAgICAgICBwb2x5Z29ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICB3YXk6IHRlbXBTdXJmYWNlLFxuICAgICAgICAgICAgICAgIGNvb3JkczogcmVhbENvb3Jkcy5pbnNpZGUsXG4gICAgICAgICAgICAgICAgY29vcmRzT3V0c2lkZTogcmVhbENvb3Jkcy5vdXRzaWRlLFxuICAgICAgICAgICAgICAgIGFyZWE6IHJlYWxBcmVhLFxuICAgICAgICAgICAgICAgIG91dHNpZGVBcmVhOiBvdXRzaWRlQXJlYSxcbiAgICAgICAgICAgICAgICByZWFsQXJlYTogYmVzdEFyZWEsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJFTU9WRSBGSVJTVCBQT0lOVCBPRiBXQVkgT04gQ0hJTERTIEZJUlNUIFZFUlRFWFxuICAgICAgICAgICAgZm9yICh2YXIgYWEgPSAwOyBhYSA8IHZlcnRleFtiZXN0VmVydGV4XS5jaGlsZC5sZW5ndGg7IGFhKyspIHtcbiAgICAgICAgICAgICAgaWYgKHZlcnRleFtiZXN0VmVydGV4XS5jaGlsZFthYV0uaWQgPT0gdGVtcFN1cmZhY2VbMV0pIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhbYmVzdFZlcnRleF0uY2hpbGQuc3BsaWNlKGFhLCAxKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJFTU9WRSBGSVJTVCBWRVJURVggT0YgV0FZIE9OIENISUxEUyBTRUNPTkQgVkVSVEVYXG4gICAgICAgICAgICBmb3IgKHZhciBhYSA9IDA7IGFhIDwgdmVydGV4W3RlbXBTdXJmYWNlWzFdXS5jaGlsZC5sZW5ndGg7IGFhKyspIHtcbiAgICAgICAgICAgICAgaWYgKHZlcnRleFt0ZW1wU3VyZmFjZVsxXV0uY2hpbGRbYWFdLmlkID09IGJlc3RWZXJ0ZXgpIHtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhbdGVtcFN1cmZhY2VbMV1dLmNoaWxkLnNwbGljZShhYSwgMSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9SRU1PVkUgRklMQU1FTlRTID8/Pz8/XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgdmFyIGxvb3BpbmcgPSAwXG4gICAgICAgICAgICAgIGZvciAodmFyIGFhID0gMDsgYWEgPCB2ZXJ0ZXgubGVuZ3RoOyBhYSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZlcnRleFthYV0uY2hpbGQubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGxvb3BpbmcgPSAxXG4gICAgICAgICAgICAgICAgICB2ZXJ0ZXhbYWFdLmNoaWxkID0gW11cbiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGFiID0gMDsgYWIgPCB2ZXJ0ZXgubGVuZ3RoOyBhYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9SIE1BS0UgT05MWSBPTiBUSEUgV0FZIHRlbXBTdXJmYWNlID8/IEJFVFRFUiA/P1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhYyA9IDA7IGFjIDwgdmVydGV4W2FiXS5jaGlsZC5sZW5ndGg7IGFjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGV4W2FiXS5jaGlsZFthY10uaWQgPT0gYWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFthYl0uY2hpbGQuc3BsaWNlKGFjLCAxKVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAobG9vcGluZyA9PSAxKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy9TVUIgQVJFQShzKSBPTiBQT0xZR09OIENPTlRBSU5TIE9USEVSUyBGUkVFIFBPTFlHT05TIChwb2x5Z29uIHdpdGhvdXQgY29tbW9uU2lkZUVkZ2UpXG4gICAgICBmb3IgKGxldCBwcCA9IDA7IHBwIDwgcG9seWdvbnMubGVuZ3RoOyBwcCsrKSB7XG4gICAgICAgIGNvbnN0IGluc2lkZSA9IFtdXG4gICAgICAgIGZvciAobGV0IGZyZWUgPSAwOyBmcmVlIDwgcG9seWdvbnMubGVuZ3RoOyBmcmVlKyspIHtcbiAgICAgICAgICBpZiAocHAgIT0gZnJlZSkge1xuICAgICAgICAgICAgY29uc3QgcG9seWdvbkZyZWUgPSBwb2x5Z29uc1tmcmVlXS5jb29yZHNcbiAgICAgICAgICAgIGNvbnN0IGNvdW50Q29vcmRzID0gcG9seWdvbkZyZWUubGVuZ3RoXG4gICAgICAgICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICAgICAgICBmb3IgKHBmID0gMDsgcGYgPCBjb3VudENvb3JkczsgcGYrKykge1xuICAgICAgICAgICAgICBmb3VuZCA9IHRoaXMucVNWRy5yYXlDYXN0aW5nKHBvbHlnb25GcmVlW3BmXSwgcG9seWdvbnNbcHBdLmNvb3JkcylcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICBpbnNpZGUucHVzaChmcmVlKVxuICAgICAgICAgICAgICBwb2x5Z29uc1twcF0uYXJlYSA9IHBvbHlnb25zW3BwXS5hcmVhIC0gcG9seWdvbnNbZnJlZV0ub3V0c2lkZUFyZWFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcG9seWdvbnNbcHBdLmluc2lkZSA9IGluc2lkZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgcG9seWdvbnM6IHBvbHlnb25zLCB2ZXJ0ZXg6IHZlcnRleCB9XG4gICAgfSxcbiAgICBkaWZmQXJyYXk6IChhcnIxLCBhcnIyKSA9PiB7XG4gICAgICByZXR1cm4gYXJyMS5jb25jYXQoYXJyMikuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgaWYgKCEoYXJyMS5pbmNsdWRlcyh2YWwpICYmIGFycjIuaW5jbHVkZXModmFsKSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBkaWZmT2JqSW50b0FycmF5OiAoYXJyMSwgYXJyMikgPT4ge1xuICAgICAgbGV0IGNvdW50ID0gMFxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBhcnIxLmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGFycjIubGVuZ3RoIC0gMTsgbisrKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyhhcnIxW2tdLCBhcnIyW25dKSkge1xuICAgICAgICAgICAgY291bnQrK1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyogQGFycjEsIGFycjIgPSBBcnJheSB0byBjb21wYXJlICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAvLyogQGFwcCA9IGFkZCBmdW5jdGlvbiBwb3AoKSBvciBzaGlmdCgpIHRvIEBhcnIxLCBhcnIyICpcbiAgICAgICAgICAvLyogRmFsc2UgaWYgYXJyMS5sZW5ndGggIT0gYXJyMi5sZW5ndGggICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAvLyogRmFsc2UgaWYgdmFsdWUgaW50byBhcnIxW10gIT0gYXJyMltdIC0gbm8gb3JkZXIgICAgICpcbiAgICAgICAgICAvLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHdhaXRpbmcgPSBhcnIxLmxlbmd0aCAtIDFcbiAgICAgIGlmICh3YWl0aW5nIDwgYXJyMi5sZW5ndGggLSAxKSB7XG4gICAgICAgIHdhaXRpbmcgPSBhcnIyLmxlbmd0aFxuICAgICAgfVxuICAgICAgcmV0dXJuIHdhaXRpbmcgLSBjb3VudFxuICAgIH0sXG4gICAgcmF5Q2FzdGluZzogKHBvaW50LCBwb2x5Z29uKSA9PiB7XG4gICAgICBjb25zdCB4ID0gcG9pbnQueCxcbiAgICAgICAgeSA9IHBvaW50LnlcbiAgICAgIGxldCBpbnNpZGUgPSBmYWxzZVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGogPSBwb2x5Z29uLmxlbmd0aCAtIDE7IGkgPCBwb2x5Z29uLmxlbmd0aDsgaiA9IGkrKykge1xuICAgICAgICBjb25zdCB4aSA9IHBvbHlnb25baV0ueCxcbiAgICAgICAgICB5aSA9IHBvbHlnb25baV0ueVxuICAgICAgICBjb25zdCB4aiA9IHBvbHlnb25bal0ueCxcbiAgICAgICAgICB5aiA9IHBvbHlnb25bal0ueVxuICAgICAgICBjb25zdCBpbnRlcnNlY3QgPVxuICAgICAgICAgIHlpID4geSAhPSB5aiA+IHkgJiYgeCA8ICgoeGogLSB4aSkgKiAoeSAtIHlpKSkgLyAoeWogLSB5aSkgKyB4aVxuICAgICAgICBpZiAoaW50ZXJzZWN0KSB7XG4gICAgICAgICAgaW5zaWRlID0gIWluc2lkZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zaWRlXG4gICAgfSxcbiAgICBwb2x5Z29uVmlzdWFsQ2VudGVyOiAocm9vbSkgPT4ge1xuICAgICAgLy9wb2x5Z29uID0gW3t4MSx5MX0sIHt4Mix5Mn0sIC4uLl1cbiAgICAgIGNvbnN0IHBvbHlnb24gPSByb29tLmNvb3Jkc1xuICAgICAgY29uc3QgaW5zaWRlQXJyYXkgPSByb29tLmluc2lkZVxuICAgICAgY29uc3Qgc2FtcGxlID0gODBcbiAgICAgIGNvbnN0IGdyaWQgPSBbXVxuICAgICAgLy9CT1VORElORyBCT1ggT0YgUE9MWUdPTlxuICAgICAgbGV0IG1pblgsIG1pblksIG1heFgsIG1heFlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9seWdvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwID0gcG9seWdvbltpXVxuICAgICAgICBpZiAoIWkgfHwgcC54IDwgbWluWCkge1xuICAgICAgICAgIG1pblggPSBwLnhcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWkgfHwgcC55IDwgbWluWSkge1xuICAgICAgICAgIG1pblkgPSBwLnlcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWkgfHwgcC54ID4gbWF4WCkge1xuICAgICAgICAgIG1heFggPSBwLnhcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWkgfHwgcC55ID4gbWF4WSkge1xuICAgICAgICAgIG1heFkgPSBwLnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgd2lkdGggPSBtYXhYIC0gbWluWFxuICAgICAgY29uc3QgaGVpZ2h0ID0gbWF4WSAtIG1pbllcbiAgICAgIC8vSU5JVCBHUklEXG4gICAgICBjb25zdCBzYW1wbGVXaWR0aCA9IE1hdGguZmxvb3Iod2lkdGggLyBzYW1wbGUpXG4gICAgICBjb25zdCBzYW1wbGVIZWlnaHQgPSBNYXRoLmZsb29yKGhlaWdodCAvIHNhbXBsZSlcbiAgICAgIGZvciAobGV0IGhoID0gMDsgaGggPCBzYW1wbGU7IGhoKyspIHtcbiAgICAgICAgZm9yIChsZXQgd3cgPSAwOyB3dyA8IHNhbXBsZTsgd3crKykge1xuICAgICAgICAgIGNvbnN0IHBvc1ggPSBtaW5YICsgd3cgKiBzYW1wbGVXaWR0aFxuICAgICAgICAgIGNvbnN0IHBvc1kgPSBtaW5ZICsgaGggKiBzYW1wbGVIZWlnaHRcbiAgICAgICAgICBpZiAodGhpcy5xU1ZHLnJheUNhc3RpbmcoeyB4OiBwb3NYLCB5OiBwb3NZIH0sIHBvbHlnb24pKSB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgaW5zaWRlQXJyYXkubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzLnFTVkcucmF5Q2FzdGluZyhcbiAgICAgICAgICAgICAgICAgIHsgeDogcG9zWCwgeTogcG9zWSB9LFxuICAgICAgICAgICAgICAgICAgUk9PTVtpbnNpZGVBcnJheVtpaV1dLmNvb3Jkc091dHNpZGUsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgIGdyaWQucHVzaCh7IHg6IHBvc1gsIHk6IHBvc1kgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBiZXN0UmFuZ2UgPSAwXG4gICAgICBsZXQgYmVzdE1hdHJpeFxuXG4gICAgICBmb3IgKGxldCBtYXRyaXggPSAwOyBtYXRyaXggPCBncmlkLmxlbmd0aDsgbWF0cml4KyspIHtcbiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gSW5maW5pdHlcbiAgICAgICAgZm9yIChsZXQgcHAgPSAwOyBwcCA8IHBvbHlnb24ubGVuZ3RoIC0gMTsgcHArKykge1xuICAgICAgICAgIGNvbnN0IHNjYW5EaXN0YW5jZSA9IHRoaXMucVNWRy5wRGlzdGFuY2UoXG4gICAgICAgICAgICBncmlkW21hdHJpeF0sXG4gICAgICAgICAgICBwb2x5Z29uW3BwXSxcbiAgICAgICAgICAgIHBvbHlnb25bcHAgKyAxXSxcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKHNjYW5EaXN0YW5jZS5kaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBtaW5EaXN0YW5jZSA9IHNjYW5EaXN0YW5jZS5kaXN0YW5jZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWluRGlzdGFuY2UgPiBiZXN0UmFuZ2UpIHtcbiAgICAgICAgICBiZXN0TWF0cml4ID0gbWF0cml4XG4gICAgICAgICAgYmVzdFJhbmdlID0gbWluRGlzdGFuY2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdyaWRbYmVzdE1hdHJpeF1cbiAgICB9LFxuICAgIHRleHRPbkRpdjogKGxhYmVsLCBwb3MsIHN0eWxlZCwgZGl2KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBvcyAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAgICAgJ3RleHQnLFxuICAgICAgICApXG4gICAgICAgIHRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3gnLCBwb3MueClcbiAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIHBvcy55KVxuICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAnc3R5bGUnLFxuICAgICAgICAgICdmaWxsOicgK1xuICAgICAgICAgICAgc3R5bGVkLmNvbG9yICtcbiAgICAgICAgICAgICc7Zm9udC13ZWlnaHQ6JyArXG4gICAgICAgICAgICBzdHlsZWQuZm9udFdlaWdodCArXG4gICAgICAgICAgICAnO2ZvbnQtc2l6ZTonICtcbiAgICAgICAgICAgIHN0eWxlZC5mb250U2l6ZSxcbiAgICAgICAgKVxuICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICB0ZXh0LnRleHRDb250ZW50ID0gbGFiZWxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2KS5hcHBlbmRDaGlsZCh0ZXh0KVxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cblxuQXBwbGljYXRpb24ucHJvdG90eXBlLmVkaXRvckZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgd2FsbDogKHN0YXJ0LCBlbmQsIHR5cGUsIHRoaWNrKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aGljayxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICBjaGlsZDogbnVsbCxcbiAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgIGVxdWF0aW9uczoge30sXG4gICAgICAgIGNvb3JkczogW10sXG4gICAgICAgIGJhY2tVcDogZmFsc2UsXG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRXYWxsTm9kZTogKGNvb3JkcywgZXhjZXB0ID0gZmFsc2UpID0+IHtcbiAgICAgIC8vIFJFVFVSTiBPQkpFQ1RTIEFSUkFZIElOREVYIE9GIFdBTExTIFtXQUxMMSwgV0FMTDIsIG4uLi5dIFdBTExTIFdJVEggVEhJUyBOT0RFLCBFWENFUFQgUEFSQU0gPSBPQkpFQ1QgV0FMTFxuICAgICAgY29uc3Qgbm9kZXMgPSBbXVxuICAgICAgZm9yIChjb25zdCBrIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXSwgZXhjZXB0KSkge1xuICAgICAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXS5zdGFydCwgY29vcmRzKSkge1xuICAgICAgICAgICAgbm9kZXMucHVzaCh7IHdhbGw6IHRoaXMuV0FMTFNba10sIHR5cGU6ICdzdGFydCcgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzT2JqZWN0c0VxdWFscyh0aGlzLldBTExTW2tdLmVuZCwgY29vcmRzKSkge1xuICAgICAgICAgICAgbm9kZXMucHVzaCh7IHdhbGw6IHRoaXMuV0FMTFNba10sIHR5cGU6ICdlbmQnIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm9kZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZXNcbiAgICAgIH1cbiAgICB9LFxuICAgIHdhbGxzQ29tcHV0aW5nOiAoV0FMTFMsIGFjdGlvbiA9IGZhbHNlKSA9PiB7XG4gICAgICAvLyBJRiBBQ1RJT04gPT0gTU9WRSAtPiBlcXVhdGlvbjIgZXhpc3QgISEhISFcbiAgICAgICQoJyNib3h3YWxsJykuZW1wdHkoKVxuICAgICAgJCgnI2JveEFyZWEnKS5lbXB0eSgpXG5cbiAgICAgIGZvciAodmFyIHZlcnRpY2UgPSAwOyB2ZXJ0aWNlIDwgdGhpcy5XQUxMUy5sZW5ndGg7IHZlcnRpY2UrKykge1xuICAgICAgICB2YXIgd2FsbCA9IFdBTExTW3ZlcnRpY2VdXG4gICAgICAgIGlmICh3YWxsLnBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh3YWxsLnBhcmVudC5zdGFydCwgd2FsbC5zdGFydCkgJiZcbiAgICAgICAgICAgICFpc09iamVjdHNFcXVhbHMod2FsbC5wYXJlbnQuZW5kLCB3YWxsLnN0YXJ0KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgd2FsbC5wYXJlbnQgPSBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3YWxsLmNoaWxkICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaXNPYmplY3RzRXF1YWxzKHdhbGwuY2hpbGQuc3RhcnQsIHdhbGwuZW5kKSAmJlxuICAgICAgICAgICAgIWlzT2JqZWN0c0VxdWFscyh3YWxsLmNoaWxkLmVuZCwgd2FsbC5lbmQpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB3YWxsLmNoaWxkID0gbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciB2ZXJ0aWNlID0gMDsgdmVydGljZSA8IFdBTExTLmxlbmd0aDsgdmVydGljZSsrKSB7XG4gICAgICAgIHZhciB3YWxsID0gV0FMTFNbdmVydGljZV1cbiAgICAgICAgaWYgKHdhbGwucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3RzRXF1YWxzKHdhbGwucGFyZW50LnN0YXJ0LCB3YWxsLnN0YXJ0KSkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzV2FsbCA9IHdhbGwucGFyZW50XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNXYWxsU3RhcnQgPSBwcmV2aW91c1dhbGwuZW5kXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNXYWxsRW5kID0gcHJldmlvdXNXYWxsLnN0YXJ0XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc09iamVjdHNFcXVhbHMod2FsbC5wYXJlbnQuZW5kLCB3YWxsLnN0YXJ0KSkge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzV2FsbCA9IHdhbGwucGFyZW50XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNXYWxsU3RhcnQgPSBwcmV2aW91c1dhbGwuc3RhcnRcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1dhbGxFbmQgPSBwcmV2aW91c1dhbGwuZW5kXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IFMgPSB0aGlzLmVkaXRvci5nZXRXYWxsTm9kZSh3YWxsLnN0YXJ0LCB3YWxsKVxuICAgICAgICAgIC8vIGlmICh3YWxsSW5oaWJhdGlvbiAmJiBpc09iamVjdHNFcXVhbHMod2FsbCwgd2FsbEluaGliYXRpb24pKSBTID0gZmFsc2U7XG4gICAgICAgICAgZm9yICh2YXIgayBpbiBTKSB7XG4gICAgICAgICAgICB2YXIgZXFJbnRlciA9IHRoaXMuZWRpdG9yLmNyZWF0ZUVxdWF0aW9uRnJvbVdhbGwoU1trXS53YWxsKVxuICAgICAgICAgICAgdmFyIGFuZ2xlSW50ZXIgPSA5MCAvLyBUTyBQQVNTIFRFU1RcbiAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gJ21vdmUnKSB7XG4gICAgICAgICAgICAgIGFuZ2xlSW50ZXIgPSB0aGlzLnFTVkcuYW5nbGVCZXR3ZWVuRXF1YXRpb25zKFxuICAgICAgICAgICAgICAgIGVxSW50ZXIuQSxcbiAgICAgICAgICAgICAgICB0aGlzLmVxdWF0aW9uMi5BLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIFNba10udHlwZSA9PSAnc3RhcnQnICYmXG4gICAgICAgICAgICAgIFNba10ud2FsbC5wYXJlbnQgPT0gbnVsbCAmJlxuICAgICAgICAgICAgICBhbmdsZUludGVyID4gMjAgJiZcbiAgICAgICAgICAgICAgYW5nbGVJbnRlciA8IDE2MFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdhbGwucGFyZW50ID0gU1trXS53YWxsXG4gICAgICAgICAgICAgIFNba10ud2FsbC5wYXJlbnQgPSB3YWxsXG4gICAgICAgICAgICAgIHZhciBwcmV2aW91c1dhbGwgPSB3YWxsLnBhcmVudFxuICAgICAgICAgICAgICB2YXIgcHJldmlvdXNXYWxsU3RhcnQgPSBwcmV2aW91c1dhbGwuZW5kXG4gICAgICAgICAgICAgIHZhciBwcmV2aW91c1dhbGxFbmQgPSBwcmV2aW91c1dhbGwuc3RhcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgU1trXS50eXBlID09ICdlbmQnICYmXG4gICAgICAgICAgICAgIFNba10ud2FsbC5jaGlsZCA9PSBudWxsICYmXG4gICAgICAgICAgICAgIGFuZ2xlSW50ZXIgPiAyMCAmJlxuICAgICAgICAgICAgICBhbmdsZUludGVyIDwgMTYwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgd2FsbC5wYXJlbnQgPSBTW2tdLndhbGxcbiAgICAgICAgICAgICAgU1trXS53YWxsLmNoaWxkID0gd2FsbFxuICAgICAgICAgICAgICB2YXIgcHJldmlvdXNXYWxsID0gd2FsbC5wYXJlbnRcbiAgICAgICAgICAgICAgdmFyIHByZXZpb3VzV2FsbFN0YXJ0ID0gcHJldmlvdXNXYWxsLnN0YXJ0XG4gICAgICAgICAgICAgIHZhciBwcmV2aW91c1dhbGxFbmQgPSBwcmV2aW91c1dhbGwuZW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhbGwuY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChpc09iamVjdHNFcXVhbHMod2FsbC5jaGlsZC5lbmQsIHdhbGwuZW5kKSkge1xuICAgICAgICAgICAgdmFyIG5leHRXYWxsID0gd2FsbC5jaGlsZFxuICAgICAgICAgICAgdmFyIG5leHRXYWxsU3RhcnQgPSBuZXh0V2FsbC5lbmRcbiAgICAgICAgICAgIHZhciBuZXh0V2FsbEVuZCA9IG5leHRXYWxsLnN0YXJ0XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXh0V2FsbCA9IHdhbGwuY2hpbGRcbiAgICAgICAgICAgIHZhciBuZXh0V2FsbFN0YXJ0ID0gbmV4dFdhbGwuc3RhcnRcbiAgICAgICAgICAgIHZhciBuZXh0V2FsbEVuZCA9IG5leHRXYWxsLmVuZFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBFID0gdGhpcy5lZGl0b3IuZ2V0V2FsbE5vZGUod2FsbC5lbmQsIHdhbGwpXG4gICAgICAgICAgLy8gaWYgKHdhbGxJbmhpYmF0aW9uICYmIGlzT2JqZWN0c0VxdWFscyh3YWxsLCB3YWxsSW5oaWJhdGlvbikpIEUgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBrIGluIEUpIHtcbiAgICAgICAgICAgIHZhciBlcUludGVyID0gdGhpcy5lZGl0b3IuY3JlYXRlRXF1YXRpb25Gcm9tV2FsbChFW2tdLndhbGwpXG4gICAgICAgICAgICB2YXIgYW5nbGVJbnRlciA9IDkwIC8vIFRPIFBBU1MgVEVTVFxuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSAnbW92ZScpIHtcbiAgICAgICAgICAgICAgYW5nbGVJbnRlciA9IHRoaXMucVNWRy5hbmdsZUJldHdlZW5FcXVhdGlvbnMoXG4gICAgICAgICAgICAgICAgZXFJbnRlci5BLFxuICAgICAgICAgICAgICAgIHRoaXMuZXF1YXRpb24yLkEsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgRVtrXS50eXBlID09ICdlbmQnICYmXG4gICAgICAgICAgICAgIEVba10ud2FsbC5jaGlsZCA9PSBudWxsICYmXG4gICAgICAgICAgICAgIGFuZ2xlSW50ZXIgPiAyMCAmJlxuICAgICAgICAgICAgICBhbmdsZUludGVyIDwgMTYwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgd2FsbC5jaGlsZCA9IEVba10ud2FsbFxuICAgICAgICAgICAgICBFW2tdLndhbGwuY2hpbGQgPSB3YWxsXG4gICAgICAgICAgICAgIHZhciBuZXh0V2FsbCA9IHdhbGwuY2hpbGRcbiAgICAgICAgICAgICAgdmFyIG5leHRXYWxsU3RhcnQgPSBuZXh0V2FsbC5lbmRcbiAgICAgICAgICAgICAgdmFyIG5leHRXYWxsRW5kID0gbmV4dFdhbGwuc3RhcnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgRVtrXS50eXBlID09ICdzdGFydCcgJiZcbiAgICAgICAgICAgICAgRVtrXS53YWxsLnBhcmVudCA9PSBudWxsICYmXG4gICAgICAgICAgICAgIGFuZ2xlSW50ZXIgPiAyMCAmJlxuICAgICAgICAgICAgICBhbmdsZUludGVyIDwgMTYwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgd2FsbC5jaGlsZCA9IEVba10ud2FsbFxuICAgICAgICAgICAgICBFW2tdLndhbGwucGFyZW50ID0gd2FsbFxuICAgICAgICAgICAgICB2YXIgbmV4dFdhbGwgPSB3YWxsLmNoaWxkXG4gICAgICAgICAgICAgIHZhciBuZXh0V2FsbFN0YXJ0ID0gbmV4dFdhbGwuc3RhcnRcbiAgICAgICAgICAgICAgdmFyIG5leHRXYWxsRW5kID0gbmV4dFdhbGwuZW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYW5nbGVXYWxsID0gTWF0aC5hdGFuMihcbiAgICAgICAgICB3YWxsLmVuZC55IC0gd2FsbC5zdGFydC55LFxuICAgICAgICAgIHdhbGwuZW5kLnggLSB3YWxsLnN0YXJ0LngsXG4gICAgICAgIClcbiAgICAgICAgd2FsbC5hbmdsZSA9IGFuZ2xlV2FsbFxuICAgICAgICBjb25zdCB3YWxsVGhpY2tYID0gKHdhbGwudGhpY2sgLyAyKSAqIE1hdGguc2luKGFuZ2xlV2FsbClcbiAgICAgICAgY29uc3Qgd2FsbFRoaWNrWSA9ICh3YWxsLnRoaWNrIC8gMikgKiBNYXRoLmNvcyhhbmdsZVdhbGwpXG4gICAgICAgIGNvbnN0IGVxV2FsbFVwID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgIHdhbGwuc3RhcnQueCArIHdhbGxUaGlja1gsXG4gICAgICAgICAgd2FsbC5zdGFydC55IC0gd2FsbFRoaWNrWSxcbiAgICAgICAgICB3YWxsLmVuZC54ICsgd2FsbFRoaWNrWCxcbiAgICAgICAgICB3YWxsLmVuZC55IC0gd2FsbFRoaWNrWSxcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBlcVdhbGxEdyA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICB3YWxsLnN0YXJ0LnggLSB3YWxsVGhpY2tYLFxuICAgICAgICAgIHdhbGwuc3RhcnQueSArIHdhbGxUaGlja1ksXG4gICAgICAgICAgd2FsbC5lbmQueCAtIHdhbGxUaGlja1gsXG4gICAgICAgICAgd2FsbC5lbmQueSArIHdhbGxUaGlja1ksXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZXFXYWxsQmFzZSA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICB3YWxsLnN0YXJ0LngsXG4gICAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgKVxuICAgICAgICB3YWxsLmVxdWF0aW9ucyA9IHsgdXA6IGVxV2FsbFVwLCBkb3duOiBlcVdhbGxEdywgYmFzZTogZXFXYWxsQmFzZSB9XG4gICAgICAgIHZhciBkV2F5XG5cbiAgICAgICAgLy8gV0FMTCBTVEFSVEVEXG4gICAgICAgIGlmICh3YWxsLnBhcmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGVxUCA9IHRoaXMucVNWRy5wZXJwZW5kaWN1bGFyRXF1YXRpb24oXG4gICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICApXG4gICAgICAgICAgdmFyIGludGVyVXAgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgIGVxUCxcbiAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgIClcbiAgICAgICAgICB2YXIgaW50ZXJEdyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgIGVxV2FsbER3LFxuICAgICAgICAgICAgZXFQLFxuICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgKVxuICAgICAgICAgIHdhbGwuY29vcmRzID0gW2ludGVyVXAsIGludGVyRHddXG4gICAgICAgICAgZFdheSA9XG4gICAgICAgICAgICAnTScgK1xuICAgICAgICAgICAgaW50ZXJVcC54ICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICBpbnRlclVwLnkgK1xuICAgICAgICAgICAgJyBMJyArXG4gICAgICAgICAgICBpbnRlckR3LnggK1xuICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgIGludGVyRHcueSArXG4gICAgICAgICAgICAnICdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZXFQID0gdGhpcy5xU1ZHLnBlcnBlbmRpY3VsYXJFcXVhdGlvbihcbiAgICAgICAgICAgIGVxV2FsbFVwLFxuICAgICAgICAgICAgd2FsbC5zdGFydC54LFxuICAgICAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICAgIClcbiAgICAgICAgICAvLyB2YXIgcHJldmlvdXNXYWxsID0gd2FsbC5wYXJlbnQ7XG4gICAgICAgICAgLy8gICB2YXIgcHJldmlvdXNXYWxsU3RhcnQgPSBwcmV2aW91c1dhbGwuc3RhcnQ7XG4gICAgICAgICAgLy8gICB2YXIgcHJldmlvdXNXYWxsRW5kID0gcHJldmlvdXNXYWxsLmVuZDtcbiAgICAgICAgICBjb25zdCBhbmdsZVByZXZpb3VzV2FsbCA9IE1hdGguYXRhbjIoXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxFbmQueSAtIHByZXZpb3VzV2FsbFN0YXJ0LnksXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxFbmQueCAtIHByZXZpb3VzV2FsbFN0YXJ0LngsXG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHByZXZpb3VzV2FsbFRoaWNrWCA9XG4gICAgICAgICAgICAocHJldmlvdXNXYWxsLnRoaWNrIC8gMikgKiBNYXRoLnNpbihhbmdsZVByZXZpb3VzV2FsbClcbiAgICAgICAgICBjb25zdCBwcmV2aW91c1dhbGxUaGlja1kgPVxuICAgICAgICAgICAgKHByZXZpb3VzV2FsbC50aGljayAvIDIpICogTWF0aC5jb3MoYW5nbGVQcmV2aW91c1dhbGwpXG4gICAgICAgICAgY29uc3QgZXFQcmV2aW91c1dhbGxVcCA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICAgIHByZXZpb3VzV2FsbFN0YXJ0LnggKyBwcmV2aW91c1dhbGxUaGlja1gsXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxTdGFydC55IC0gcHJldmlvdXNXYWxsVGhpY2tZLFxuICAgICAgICAgICAgcHJldmlvdXNXYWxsRW5kLnggKyBwcmV2aW91c1dhbGxUaGlja1gsXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxFbmQueSAtIHByZXZpb3VzV2FsbFRoaWNrWSxcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgZXFQcmV2aW91c1dhbGxEdyA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICAgIHByZXZpb3VzV2FsbFN0YXJ0LnggLSBwcmV2aW91c1dhbGxUaGlja1gsXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxTdGFydC55ICsgcHJldmlvdXNXYWxsVGhpY2tZLFxuICAgICAgICAgICAgcHJldmlvdXNXYWxsRW5kLnggLSBwcmV2aW91c1dhbGxUaGlja1gsXG4gICAgICAgICAgICBwcmV2aW91c1dhbGxFbmQueSArIHByZXZpb3VzV2FsbFRoaWNrWSxcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGFuZ2xlUHJldmlvdXNXYWxsIC0gYW5nbGVXYWxsKSA+IDAuMDkpIHtcbiAgICAgICAgICAgIHZhciBpbnRlclVwID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgICAgZXFQcmV2aW91c1dhbGxVcCxcbiAgICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB2YXIgaW50ZXJEdyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgZXFXYWxsRHcsXG4gICAgICAgICAgICAgIGVxUHJldmlvdXNXYWxsRHcsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiAoZXFXYWxsVXAuQSA9PSBlcVByZXZpb3VzV2FsbFVwLkEpIHtcbiAgICAgICAgICAgICAgaW50ZXJVcCA9IHtcbiAgICAgICAgICAgICAgICB4OiB3YWxsLnN0YXJ0LnggKyB3YWxsVGhpY2tYLFxuICAgICAgICAgICAgICAgIHk6IHdhbGwuc3RhcnQueSAtIHdhbGxUaGlja1ksXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW50ZXJEdyA9IHtcbiAgICAgICAgICAgICAgICB4OiB3YWxsLnN0YXJ0LnggLSB3YWxsVGhpY2tYLFxuICAgICAgICAgICAgICAgIHk6IHdhbGwuc3RhcnQueSArIHdhbGxUaGlja1ksXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1pdGVyID0gdGhpcy5xU1ZHLmdhcChpbnRlclVwLCB7XG4gICAgICAgICAgICAgIHg6IHByZXZpb3VzV2FsbEVuZC54LFxuICAgICAgICAgICAgICB5OiBwcmV2aW91c1dhbGxFbmQueSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAobWl0ZXIgPiAxMDAwKSB7XG4gICAgICAgICAgICAgIHZhciBpbnRlclVwID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgICAgICAgICAgIGVxUCxcbiAgICAgICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgICAgICAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB2YXIgaW50ZXJEdyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgICBlcVAsXG4gICAgICAgICAgICAgICAgZXFXYWxsRHcsXG4gICAgICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGFuZ2xlUHJldmlvdXNXYWxsIC0gYW5nbGVXYWxsKSA8PSAwLjA5KSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJVcCA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgZXFQLFxuICAgICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB2YXIgaW50ZXJEdyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgICAgZXFQLFxuICAgICAgICAgICAgICBlcVdhbGxEdyxcbiAgICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICAgIHdhbGwuY29vcmRzID0gW2ludGVyVXAsIGludGVyRHddXG4gICAgICAgICAgZFdheSA9XG4gICAgICAgICAgICAnTScgK1xuICAgICAgICAgICAgaW50ZXJVcC54ICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICBpbnRlclVwLnkgK1xuICAgICAgICAgICAgJyBMJyArXG4gICAgICAgICAgICBpbnRlckR3LnggK1xuICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgIGludGVyRHcueSArXG4gICAgICAgICAgICAnICdcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdBTEwgRklOSVNIRURcbiAgICAgICAgaWYgKHdhbGwuY2hpbGQgPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBlcVAgPSB0aGlzLnFTVkcucGVycGVuZGljdWxhckVxdWF0aW9uKFxuICAgICAgICAgICAgZXFXYWxsVXAsXG4gICAgICAgICAgICB3YWxsLmVuZC54LFxuICAgICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgICApXG4gICAgICAgICAgdmFyIGludGVyVXAgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICBlcVdhbGxVcCxcbiAgICAgICAgICAgIGVxUCxcbiAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgIClcbiAgICAgICAgICB2YXIgaW50ZXJEdyA9IHRoaXMucVNWRy5pbnRlcnNlY3Rpb25PZkVxdWF0aW9ucyhcbiAgICAgICAgICAgIGVxV2FsbER3LFxuICAgICAgICAgICAgZXFQLFxuICAgICAgICAgICAgJ29iamVjdCcsXG4gICAgICAgICAgKVxuICAgICAgICAgIHdhbGwuY29vcmRzLnB1c2goaW50ZXJEdywgaW50ZXJVcClcbiAgICAgICAgICBkV2F5ID1cbiAgICAgICAgICAgIGRXYXkgK1xuICAgICAgICAgICAgJ0wnICtcbiAgICAgICAgICAgIGludGVyRHcueCArXG4gICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgaW50ZXJEdy55ICtcbiAgICAgICAgICAgICcgTCcgK1xuICAgICAgICAgICAgaW50ZXJVcC54ICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICBpbnRlclVwLnkgK1xuICAgICAgICAgICAgJyBaJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBlcVAgPSB0aGlzLnFTVkcucGVycGVuZGljdWxhckVxdWF0aW9uKFxuICAgICAgICAgICAgZXFXYWxsVXAsXG4gICAgICAgICAgICB3YWxsLmVuZC54LFxuICAgICAgICAgICAgd2FsbC5lbmQueSxcbiAgICAgICAgICApXG4gICAgICAgICAgLy8gdmFyIG5leHRXYWxsID0gd2FsbC5jaGlsZDtcbiAgICAgICAgICAvLyAgIHZhciBuZXh0V2FsbFN0YXJ0ID0gbmV4dFdhbGwuc3RhcnQ7XG4gICAgICAgICAgLy8gICB2YXIgbmV4dFdhbGxFbmQgPSBuZXh0V2FsbC5lbmQ7XG4gICAgICAgICAgY29uc3QgYW5nbGVOZXh0V2FsbCA9IE1hdGguYXRhbjIoXG4gICAgICAgICAgICBuZXh0V2FsbEVuZC55IC0gbmV4dFdhbGxTdGFydC55LFxuICAgICAgICAgICAgbmV4dFdhbGxFbmQueCAtIG5leHRXYWxsU3RhcnQueCxcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgbmV4dFdhbGxUaGlja1ggPSAobmV4dFdhbGwudGhpY2sgLyAyKSAqIE1hdGguc2luKGFuZ2xlTmV4dFdhbGwpXG4gICAgICAgICAgY29uc3QgbmV4dFdhbGxUaGlja1kgPSAobmV4dFdhbGwudGhpY2sgLyAyKSAqIE1hdGguY29zKGFuZ2xlTmV4dFdhbGwpXG4gICAgICAgICAgY29uc3QgZXFOZXh0V2FsbFVwID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgICAgbmV4dFdhbGxTdGFydC54ICsgbmV4dFdhbGxUaGlja1gsXG4gICAgICAgICAgICBuZXh0V2FsbFN0YXJ0LnkgLSBuZXh0V2FsbFRoaWNrWSxcbiAgICAgICAgICAgIG5leHRXYWxsRW5kLnggKyBuZXh0V2FsbFRoaWNrWCxcbiAgICAgICAgICAgIG5leHRXYWxsRW5kLnkgLSBuZXh0V2FsbFRoaWNrWSxcbiAgICAgICAgICApXG4gICAgICAgICAgY29uc3QgZXFOZXh0V2FsbER3ID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgICAgbmV4dFdhbGxTdGFydC54IC0gbmV4dFdhbGxUaGlja1gsXG4gICAgICAgICAgICBuZXh0V2FsbFN0YXJ0LnkgKyBuZXh0V2FsbFRoaWNrWSxcbiAgICAgICAgICAgIG5leHRXYWxsRW5kLnggLSBuZXh0V2FsbFRoaWNrWCxcbiAgICAgICAgICAgIG5leHRXYWxsRW5kLnkgKyBuZXh0V2FsbFRoaWNrWSxcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGFuZ2xlTmV4dFdhbGwgLSBhbmdsZVdhbGwpID4gMC4wOSkge1xuICAgICAgICAgICAgdmFyIGludGVyVXAgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgIGVxV2FsbFVwLFxuICAgICAgICAgICAgICBlcU5leHRXYWxsVXAsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdmFyIGludGVyRHcgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgIGVxV2FsbER3LFxuICAgICAgICAgICAgICBlcU5leHRXYWxsRHcsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiAoZXFXYWxsVXAuQSA9PSBlcU5leHRXYWxsVXAuQSkge1xuICAgICAgICAgICAgICBpbnRlclVwID0ge1xuICAgICAgICAgICAgICAgIHg6IHdhbGwuZW5kLnggKyB3YWxsVGhpY2tYLFxuICAgICAgICAgICAgICAgIHk6IHdhbGwuZW5kLnkgLSB3YWxsVGhpY2tZLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGludGVyRHcgPSB7XG4gICAgICAgICAgICAgICAgeDogd2FsbC5lbmQueCAtIHdhbGxUaGlja1gsXG4gICAgICAgICAgICAgICAgeTogd2FsbC5lbmQueSArIHdhbGxUaGlja1ksXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1pdGVyID0gdGhpcy5xU1ZHLmdhcChpbnRlclVwLCB7XG4gICAgICAgICAgICAgIHg6IG5leHRXYWxsU3RhcnQueCxcbiAgICAgICAgICAgICAgeTogbmV4dFdhbGxTdGFydC55LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChtaXRlciA+IDEwMDApIHtcbiAgICAgICAgICAgICAgdmFyIGludGVyVXAgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgICAgZXFXYWxsVXAsXG4gICAgICAgICAgICAgICAgZXFQLFxuICAgICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHZhciBpbnRlckR3ID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKFxuICAgICAgICAgICAgICAgIGVxV2FsbER3LFxuICAgICAgICAgICAgICAgIGVxUCxcbiAgICAgICAgICAgICAgICAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTWF0aC5hYnMoYW5nbGVOZXh0V2FsbCAtIGFuZ2xlV2FsbCkgPD0gMC4wOSkge1xuICAgICAgICAgICAgdmFyIGludGVyVXAgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgIGVxV2FsbFVwLFxuICAgICAgICAgICAgICBlcVAsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdmFyIGludGVyRHcgPSB0aGlzLnFTVkcuaW50ZXJzZWN0aW9uT2ZFcXVhdGlvbnMoXG4gICAgICAgICAgICAgIGVxV2FsbER3LFxuICAgICAgICAgICAgICBlcVAsXG4gICAgICAgICAgICAgICdvYmplY3QnLFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHdhbGwuY29vcmRzLnB1c2goaW50ZXJEdywgaW50ZXJVcClcbiAgICAgICAgICBkV2F5ID1cbiAgICAgICAgICAgIGRXYXkgK1xuICAgICAgICAgICAgJ0wnICtcbiAgICAgICAgICAgIGludGVyRHcueCArXG4gICAgICAgICAgICAnLCcgK1xuICAgICAgICAgICAgaW50ZXJEdy55ICtcbiAgICAgICAgICAgICcgTCcgK1xuICAgICAgICAgICAgaW50ZXJVcC54ICtcbiAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICBpbnRlclVwLnkgK1xuICAgICAgICAgICAgJyBaJ1xuICAgICAgICB9XG5cbiAgICAgICAgd2FsbC5ncmFwaCA9IHRoaXMuZWRpdG9yLm1ha2VXYWxsKGRXYXkpXG4gICAgICAgICQoJyNib3h3YWxsJykuYXBwZW5kKHdhbGwuZ3JhcGgpXG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlV2FsbDogKHdheSkgPT4ge1xuICAgICAgY29uc3Qgd2FsbFNjcmVlbiA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAncGF0aCcsIHtcbiAgICAgICAgZDogd2F5LFxuICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgZmlsbDogdGhpcy5jb2xvcldhbGwsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAxLFxuICAgICAgICAnc3Ryb2tlLWxpbmVjYXAnOiAnYnV0dCcsXG4gICAgICAgICdzdHJva2UtbGluZWpvaW4nOiAnbWl0ZXInLFxuICAgICAgICAnc3Ryb2tlLW1pdGVybGltaXQnOiA0LFxuICAgICAgICAnZmlsbC1ydWxlJzogJ25vbnplcm8nLFxuICAgICAgfSlcbiAgICAgIHJldHVybiB3YWxsU2NyZWVuXG4gICAgfSxcbiAgICBpbnZpc2libGVXYWxsOiAod2FsbFRvSW52aXNibGUgPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKCF3YWxsVG9JbnZpc2JsZSkge1xuICAgICAgICB3YWxsVG9JbnZpc2JsZSA9IHRoaXMuYmluZGVyLndhbGxcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ialdhbGwgPSB0aGlzLmVkaXRvci5vYmpGcm9tV2FsbCh3YWxsQmluZClcbiAgICAgIGlmIChvYmpXYWxsLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHdhbGxUb0ludmlzYmxlLnR5cGUgPSAnc2VwYXJhdGUnXG4gICAgICAgIHdhbGxUb0ludmlzYmxlLmJhY2tVcCA9IHdhbGxUb0ludmlzYmxlLnRoaWNrXG4gICAgICAgIHdhbGxUb0ludmlzYmxlLnRoaWNrID0gMC4wN1xuICAgICAgICB0aGlzLmVkaXRvci5hcmNoaXRlY3QodGhpcy5XQUxMUylcbiAgICAgICAgdGhpcy5tb2RlID0gJ3NlbGVjdF9tb2RlJ1xuICAgICAgICAkKCcjcGFuZWwnKS5zaG93KDIwMClcbiAgICAgICAgdGhpcy5zYXZlKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJyNib3hpbmZvJykuaHRtbChcbiAgICAgICAgICAnTGVzIG11cnMgY29udGVuYW50IGRlcyBwb3J0ZXMgb3UgZGVzIGZlbsOqdHJlcyBuZSBwZXV2ZW50IMOqdHJlIHVuZSBzw6lwYXJhdGlvbiAhJyxcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIHZpc2libGVXYWxsOiAod2FsbFRvSW52aXNibGUgPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKCF3YWxsVG9JbnZpc2JsZSkge1xuICAgICAgICB3YWxsVG9JbnZpc2JsZSA9IHRoaXMuYmluZGVyLndhbGxcbiAgICAgIH1cbiAgICAgIHdhbGxUb0ludmlzYmxlLnR5cGUgPSAnbm9ybWFsJ1xuICAgICAgd2FsbFRvSW52aXNibGUudGhpY2sgPSB3YWxsVG9JbnZpc2JsZS5iYWNrVXBcbiAgICAgIHdhbGxUb0ludmlzYmxlLmJhY2tVcCA9IGZhbHNlXG4gICAgICB0aGlzLmVkaXRvci5hcmNoaXRlY3QodGhpcy5XQUxMUylcbiAgICAgIHRoaXMubW9kZSA9ICdzZWxlY3RfbW9kZSdcbiAgICAgICQoJyNwYW5lbCcpLnNob3coMjAwKVxuICAgICAgdGhpcy5zYXZlKClcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSxcbiAgICBhcmNoaXRlY3Q6IChXQUxMUykgPT4ge1xuICAgICAgdGhpcy5lZGl0b3Iud2FsbHNDb21wdXRpbmcodGhpcy5XQUxMUylcbiAgICAgIGNvbnN0IFJvb21zID0gdGhpcy5xU1ZHLnBvbHlnb25pemUodGhpcy5XQUxMUylcbiAgICAgICQoJyNib3hSb29tJykuZW1wdHkoKVxuICAgICAgJCgnI2JveFN1cmZhY2UnKS5lbXB0eSgpXG4gICAgICB0aGlzLmVkaXRvci5yb29tTWFrZXIoUm9vbXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG4gICAgc3BsaXRXYWxsOiAod2FsbFRvU3BsaXQgPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKCF3YWxsVG9TcGxpdCkge1xuICAgICAgICB3YWxsVG9TcGxpdCA9IHRoaXMuYmluZGVyLndhbGxcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVxV2FsbCA9IHRoaXMuZWRpdG9yLmNyZWF0ZUVxdWF0aW9uRnJvbVdhbGwod2FsbFRvU3BsaXQpXG4gICAgICBjb25zdCB3YWxsVG9TcGxpdExlbmd0aCA9IHRoaXMucVNWRy5nYXAoXG4gICAgICAgIHdhbGxUb1NwbGl0LnN0YXJ0LFxuICAgICAgICB3YWxsVG9TcGxpdC5lbmQsXG4gICAgICApXG4gICAgICBjb25zdCBuZXdXYWxscyA9IFtdXG4gICAgICBmb3IgKHZhciBrIGluIHRoaXMuV0FMTFMpIHtcbiAgICAgICAgY29uc3QgZXEgPSB0aGlzLmVkaXRvci5jcmVhdGVFcXVhdGlvbkZyb21XYWxsKHRoaXMuV0FMTFNba10pXG4gICAgICAgIGNvbnN0IGludGVyID0gdGhpcy5xU1ZHLmludGVyc2VjdGlvbk9mRXF1YXRpb25zKGVxV2FsbCwgZXEsICdvYmonKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICBpbnRlci54LFxuICAgICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5zdGFydC54LFxuICAgICAgICAgICAgdGhpcy5iaW5kZXIud2FsbC5lbmQueCxcbiAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgKSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgaW50ZXIueSxcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLndhbGwuc3RhcnQueSxcbiAgICAgICAgICAgIHRoaXMuYmluZGVyLndhbGwuZW5kLnksXG4gICAgICAgICAgICAncm91bmQnLFxuICAgICAgICAgICkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgIGludGVyLngsXG4gICAgICAgICAgICB0aGlzLldBTExTW2tdLnN0YXJ0LngsXG4gICAgICAgICAgICB0aGlzLldBTExTW2tdLmVuZC54LFxuICAgICAgICAgICAgJ3JvdW5kJyxcbiAgICAgICAgICApICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICBpbnRlci55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5zdGFydC55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1trXS5lbmQueSxcbiAgICAgICAgICAgICdyb3VuZCcsXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRoaXMucVNWRy5nYXAod2FsbFRvU3BsaXQuc3RhcnQsIGludGVyKVxuICAgICAgICAgIGlmIChkaXN0YW5jZSA+IDUgJiYgZGlzdGFuY2UgPCB3YWxsVG9TcGxpdExlbmd0aCkge1xuICAgICAgICAgICAgbmV3V2FsbHMucHVzaCh7IGRpc3RhbmNlOiBkaXN0YW5jZSwgY29vcmRzOiBpbnRlciB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV3V2FsbHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gKGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKS50b0ZpeGVkKDIpXG4gICAgICB9KVxuICAgICAgbGV0IGluaXRDb29yZHMgPSB3YWxsVG9TcGxpdC5zdGFydFxuICAgICAgY29uc3QgaW5pdFRoaWNrID0gd2FsbFRvU3BsaXQudGhpY2tcbiAgICAgIC8vIENMRUFSIFRIRSBXQUxMIEJFRk9SRSBQSUVDRVMgUkUtQlVJTERFUlxuICAgICAgZm9yICh2YXIgayBpbiB0aGlzLldBTExTKSB7XG4gICAgICAgIGlmIChpc09iamVjdHNFcXVhbHModGhpcy5XQUxMU1trXS5jaGlsZCwgd2FsbFRvU3BsaXQpKSB7XG4gICAgICAgICAgdGhpcy5XQUxMU1trXS5jaGlsZCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3RzRXF1YWxzKHRoaXMuV0FMTFNba10ucGFyZW50LCB3YWxsVG9TcGxpdCkpIHtcbiAgICAgICAgICB0aGlzLldBTExTW2tdLnBhcmVudCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5XQUxMUy5zcGxpY2UodGhpcy5XQUxMUy5pbmRleE9mKHdhbGxUb1NwbGl0KSwgMSlcbiAgICAgIGxldCB3YWxsXG4gICAgICBmb3IgKHZhciBrIGluIG5ld1dhbGxzKSB7XG4gICAgICAgIHdhbGwgPSB0aGlzLmVkaXRvci53YWxsKFxuICAgICAgICAgIGluaXRDb29yZHMsXG4gICAgICAgICAgbmV3V2FsbHNba10uY29vcmRzLFxuICAgICAgICAgICdub3JtYWwnLFxuICAgICAgICAgIGluaXRUaGljayxcbiAgICAgICAgKVxuICAgICAgICB0aGlzLldBTExTLnB1c2god2FsbClcbiAgICAgICAgd2FsbC5jaGlsZCA9IFdBTExTW1dBTExTLmxlbmd0aF1cbiAgICAgICAgaW5pdENvb3JkcyA9IG5ld1dhbGxzW2tdLmNvb3Jkc1xuICAgICAgfVxuICAgICAgLy8gTEFTVCBXQUxMIC0+XG4gICAgICB3YWxsID0gdGhpcy5lZGl0b3Iud2FsbChpbml0Q29vcmRzLCB3YWxsVG9TcGxpdC5lbmQsICdub3JtYWwnLCBpbml0VGhpY2spXG4gICAgICB0aGlzLldBTExTLnB1c2god2FsbClcbiAgICAgIHRoaXMuZWRpdG9yLmFyY2hpdGVjdCh0aGlzLldBTExTKVxuICAgICAgdGhpcy5tb2RlID0gJ3NlbGVjdF9tb2RlJ1xuICAgICAgJCgnI3BhbmVsJykuc2hvdygyMDApXG4gICAgICB0aGlzLnNhdmUoKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9LFxuICAgIG5lYXJXYWxsTm9kZTogKHNuYXAsIHJhbmdlID0gSW5maW5pdHksIGV4Y2VwdCA9IFsnJ10pID0+IHtcbiAgICAgIGxldCBiZXN0XG4gICAgICBsZXQgYmVzdFdhbGxcbiAgICAgIGxldCBzY2FuXG4gICAgICBjb25zdCBpID0gMFxuICAgICAgbGV0IHNjYW5EaXN0YW5jZVxuICAgICAgbGV0IGJlc3REaXN0YW5jZSA9IEluZmluaXR5XG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRoaXMuV0FMTFMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgaWYgKGV4Y2VwdC5pbmRleE9mKHRoaXMuV0FMTFNba10pID09IC0xKSB7XG4gICAgICAgICAgc2NhblN0YXJ0ID0gdGhpcy5XQUxMU1trXS5zdGFydFxuICAgICAgICAgIHNjYW5FbmQgPSB0aGlzLldBTExTW2tdLmVuZFxuICAgICAgICAgIHNjYW5EaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKHNjYW5TdGFydCwgc25hcClcbiAgICAgICAgICBpZiAoc2NhbkRpc3RhbmNlIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBiZXN0ID0gc2NhblN0YXJ0XG4gICAgICAgICAgICBiZXN0RGlzdGFuY2UgPSBzY2FuRGlzdGFuY2VcbiAgICAgICAgICAgIGJlc3RXYWxsID0ga1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY2FuRGlzdGFuY2UgPSB0aGlzLnFTVkcubWVhc3VyZShzY2FuRW5kLCBzbmFwKVxuICAgICAgICAgIGlmIChzY2FuRGlzdGFuY2UgPCBiZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGJlc3QgPSBzY2FuRW5kXG4gICAgICAgICAgICBiZXN0RGlzdGFuY2UgPSBzY2FuRGlzdGFuY2VcbiAgICAgICAgICAgIGJlc3RXYWxsID0ga1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJlc3REaXN0YW5jZSA8PSByYW5nZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IGJlc3QueCxcbiAgICAgICAgICB5OiBiZXN0LnksXG4gICAgICAgICAgYmVzdFdhbGw6IGJlc3RXYWxsLFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIHJheUNhc3RpbmdXYWxsOiAoc25hcCkgPT4ge1xuICAgICAgLy8gVVNJTkcgV0FMTFMgU1VQRVIgV0FMTCBPQkpFQ1RTIEFSUkFZXG4gICAgICBjb25zdCB3YWxsTGlzdCA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuV0FMTFMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9seWdvbiA9IFtdXG4gICAgICAgIGZvciAobGV0IHBwID0gMDsgcHAgPCA0OyBwcCsrKSB7XG4gICAgICAgICAgcG9seWdvbi5wdXNoKHtcbiAgICAgICAgICAgIHg6IHRoaXMuV0FMTFNbaV0uY29vcmRzW3BwXS54LFxuICAgICAgICAgICAgeTogdGhpcy5XQUxMU1tpXS5jb29yZHNbcHBdLnksXG4gICAgICAgICAgfSkgLy8gRk9SIFpcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5xU1ZHLnJheUNhc3Rpbmcoc25hcCwgcG9seWdvbikpIHtcbiAgICAgICAgICB3YWxsTGlzdC5wdXNoKHRoaXMuV0FMTFNbaV0pIC8vIFJldHVybiBFREdFUyBJbmRleFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAod2FsbExpc3QubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAod2FsbExpc3QubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICByZXR1cm4gd2FsbExpc3RbMF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gd2FsbExpc3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3RpY2tPbldhbGw6IChzbmFwKSA9PiB7XG4gICAgICBpZiAodGhpcy5XQUxMUy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCB3YWxsRGlzdGFuY2UgPSBJbmZpbml0eVxuICAgICAgbGV0IHdhbGxTZWxlY3RlZCA9IHt9XG4gICAgICBsZXQgcmVzdWx0XG4gICAgICBpZiAodGhpcy5XQUxMUy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgV0FMTFMubGVuZ3RoOyBlKyspIHtcbiAgICAgICAgdmFyIGVxMSA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICB0aGlzLldBTExTW2VdLmNvb3Jkc1swXS54LFxuICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzBdLnksXG4gICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbM10ueCxcbiAgICAgICAgICB0aGlzLldBTExTW2VdLmNvb3Jkc1szXS55LFxuICAgICAgICApXG4gICAgICAgIHJlc3VsdDEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcTEsIHNuYXApXG4gICAgICAgIHZhciBlcTIgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMV0ueCxcbiAgICAgICAgICB0aGlzLldBTExTW2VdLmNvb3Jkc1sxXS55LFxuICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzJdLngsXG4gICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMl0ueSxcbiAgICAgICAgKVxuICAgICAgICByZXN1bHQyID0gdGhpcy5xU1ZHLm5lYXJQb2ludE9uRXF1YXRpb24oZXEyLCBzbmFwKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0MS5kaXN0YW5jZSA8IHdhbGxEaXN0YW5jZSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0MS54LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMF0ueCxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzNdLngsXG4gICAgICAgICAgKSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0MS55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMF0ueSxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzNdLnksXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICB3YWxsRGlzdGFuY2UgPSByZXN1bHQxLmRpc3RhbmNlXG4gICAgICAgICAgd2FsbFNlbGVjdGVkID0ge1xuICAgICAgICAgICAgd2FsbDogdGhpcy5XQUxMU1tlXSxcbiAgICAgICAgICAgIHg6IHJlc3VsdDEueCxcbiAgICAgICAgICAgIHk6IHJlc3VsdDEueSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiByZXN1bHQxLmRpc3RhbmNlLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0Mi5kaXN0YW5jZSA8IHdhbGxEaXN0YW5jZSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0Mi54LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMV0ueCxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzJdLngsXG4gICAgICAgICAgKSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0Mi55LFxuICAgICAgICAgICAgdGhpcy5XQUxMU1tlXS5jb29yZHNbMV0ueSxcbiAgICAgICAgICAgIHRoaXMuV0FMTFNbZV0uY29vcmRzWzJdLnksXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICB3YWxsRGlzdGFuY2UgPSByZXN1bHQyLmRpc3RhbmNlXG4gICAgICAgICAgd2FsbFNlbGVjdGVkID0ge1xuICAgICAgICAgICAgd2FsbDogdGhpcy5XQUxMU1tlXSxcbiAgICAgICAgICAgIHg6IHJlc3VsdDIueCxcbiAgICAgICAgICAgIHk6IHJlc3VsdDIueSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiByZXN1bHQyLmRpc3RhbmNlLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdnYgPSB0aGlzLmVkaXRvci5uZWFyVmVydGljZShzbmFwKVxuICAgICAgaWYgKHZ2LmRpc3RhbmNlIDwgd2FsbERpc3RhbmNlKSB7XG4gICAgICAgIHZhciBlcTEgPSB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgICAgdnYubnVtYmVyLmNvb3Jkc1swXS54LFxuICAgICAgICAgIHZ2Lm51bWJlci5jb29yZHNbMF0ueSxcbiAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzNdLngsXG4gICAgICAgICAgdnYubnVtYmVyLmNvb3Jkc1szXS55LFxuICAgICAgICApXG4gICAgICAgIHJlc3VsdDEgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcTEsIHZ2KVxuICAgICAgICB2YXIgZXEyID0gdGhpcy5xU1ZHLmNyZWF0ZUVxdWF0aW9uKFxuICAgICAgICAgIHZ2Lm51bWJlci5jb29yZHNbMV0ueCxcbiAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzFdLnksXG4gICAgICAgICAgdnYubnVtYmVyLmNvb3Jkc1syXS54LFxuICAgICAgICAgIHZ2Lm51bWJlci5jb29yZHNbMl0ueSxcbiAgICAgICAgKVxuICAgICAgICByZXN1bHQyID0gdGhpcy5xU1ZHLm5lYXJQb2ludE9uRXF1YXRpb24oZXEyLCB2dilcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlc3VsdDEuZGlzdGFuY2UgPCB3YWxsRGlzdGFuY2UgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihcbiAgICAgICAgICAgIHJlc3VsdDEueCxcbiAgICAgICAgICAgIHZ2Lm51bWJlci5jb29yZHNbMF0ueCxcbiAgICAgICAgICAgIHZ2Lm51bWJlci5jb29yZHNbM10ueCxcbiAgICAgICAgICApICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICByZXN1bHQxLnksXG4gICAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzBdLnksXG4gICAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzNdLnksXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICB3YWxsRGlzdGFuY2UgPSByZXN1bHQxLmRpc3RhbmNlXG4gICAgICAgICAgd2FsbFNlbGVjdGVkID0ge1xuICAgICAgICAgICAgd2FsbDogdnYubnVtYmVyLFxuICAgICAgICAgICAgeDogcmVzdWx0MS54LFxuICAgICAgICAgICAgeTogcmVzdWx0MS55LFxuICAgICAgICAgICAgZGlzdGFuY2U6IHJlc3VsdDEuZGlzdGFuY2UsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXN1bHQyLmRpc3RhbmNlIDwgd2FsbERpc3RhbmNlICYmXG4gICAgICAgICAgdGhpcy5xU1ZHLmJ0d24oXG4gICAgICAgICAgICByZXN1bHQyLngsXG4gICAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzFdLngsXG4gICAgICAgICAgICB2di5udW1iZXIuY29vcmRzWzJdLngsXG4gICAgICAgICAgKSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0Mi55LFxuICAgICAgICAgICAgdnYubnVtYmVyLmNvb3Jkc1sxXS55LFxuICAgICAgICAgICAgdnYubnVtYmVyLmNvb3Jkc1syXS55LFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FsbERpc3RhbmNlID0gcmVzdWx0Mi5kaXN0YW5jZVxuICAgICAgICAgIHdhbGxTZWxlY3RlZCA9IHtcbiAgICAgICAgICAgIHdhbGw6IHZ2Lm51bWJlcixcbiAgICAgICAgICAgIHg6IHJlc3VsdDIueCxcbiAgICAgICAgICAgIHk6IHJlc3VsdDIueSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiByZXN1bHQyLmRpc3RhbmNlLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdhbGxTZWxlY3RlZFxuICAgIH0sXG4gICAgb2JqRnJvbVdhbGw6ICh3YWxsLCB0eXBlT2JqID0gZmFsc2UpID0+IHtcbiAgICAgIC8vIFJFVFVSTiBPQkpEQVRBIElOREVYIExJU1QgRlJPTSBBTiBXQUxMXG4gICAgICBjb25zdCBvYmpMaXN0ID0gW11cbiAgICAgIGZvciAobGV0IHNjYW4gPSAwOyBzY2FuIDwgdGhpcy5PQkpEQVRBLmxlbmd0aDsgc2NhbisrKSB7XG4gICAgICAgIHZhciBzZWFyY2hcbiAgICAgICAgaWYgKHRoaXMuT0JKREFUQVtzY2FuXS5mYW1pbHkgPT0gJ2luV2FsbCcpIHtcbiAgICAgICAgICBjb25zdCBlcSA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgICAgIHdhbGwuc3RhcnQueSxcbiAgICAgICAgICAgIHdhbGwuZW5kLngsXG4gICAgICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgICAgIClcbiAgICAgICAgICBzZWFyY2ggPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcSwgdGhpcy5PQkpEQVRBW3NjYW5dKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHNlYXJjaC5kaXN0YW5jZSA8IDAuMDEgJiZcbiAgICAgICAgICAgIHRoaXMucVNWRy5idHduKHRoaXMuT0JKREFUQVtzY2FuXS54LCB3YWxsLnN0YXJ0LngsIHdhbGwuZW5kLngpICYmXG4gICAgICAgICAgICB0aGlzLnFTVkcuYnR3bih0aGlzLk9CSkRBVEFbc2Nhbl0ueSwgd2FsbC5zdGFydC55LCB3YWxsLmVuZC55KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgb2JqTGlzdC5wdXNoKHRoaXMuT0JKREFUQVtzY2FuXSlcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gV0FSTklORyAwLjAxIFRPIE5PIENPVU5UIE9CSkVDVCBPTiBMSU1JVFMgT0YgVEhFIEVER0UgISEhISEhISEhISEhIFVHTFkgQ09ERSggTU9VU0UgUFJFQ0lTSU9OKVxuICAgICAgICAgIC8vIFRSWSBXSVRIIEFOR0xFIE1BWUJFID8/P1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqTGlzdFxuICAgIH0sXG4gICAgY3JlYXRlRXF1YXRpb25Gcm9tV2FsbDogKHdhbGwpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnFTVkcuY3JlYXRlRXF1YXRpb24oXG4gICAgICAgIHdhbGwuc3RhcnQueCxcbiAgICAgICAgd2FsbC5zdGFydC55LFxuICAgICAgICB3YWxsLmVuZC54LFxuICAgICAgICB3YWxsLmVuZC55LFxuICAgICAgKVxuICAgIH0sXG4gICAgcmF5Q2FzdGluZ1dhbGxzOiAoc25hcCkgPT4ge1xuICAgICAgLy8gV0FMTFMgU1VQRVIgQVJSQVlcbiAgICAgIGNvbnN0IHdhbGxMaXN0ID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5XQUxMUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwb2x5Z29uID0gW11cbiAgICAgICAgZm9yIChsZXQgcHAgPSAwOyBwcCA8IDQ7IHBwKyspIHtcbiAgICAgICAgICBwb2x5Z29uLnB1c2goe1xuICAgICAgICAgICAgeDogdGhpcy5XQUxMU1tpXS5jb29yZHNbcHBdLngsXG4gICAgICAgICAgICB5OiB0aGlzLldBTExTW2ldLmNvb3Jkc1twcF0ueSxcbiAgICAgICAgICB9KSAvLyBGT1IgWlxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnFTVkcucmF5Q2FzdGluZyhzbmFwLCBwb2x5Z29uKSkge1xuICAgICAgICAgIHdhbGxMaXN0LnB1c2godGhpcy5XQUxMU1tpXSkgLy8gUmV0dXJuIEVER0VTIEluZGV4XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh3YWxsTGlzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh3YWxsTGlzdC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIHJldHVybiB3YWxsTGlzdFswXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB3YWxsTGlzdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBpbldhbGxSaWIyOiAod2FsbCwgb3B0aW9uID0gZmFsc2UpID0+IHtcbiAgICAgIGlmICghb3B0aW9uKSB7XG4gICAgICAgICQoJyNib3hSaWInKS5lbXB0eSgpXG4gICAgICB9XG4gICAgICByaWJNYXN0ZXIgPSBbXVxuICAgICAgY29uc3QgZW1wdHlBcnJheSA9IFtdXG4gICAgICByaWJNYXN0ZXIucHVzaChlbXB0eUFycmF5KVxuICAgICAgcmliTWFzdGVyLnB1c2goZW1wdHlBcnJheSlcbiAgICAgIGxldCBpbnRlclxuICAgICAgbGV0IGRpc3RhbmNlXG4gICAgICBsZXQgY3Jvc3NcbiAgICAgIGNvbnN0IGFuZ2xlVGV4dFZhbHVlID0gd2FsbC5hbmdsZSAqICgxODAgLyBNYXRoLlBJKVxuICAgICAgY29uc3Qgb2JqV2FsbCA9IHRoaXMuZWRpdG9yLm9iakZyb21XYWxsKHdhbGwpIC8vIExJU1QgT0JKIE9OIEVER0VcbiAgICAgIHJpYk1hc3RlclswXS5wdXNoKHtcbiAgICAgICAgd2FsbDogd2FsbCxcbiAgICAgICAgY3Jvc3NPYmo6IGZhbHNlLFxuICAgICAgICBzaWRlOiAndXAnLFxuICAgICAgICBjb29yZHM6IHdhbGwuY29vcmRzWzBdLFxuICAgICAgICBkaXN0YW5jZTogMCxcbiAgICAgIH0pXG4gICAgICByaWJNYXN0ZXJbMV0ucHVzaCh7XG4gICAgICAgIHdhbGw6IHdhbGwsXG4gICAgICAgIGNyb3NzT2JqOiBmYWxzZSxcbiAgICAgICAgc2lkZTogJ2Rvd24nLFxuICAgICAgICBjb29yZHM6IHdhbGwuY29vcmRzWzFdLFxuICAgICAgICBkaXN0YW5jZTogMCxcbiAgICAgIH0pXG4gICAgICBmb3IgKGNvbnN0IG9iIGluIG9ialdhbGwpIHtcbiAgICAgICAgY29uc3Qgb2JqVGFyZ2V0ID0gb2JqV2FsbFtvYl1cbiAgICAgICAgb2JqVGFyZ2V0LnVwID0gW1xuICAgICAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKHdhbGwuZXF1YXRpb25zLnVwLCBvYmpUYXJnZXQubGltaXRbMF0pLFxuICAgICAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKHdhbGwuZXF1YXRpb25zLnVwLCBvYmpUYXJnZXQubGltaXRbMV0pLFxuICAgICAgICBdXG4gICAgICAgIG9ialRhcmdldC5kb3duID0gW1xuICAgICAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKFxuICAgICAgICAgICAgd2FsbC5lcXVhdGlvbnMuZG93bixcbiAgICAgICAgICAgIG9ialRhcmdldC5saW1pdFswXSxcbiAgICAgICAgICApLFxuICAgICAgICAgIHRoaXMucVNWRy5uZWFyUG9pbnRPbkVxdWF0aW9uKFxuICAgICAgICAgICAgd2FsbC5lcXVhdGlvbnMuZG93bixcbiAgICAgICAgICAgIG9ialRhcmdldC5saW1pdFsxXSxcbiAgICAgICAgICApLFxuICAgICAgICBdXG5cbiAgICAgICAgZGlzdGFuY2UgPSB0aGlzLnFTVkcubWVhc3VyZSh3YWxsLmNvb3Jkc1swXSwgb2JqVGFyZ2V0LnVwWzBdKSAvIHRoaXMubWV0ZXJcbiAgICAgICAgcmliTWFzdGVyWzBdLnB1c2goe1xuICAgICAgICAgIHdhbGw6IHdhbGwsXG4gICAgICAgICAgY3Jvc3NPYmo6IG9iLFxuICAgICAgICAgIHNpZGU6ICd1cCcsXG4gICAgICAgICAgY29vcmRzOiBvYmpUYXJnZXQudXBbMF0sXG4gICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICAgIH0pXG4gICAgICAgIGRpc3RhbmNlID0gdGhpcy5xU1ZHLm1lYXN1cmUod2FsbC5jb29yZHNbMF0sIG9ialRhcmdldC51cFsxXSkgLyB0aGlzLm1ldGVyXG4gICAgICAgIHJpYk1hc3RlclswXS5wdXNoKHtcbiAgICAgICAgICB3YWxsOiB3YWxsLFxuICAgICAgICAgIGNyb3NzT2JqOiBvYixcbiAgICAgICAgICBzaWRlOiAndXAnLFxuICAgICAgICAgIGNvb3Jkczogb2JqVGFyZ2V0LnVwWzFdLFxuICAgICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZS50b0ZpeGVkKDIpLFxuICAgICAgICB9KVxuICAgICAgICBkaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKHdhbGwuY29vcmRzWzFdLCBvYmpUYXJnZXQuZG93blswXSkgLyB0aGlzLm1ldGVyXG4gICAgICAgIHJpYk1hc3RlclsxXS5wdXNoKHtcbiAgICAgICAgICB3YWxsOiB3YWxsLFxuICAgICAgICAgIGNyb3NzT2JqOiBvYixcbiAgICAgICAgICBzaWRlOiAnZG93bicsXG4gICAgICAgICAgY29vcmRzOiBvYmpUYXJnZXQuZG93blswXSxcbiAgICAgICAgICBkaXN0YW5jZTogZGlzdGFuY2UudG9GaXhlZCgyKSxcbiAgICAgICAgfSlcbiAgICAgICAgZGlzdGFuY2UgPSB0aGlzLnFTVkcubWVhc3VyZSh3YWxsLmNvb3Jkc1sxXSwgb2JqVGFyZ2V0LmRvd25bMV0pIC8gdGhpcy5tZXRlclxuICAgICAgICByaWJNYXN0ZXJbMV0ucHVzaCh7XG4gICAgICAgICAgd2FsbDogd2FsbCxcbiAgICAgICAgICBjcm9zc09iajogb2IsXG4gICAgICAgICAgc2lkZTogJ2Rvd24nLFxuICAgICAgICAgIGNvb3Jkczogb2JqVGFyZ2V0LmRvd25bMV0sXG4gICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBkaXN0YW5jZSA9IHRoaXMucVNWRy5tZWFzdXJlKHdhbGwuY29vcmRzWzBdLCB3YWxsLmNvb3Jkc1szXSkgLyB0aGlzLm1ldGVyXG4gICAgICByaWJNYXN0ZXJbMF0ucHVzaCh7XG4gICAgICAgIHdhbGw6IHdhbGwsXG4gICAgICAgIGNyb3NzT2JqOiBmYWxzZSxcbiAgICAgICAgc2lkZTogJ3VwJyxcbiAgICAgICAgY29vcmRzOiB3YWxsLmNvb3Jkc1szXSxcbiAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLFxuICAgICAgfSlcbiAgICAgIGRpc3RhbmNlID0gdGhpcy5xU1ZHLm1lYXN1cmUod2FsbC5jb29yZHNbMV0sIHdhbGwuY29vcmRzWzJdKSAvIHRoaXMubWV0ZXJcbiAgICAgIHJpYk1hc3RlclsxXS5wdXNoKHtcbiAgICAgICAgd2FsbDogd2FsbCxcbiAgICAgICAgY3Jvc3NPYmo6IGZhbHNlLFxuICAgICAgICBzaWRlOiAnZG93bicsXG4gICAgICAgIGNvb3Jkczogd2FsbC5jb29yZHNbMl0sXG4gICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZSxcbiAgICAgIH0pXG4gICAgICByaWJNYXN0ZXJbMF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gKGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKS50b0ZpeGVkKDIpXG4gICAgICB9KVxuICAgICAgcmliTWFzdGVyWzFdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZSkudG9GaXhlZCgyKVxuICAgICAgfSlcbiAgICAgIGZvciAoY29uc3QgdCBpbiByaWJNYXN0ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgbiA9IDE7IG4gPCByaWJNYXN0ZXJbdF0ubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IHRydWVcbiAgICAgICAgICBsZXQgc2hpZnQgPSAtNVxuICAgICAgICAgIGNvbnN0IHZhbHVlVGV4dCA9IE1hdGguYWJzKFxuICAgICAgICAgICAgcmliTWFzdGVyW3RdW24gLSAxXS5kaXN0YW5jZSAtIHJpYk1hc3Rlclt0XVtuXS5kaXN0YW5jZSxcbiAgICAgICAgICApXG4gICAgICAgICAgbGV0IGFuZ2xlVGV4dCA9IGFuZ2xlVGV4dFZhbHVlXG4gICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICBpZiAocmliTWFzdGVyW3RdW24gLSAxXS5zaWRlID09ICdkb3duJykge1xuICAgICAgICAgICAgICBzaGlmdCA9IC1zaGlmdCArIDEwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW5nbGVUZXh0ID4gODkgfHwgYW5nbGVUZXh0IDwgLTg5KSB7XG4gICAgICAgICAgICAgIGFuZ2xlVGV4dCAtPSAxODBcbiAgICAgICAgICAgICAgaWYgKHJpYk1hc3Rlclt0XVtuIC0gMV0uc2lkZSA9PSAnZG93bicpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCA9IC01XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hpZnQgPSAtc2hpZnQgKyAxMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAgICAgICAgICd0ZXh0JyxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGV4dCA9IHRoaXMucVNWRy5taWRkbGUoXG4gICAgICAgICAgICAgIHJpYk1hc3Rlclt0XVtuIC0gMV0uY29vcmRzLngsXG4gICAgICAgICAgICAgIHJpYk1hc3Rlclt0XVtuIC0gMV0uY29vcmRzLnksXG4gICAgICAgICAgICAgIHJpYk1hc3Rlclt0XVtuXS5jb29yZHMueCxcbiAgICAgICAgICAgICAgcmliTWFzdGVyW3RdW25dLmNvb3Jkcy55LFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIHN0YXJ0VGV4dC54KVxuICAgICAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIHN0YXJ0VGV4dC55ICsgc2hpZnQpXG4gICAgICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZm9udC1mYW1pbHknLCAncm9ib3RvJylcbiAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZScsICcjZmZmZmZmJylcbiAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQgPSB2YWx1ZVRleHQudG9GaXhlZCgyKVxuICAgICAgICAgICAgaWYgKHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQgPCAxKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZvbnQtc2l6ZScsICcwLjhlbScpXG4gICAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQgPSB0aGlzLnNpemVUZXh0W25dLnRleHRDb250ZW50LnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0udGV4dENvbnRlbnQubGVuZ3RoLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmb250LXNpemUnLCAnMWVtJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2l6ZVRleHRbbl0uc2V0QXR0cmlidXRlTlMobnVsbCwgJ3N0cm9rZS13aWR0aCcsICcwLjRweCcpXG4gICAgICAgICAgICB0aGlzLnNpemVUZXh0W25dLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyM2NjY2NjYnKVxuICAgICAgICAgICAgdGhpcy5zaXplVGV4dFtuXS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgICAgICAncm90YXRlKCcgK1xuICAgICAgICAgICAgICAgIGFuZ2xlVGV4dCArXG4gICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICBzdGFydFRleHQueCArXG4gICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICBzdGFydFRleHQueSArXG4gICAgICAgICAgICAgICAgJyknLFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAkKCcjYm94UmliJykuYXBwZW5kKHRoaXMuc2l6ZVRleHRbbl0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvYmoyRDogKFxuICAgICAgX2ZhbWlseSxcbiAgICAgIF9jbGFzc09iaixcbiAgICAgIF90eXBlLFxuICAgICAgX3BvcyxcbiAgICAgIF9hbmdsZSxcbiAgICAgIF9hbmdsZVNpZ24sXG4gICAgICBfc2l6ZSxcbiAgICAgIF9oaW5nZSA9ICdub3JtYWwnLFxuICAgICAgX3RoaWNrLFxuICAgICAgX3ZhbHVlLFxuICAgICkgPT4ge1xuICAgICAgbGV0IGFuZ2xlID0gX2FuZ2xlXG4gICAgICBsZXQgYW5nbGVTaWduID0gX2FuZ2xlU2lnblxuICAgICAgbGV0IGNsYXNzT2JqID0gX2NsYXNzT2JqIC8vIGRvb3IsIHdpbmRvdywgZW5lcmd5LCBzdGFpciwgbWVhc3VyZSwgdGV4dCA/XG4gICAgICBsZXQgZmFtaWx5ID0gX2ZhbWlseSAvLyBpbldhbGwsIHN0aWNrLCBjb2xsaXNpb24sIGZyZWVcbiAgICAgIGxldCBncmFwaCA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAnZycpXG4gICAgICBsZXQgaGVpZ2h0ID0gKF90aGljayAvIHRoaXMubWV0ZXIpLnRvRml4ZWQoMilcbiAgICAgIGxldCBoaW5nZSA9IF9oaW5nZSAvLyBub3JtYWwsIHJldmVyc2VcbiAgICAgIGxldCBsaW1pdCA9IFtdXG4gICAgICBsZXQgc2NhbGUgPSB7IHg6IDEsIHk6IDEgfVxuICAgICAgbGV0IHNpemUgPSBfc2l6ZVxuICAgICAgbGV0IHRoaWNrID0gX3RoaWNrXG4gICAgICBsZXQgdHlwZSA9IF90eXBlIC8vIHNpbXBsZSwgZG91YmxlLCBzaW1wbGVTbGlkZSwgYXBlcnR1cmUsIGRvdWJsZVNsaWRlLCBmaXhlZCwgc3dpdGNoLCBsYW1wLi4uLlxuICAgICAgbGV0IHZhbHVlID0gX3ZhbHVlICAvLyB2YWx1ZSBjYW4gYmUgXCJ0ZXh0IGxhYmVsXCIsIFwic3RlcCBudW1iZXIgaW4gc3RhaXJcIiwgZXRjLi4uXG4gICAgICBsZXQgd2lkdGggPSAoX3NpemUgLyB0aGlzLm1ldGVyKS50b0ZpeGVkKDIpXG4gICAgICBsZXQgeCA9IF9wb3MueFxuICAgICAgbGV0IHkgPSBfcG9zLnlcblxuICAgICAgbGV0IGNjID0gdGhpcy5jYXJwZW50cnlDYWxjKGNsYXNzT2JqLCB0eXBlLCBzaXplLCB0aGljaywgdmFsdWUpXG4gICAgICBsZXQgYmxhbmtcblxuICAgICAgZm9yIChsZXQgdHQgPSAwOyB0dCA8IGNjLmxlbmd0aDsgdHQrKykge1xuICAgICAgICBpZiAoY2NbdHRdLnBhdGgpIHtcbiAgICAgICAgICBibGFuayA9IHRoaXMucVNWRy5jcmVhdGUoJ25vbmUnLCAncGF0aCcsIHtcbiAgICAgICAgICAgIGQ6IGNjW3R0XS5wYXRoLFxuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDEsXG4gICAgICAgICAgICBmaWxsOiBjY1t0dF0uZmlsbCxcbiAgICAgICAgICAgIHN0cm9rZTogY2NbdHRdLnN0cm9rZSxcbiAgICAgICAgICAgICdzdHJva2UtZGFzaGFycmF5JzogY2NbdHRdLnN0cm9rZURhc2hBcnJheSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChjY1t0dF0udGV4dCkge1xuICAgICAgICAgIGJsYW5rID0gdGhpcy5xU1ZHLmNyZWF0ZSgnbm9uZScsICd0ZXh0Jywge1xuICAgICAgICAgICAgeDogY2NbdHRdLngsXG4gICAgICAgICAgICB5OiBjY1t0dF0ueSxcbiAgICAgICAgICAgICdmb250LXNpemUnOiBjY1t0dF0uZm9udFNpemUsXG4gICAgICAgICAgICBzdHJva2U6IGNjW3R0XS5zdHJva2UsXG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogY2NbdHRdLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ3JvYm90bycsXG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIGZpbGw6IGNjW3R0XS5maWxsLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgYmxhbmtbMF0udGV4dENvbnRlbnQgPSBjY1t0dF0udGV4dFxuICAgICAgICB9XG4gICAgICAgIGdyYXBoLmFwcGVuZChibGFuaylcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmJveCA9IGdyYXBoLmdldCgwKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgYmJveC54ID0gYmJveC54ICogdGhpcy5zY2FsZUZhY3RvciAtIHRoaXMub2Zmc2V0LmxlZnQgKiB0aGlzLnNjYWxlRmFjdG9yICsgdGhpcy5vcmlnaW5YX3ZpZXdib3hcbiAgICAgIGJib3gueSA9IGJib3gueSAqIHRoaXMuc2NhbGVGYWN0b3IgLSB0aGlzLm9mZnNldC50b3AgKiB0aGlzLnNjYWxlRmFjdG9yICsgdGhpcy5vcmlnaW5ZX3ZpZXdib3hcbiAgICAgIGJib3gub3JpZ2luID0geyB4OiB0aGlzLngsIHk6IHRoaXMueSB9XG5cbiAgICAgIGNvbnN0IHJlYWxCYm94ID0gW1xuICAgICAgICB7IHg6IC1zaXplIC8gMiwgeTogLXRoaWNrIC8gMiB9LFxuICAgICAgICB7IHg6IHNpemUgLyAyLCB5OiAtdGhpY2sgLyAyIH0sXG4gICAgICAgIHsgeDogc2l6ZSAvIDIsIHk6IHRoaWNrIC8gMiB9LFxuICAgICAgICB7IHg6IC1zaXplIC8gMiwgeTogdGhpY2sgLyAyIH0sXG4gICAgICBdXG4gICAgICBpZiAoZmFtaWx5ID09ICdieU9iamVjdCcpIHtcbiAgICAgICAgZmFtaWx5ID0gY2MuZmFtaWx5XG4gICAgICB9XG5cbiAgICAgIC8vIGNjLnBhcmFtcy53aWR0aCA/IChzaXplID0gY2MucGFyYW1zLndpZHRoKSA6ICh0aGlzLnNpemUgPSBzaXplKVxuICAgICAgLy8gY2MucGFyYW1zLmhlaWdodCA/ICh0aGljayA9IGNjLnBhcmFtcy5oZWlnaHQpIDogKHRoaXMudGhpY2sgPSB0aGljaylcbiAgICAgIGNjLnBhcmFtcy53aWR0aCA9IHNpemVcbiAgICAgIGNjLnBhcmFtcy5oZWlnaHQgPSB0aGlja1xuXG4gICAgICBjb25zdCBwYXJhbXMgPSBjYy5wYXJhbXMgLy8gKGJpbmRCb3gsIG1vdmUsIHJlc2l6ZSwgcm90YXRlKVxuXG4gICAgICAvLyBUaGlzIGZ1bmN0aW9uIHNlZW1zIGxpa2UgaXQgd2FudHMgdG8gbW9kaWZ5IHRoZSBpbnN0YW5jZSByZXR1cm5lZCBpbiBgb2JqMkRgXG4gICAgICAvLyB3aGlsZSBhbHNvIGRvaW5nIHNvbWUgb3RoZXIgY29udGV4dCBzcGVjaWZpYyB3b3JrXG4gICAgICBjb25zdCB1cGRhdGVGYWN0b3J5ID0gZnVuY3Rpb24gKG1ldGVyLCBzY2FsZUZhY3Rvciwgb2Zmc2V0LCBvcmlnaW5YX3ZpZXdib3gsIG9yaWdpbllfdmlld2JveCwgY2FycGVudHJ5Q2FsYykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgdGhpcy53aWR0aCA9ICh0aGlzLnNpemUgLyBtZXRlcikudG9GaXhlZCgyKVxuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMudGhpY2sgLyBtZXRlcikudG9GaXhlZCgyKVxuXG4gICAgICAgICAgY29uc3QgY2MgPSBjYXJwZW50cnlDYWxjKFxuICAgICAgICAgICAgdGhpcy5jbGFzc09iaixcbiAgICAgICAgICAgIHRoaXMudHlwZSxcbiAgICAgICAgICAgIHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIHRoaXMudGhpY2ssXG4gICAgICAgICAgICB0aGlzLnZhbHVlXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgZm9yIChsZXQgdHQgPSAwOyB0dCA8IGNjLmxlbmd0aDsgdHQrKykge1xuICAgICAgICAgICAgaWYgKGNjW3R0XS5wYXRoKSB7XG4gICAgICAgICAgICAgIHRoaXMuZ3JhcGguZmluZCgncGF0aCcpW3R0XS5zZXRBdHRyaWJ1dGUoJ2QnLCBjY1t0dF0ucGF0aClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIHRoaXMuZ3JhcGguZmluZCgndGV4dCcpLmNvbnRleHQudGV4dENvbnRlbnQgPSBjY1t0dF0udGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBoaW5nZVN0YXR1cyA9IHRoaXMuaGluZ2UgLy8gbm9ybWFsIC0gcmV2ZXJzZVxuICAgICAgICAgIGxldCBoaW5nZVVwZGF0ZVxuXG4gICAgICAgICAgaWYgKGhpbmdlU3RhdHVzID09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICBoaW5nZVVwZGF0ZSA9IDFcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGluZ2VVcGRhdGUgPSAtMVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ3JhcGguYXR0cih7XG4gICAgICAgICAgICB0cmFuc2Zvcm06XG4gICAgICAgICAgICAgICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgIHRoaXMueCArXG4gICAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICAgIHRoaXMueSArXG4gICAgICAgICAgICAgICcpIHJvdGF0ZSgnICtcbiAgICAgICAgICAgICAgdGhpcy5hbmdsZSArXG4gICAgICAgICAgICAgICcsMCwwKSBzY2FsZSgnICtcbiAgICAgICAgICAgICAgaGluZ2VVcGRhdGUgK1xuICAgICAgICAgICAgICAnLCAxKScsXG4gICAgICAgICAgfSlcbiAgICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5ncmFwaC5nZXQoMCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICBiYm94LnggPSBiYm94LnggKiBzY2FsZUZhY3RvciAtIG9mZnNldC5sZWZ0ICogc2NhbGVGYWN0b3IgKyBvcmlnaW5YX3ZpZXdib3hcbiAgICAgICAgICBiYm94LnkgPSBiYm94LnkgKiBzY2FsZUZhY3RvciAtIG9mZnNldC50b3AgKiBzY2FsZUZhY3RvciArIG9yaWdpbllfdmlld2JveFxuICAgICAgICAgIGJib3gub3JpZ2luID0geyB4OiB0aGlzLngsIHk6IHRoaXMueSB9XG5cbiAgICAgICAgICB0aGlzLmJib3ggPSBiYm94XG5cbiAgICAgICAgICBpZiAodGhpcy5jbGFzc09iaiA9PSAndGV4dCcgJiYgdGhpcy5hbmdsZSA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94ID0gW1xuICAgICAgICAgICAgICB7IHg6IHRoaXMuYmJveC54LCB5OiB0aGlzLmJib3gueSB9LFxuICAgICAgICAgICAgICB7IHg6IHRoaXMuYmJveC54ICsgdGhpcy5iYm94LndpZHRoLCB5OiB0aGlzLmJib3gueSB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5iYm94LnggKyB0aGlzLmJib3gud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogdGhpcy5iYm94LnkgKyB0aGlzLmJib3guaGVpZ2h0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7IHg6IHRoaXMuYmJveC54LCB5OiB0aGlzLmJib3gueSArIHRoaXMuYmJveC5oZWlnaHQgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuYmJveC53aWR0aFxuICAgICAgICAgICAgdGhpcy50aGljayA9IHRoaXMuYmJveC5oZWlnaHRcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnJlYWxCYm94ID0gW1xuICAgICAgICAgICAgeyB4OiAtdGhpcy5zaXplIC8gMiwgeTogLXRoaXMudGhpY2sgLyAyIH0sXG4gICAgICAgICAgICB7IHg6IHRoaXMuc2l6ZSAvIDIsIHk6IC10aGlzLnRoaWNrIC8gMiB9LFxuICAgICAgICAgICAgeyB4OiB0aGlzLnNpemUgLyAyLCB5OiB0aGlzLnRoaWNrIC8gMiB9LFxuICAgICAgICAgICAgeyB4OiAtdGhpcy5zaXplIC8gMiwgeTogdGhpcy50aGljayAvIDIgfSxcbiAgICAgICAgICBdXG4gICAgICAgICAgY29uc3QgbmV3UmVhbEJib3ggPSBbXG4gICAgICAgICAgICB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICBdXG4gICAgICAgICAgY29uc3QgYW5nbGVSYWRpYW4gPSAtdGhpcy5hbmdsZSAqIChNYXRoLlBJIC8gMTgwKVxuICAgICAgICAgIG5ld1JlYWxCYm94WzBdLnggPVxuICAgICAgICAgICAgdGhpcy5yZWFsQmJveFswXS55ICogTWF0aC5zaW4oYW5nbGVSYWRpYW4pICtcbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbMF0ueCAqIE1hdGguY29zKGFuZ2xlUmFkaWFuKSArXG4gICAgICAgICAgICB0aGlzLnhcbiAgICAgICAgICBuZXdSZWFsQmJveFsxXS54ID1cbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbMV0ueSAqIE1hdGguc2luKGFuZ2xlUmFkaWFuKSArXG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94WzFdLnggKiBNYXRoLmNvcyhhbmdsZVJhZGlhbikgK1xuICAgICAgICAgICAgdGhpcy54XG4gICAgICAgICAgbmV3UmVhbEJib3hbMl0ueCA9XG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94WzJdLnkgKiBNYXRoLnNpbihhbmdsZVJhZGlhbikgK1xuICAgICAgICAgICAgdGhpcy5yZWFsQmJveFsyXS54ICogTWF0aC5jb3MoYW5nbGVSYWRpYW4pICtcbiAgICAgICAgICAgIHRoaXMueFxuICAgICAgICAgIG5ld1JlYWxCYm94WzNdLnggPVxuICAgICAgICAgICAgdGhpcy5yZWFsQmJveFszXS55ICogTWF0aC5zaW4oYW5nbGVSYWRpYW4pICtcbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbM10ueCAqIE1hdGguY29zKGFuZ2xlUmFkaWFuKSArXG4gICAgICAgICAgICB0aGlzLnhcbiAgICAgICAgICBuZXdSZWFsQmJveFswXS55ID1cbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbMF0ueSAqIE1hdGguY29zKGFuZ2xlUmFkaWFuKSAtXG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94WzBdLnggKiBNYXRoLnNpbihhbmdsZVJhZGlhbikgK1xuICAgICAgICAgICAgdGhpcy55XG4gICAgICAgICAgbmV3UmVhbEJib3hbMV0ueSA9XG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94WzFdLnkgKiBNYXRoLmNvcyhhbmdsZVJhZGlhbikgLVxuICAgICAgICAgICAgdGhpcy5yZWFsQmJveFsxXS54ICogTWF0aC5zaW4oYW5nbGVSYWRpYW4pICtcbiAgICAgICAgICAgIHRoaXMueVxuICAgICAgICAgIG5ld1JlYWxCYm94WzJdLnkgPVxuICAgICAgICAgICAgdGhpcy5yZWFsQmJveFsyXS55ICogTWF0aC5jb3MoYW5nbGVSYWRpYW4pIC1cbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbMl0ueCAqIE1hdGguc2luKGFuZ2xlUmFkaWFuKSArXG4gICAgICAgICAgICB0aGlzLnlcbiAgICAgICAgICBuZXdSZWFsQmJveFszXS55ID1cbiAgICAgICAgICAgIHRoaXMucmVhbEJib3hbM10ueSAqIE1hdGguY29zKGFuZ2xlUmFkaWFuKSAtXG4gICAgICAgICAgICB0aGlzLnJlYWxCYm94WzNdLnggKiBNYXRoLnNpbihhbmdsZVJhZGlhbikgK1xuICAgICAgICAgICAgdGhpcy55XG4gICAgICAgICAgdGhpcy5yZWFsQmJveCA9IG5ld1JlYWxCYm94XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYW5nbGUsXG4gICAgICAgIGFuZ2xlU2lnbixcbiAgICAgICAgYmJveCxcbiAgICAgICAgY2xhc3NPYmosXG4gICAgICAgIGZhbWlseSxcbiAgICAgICAgZ3JhcGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgaGluZ2UsXG4gICAgICAgIGxpbWl0LFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHJlYWxCYm94LFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgdGhpY2ssXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHVwZGF0ZTogdXBkYXRlRmFjdG9yeShcbiAgICAgICAgICB0aGlzLm1ldGVyLFxuICAgICAgICAgIHRoaXMuc2NhbGVGYWN0b3IsXG4gICAgICAgICAgdGhpcy5vZmZzZXQsXG4gICAgICAgICAgdGhpcy5vcmlnaW5YX3ZpZXdib3gsXG4gICAgICAgICAgdGhpcy5vcmlnaW5ZX3ZpZXdib3gsXG4gICAgICAgICAgdGhpcy5jYXJwZW50cnlDYWxjLmJpbmQodGhpcylcbiAgICAgICAgKSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgfVxuICAgIH0sXG4gICAgcm9vbU1ha2VyOiAoUm9vbXMpID0+IHtcbiAgICAgIGdsb2JhbEFyZWEgPSAwXG4gICAgICBjb25zdCBvbGRWZXJ0ZXhOdW1iZXIgPSBbXVxuICAgICAgaWYgKFJvb21zLnBvbHlnb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRoaXMuUk9PTSA9IFtdXG4gICAgICB9XG4gICAgICBmb3IgKHZhciBwcCA9IDA7IHBwIDwgUm9vbXMucG9seWdvbnMubGVuZ3RoOyBwcCsrKSB7XG4gICAgICAgIGxldCBmb3VuZFJvb20gPSBmYWxzZVxuICAgICAgICB2YXIgcm9vbUlkXG4gICAgICAgIGZvciAodmFyIHJyID0gMDsgcnIgPCB0aGlzLlJPT00ubGVuZ3RoOyBycisrKSB7XG4gICAgICAgICAgcm9vbUlkID0gcnJcbiAgICAgICAgICBsZXQgY291bnRDb29yZHMgPSBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzLmxlbmd0aFxuICAgICAgICAgIHZhciBkaWZmQ29vcmRzID0gdGhpcy5xU1ZHLmRpZmZPYmpJbnRvQXJyYXkoXG4gICAgICAgICAgICBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzLFxuICAgICAgICAgICAgdGhpcy5ST09NW3JyXS5jb29yZHMsXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmIChSb29tcy5wb2x5Z29uc1twcF0ud2F5Lmxlbmd0aCA9PSB0aGlzLlJPT01bcnJdLndheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmRpZmZBcnJheShSb29tcy5wb2x5Z29uc1twcF0ud2F5LCB0aGlzLlJPT01bcnJdLndheSlcbiAgICAgICAgICAgICAgICAubGVuZ3RoID09IDAgfHxcbiAgICAgICAgICAgICAgZGlmZkNvb3JkcyA9PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY291bnRDb29yZHMgPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChSb29tcy5wb2x5Z29uc1twcF0ud2F5Lmxlbmd0aCA9PSB0aGlzLlJPT01bcnJdLndheS5sZW5ndGggKyAxKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5kaWZmQXJyYXkoUm9vbXMucG9seWdvbnNbcHBdLndheSwgdGhpcy5ST09NW3JyXS53YXkpXG4gICAgICAgICAgICAgICAgLmxlbmd0aCA9PSAxIHx8XG4gICAgICAgICAgICAgIGRpZmZDb29yZHMgPT0gMlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvdW50Q29vcmRzID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoUm9vbXMucG9seWdvbnNbcHBdLndheS5sZW5ndGggPT0gdGhpcy5ST09NW3JyXS53YXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcuZGlmZkFycmF5KFJvb21zLnBvbHlnb25zW3BwXS53YXksIHRoaXMuUk9PTVtycl0ud2F5KVxuICAgICAgICAgICAgICAgIC5sZW5ndGggPT0gMVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvdW50Q29vcmRzID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY291bnRDb29yZHMgPT0gMCkge1xuICAgICAgICAgICAgZm91bmRSb29tID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5ST09NW3JyXS5hcmVhID0gUm9vbXMucG9seWdvbnNbcHBdLmFyZWFcbiAgICAgICAgICAgIHRoaXMuUk9PTVtycl0uaW5zaWRlID0gUm9vbXMucG9seWdvbnNbcHBdLmluc2lkZVxuICAgICAgICAgICAgdGhpcy5ST09NW3JyXS5jb29yZHMgPSBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzXG4gICAgICAgICAgICB0aGlzLlJPT01bcnJdLmNvb3Jkc091dHNpZGUgPSBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzT3V0c2lkZVxuICAgICAgICAgICAgdGhpcy5ST09NW3JyXS53YXkgPSBSb29tcy5wb2x5Z29uc1twcF0ud2F5XG4gICAgICAgICAgICB0aGlzLlJPT01bcnJdLmNvb3Jkc0luc2lkZSA9IFJvb21zLnBvbHlnb25zW3BwXS5jb29yZHNJbnNpZGVcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZm91bmRSb29tKSB7XG4gICAgICAgICAgdGhpcy5ST09NLnB1c2goe1xuICAgICAgICAgICAgY29vcmRzOiBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzLFxuICAgICAgICAgICAgY29vcmRzT3V0c2lkZTogUm9vbXMucG9seWdvbnNbcHBdLmNvb3Jkc091dHNpZGUsXG4gICAgICAgICAgICBjb29yZHNJbnNpZGU6IFJvb21zLnBvbHlnb25zW3BwXS5jb29yZHNJbnNpZGUsXG4gICAgICAgICAgICBpbnNpZGU6IFJvb21zLnBvbHlnb25zW3BwXS5pbnNpZGUsXG4gICAgICAgICAgICB3YXk6IFJvb21zLnBvbHlnb25zW3BwXS53YXksXG4gICAgICAgICAgICBhcmVhOiBSb29tcy5wb2x5Z29uc1twcF0uYXJlYSxcbiAgICAgICAgICAgIHN1cmZhY2U6ICcnLFxuICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICBjb2xvcjogJ2dyYWRpZW50V2hpdGUnLFxuICAgICAgICAgICAgc2hvd1N1cmZhY2U6IHRydWUsXG4gICAgICAgICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9TcGxpY2UgPSBbXVxuICAgICAgZm9yICh2YXIgcnIgPSAwOyByciA8IHRoaXMuUk9PTS5sZW5ndGg7IHJyKyspIHtcbiAgICAgICAgbGV0IGZvdW5kID0gdHJ1ZVxuICAgICAgICBmb3IgKHZhciBwcCA9IDA7IHBwIDwgUm9vbXMucG9seWdvbnMubGVuZ3RoOyBwcCsrKSB7XG4gICAgICAgICAgbGV0IGNvdW50Um9vbSA9IHRoaXMuUk9PTVtycl0uY29vcmRzLmxlbmd0aFxuICAgICAgICAgIHZhciBkaWZmQ29vcmRzID0gdGhpcy5xU1ZHLmRpZmZPYmpJbnRvQXJyYXkoXG4gICAgICAgICAgICBSb29tcy5wb2x5Z29uc1twcF0uY29vcmRzLFxuICAgICAgICAgICAgdGhpcy5ST09NW3JyXS5jb29yZHMsXG4gICAgICAgICAgKVxuICAgICAgICAgIGlmIChSb29tcy5wb2x5Z29uc1twcF0ud2F5Lmxlbmd0aCA9PSB0aGlzLlJPT01bcnJdLndheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5xU1ZHLmRpZmZBcnJheShSb29tcy5wb2x5Z29uc1twcF0ud2F5LCB0aGlzLlJPT01bcnJdLndheSlcbiAgICAgICAgICAgICAgICAubGVuZ3RoID09IDAgfHxcbiAgICAgICAgICAgICAgZGlmZkNvb3JkcyA9PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY291bnRSb29tID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoUm9vbXMucG9seWdvbnNbcHBdLndheS5sZW5ndGggPT0gdGhpcy5ST09NW3JyXS53YXkubGVuZ3RoICsgMSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnFTVkcuZGlmZkFycmF5KFJvb21zLnBvbHlnb25zW3BwXS53YXksIHRoaXMuUk9PTVtycl0ud2F5KVxuICAgICAgICAgICAgICAgIC5sZW5ndGggPT0gMSB8fFxuICAgICAgICAgICAgICBkaWZmQ29vcmRzID09IDJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb3VudFJvb20gPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChSb29tcy5wb2x5Z29uc1twcF0ud2F5Lmxlbmd0aCA9PSB0aGlzLlJPT01bcnJdLndheS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMucVNWRy5kaWZmQXJyYXkoUm9vbXMucG9seWdvbnNbcHBdLndheSwgdGhpcy5ST09NW3JyXS53YXkpXG4gICAgICAgICAgICAgICAgLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY291bnRSb29tID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY291bnRSb29tID09IDApIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgdG9TcGxpY2UucHVzaChycilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0b1NwbGljZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiIC0gYVxuICAgICAgfSlcbiAgICAgIGZvciAobGV0IHNzID0gMDsgc3MgPCB0b1NwbGljZS5sZW5ndGg7IHNzKyspIHtcbiAgICAgICAgdGhpcy5ST09NLnNwbGljZSh0b1NwbGljZVtzc10sIDEpXG4gICAgICB9XG4gICAgICAkKCcjYm94Um9vbScpLmVtcHR5KClcbiAgICAgICQoJyNib3hTdXJmYWNlJykuZW1wdHkoKVxuICAgICAgJCgnI2JveEFyZWEnKS5lbXB0eSgpXG4gICAgICBmb3IgKHZhciByciA9IDA7IHJyIDwgdGhpcy5ST09NLmxlbmd0aDsgcnIrKykge1xuICAgICAgICBpZiAodGhpcy5ST09NW3JyXS5hY3Rpb24gPT0gJ2FkZCcpIHtcbiAgICAgICAgICBnbG9iYWxBcmVhID0gZ2xvYmFsQXJlYSArIHRoaXMuUk9PTVtycl0uYXJlYVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF0aFN1cmZhY2UgPSB0aGlzLlJPT01bcnJdLmNvb3Jkc1xuICAgICAgICBsZXQgcGF0aENyZWF0ZSA9ICdNJyArIHBhdGhTdXJmYWNlWzBdLnggKyAnLCcgKyBwYXRoU3VyZmFjZVswXS55XG4gICAgICAgIGZvciAobGV0IHAgPSAxOyBwIDwgcGF0aFN1cmZhY2UubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICBwYXRoQ3JlYXRlID1cbiAgICAgICAgICAgIHBhdGhDcmVhdGUgKyAnICcgKyAnTCcgKyBwYXRoU3VyZmFjZVtwXS54ICsgJywnICsgcGF0aFN1cmZhY2VbcF0ueVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLlJPT01bcnJdLmluc2lkZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5zID0gMDsgaW5zIDwgdGhpcy5ST09NW3JyXS5pbnNpZGUubGVuZ3RoOyBpbnMrKykge1xuICAgICAgICAgICAgcGF0aENyZWF0ZSA9XG4gICAgICAgICAgICAgIHBhdGhDcmVhdGUgK1xuICAgICAgICAgICAgICAnIE0nICtcbiAgICAgICAgICAgICAgUm9vbXMucG9seWdvbnNbdGhpcy5ST09NW3JyXS5pbnNpZGVbaW5zXV0uY29vcmRzW1xuICAgICAgICAgICAgICAgIFJvb21zLnBvbHlnb25zW3RoaXMuUk9PTVtycl0uaW5zaWRlW2luc11dLmNvb3Jkcy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgIF0ueCArXG4gICAgICAgICAgICAgICcsJyArXG4gICAgICAgICAgICAgIFJvb21zLnBvbHlnb25zW3RoaXMuUk9PTVtycl0uaW5zaWRlW2luc11dLmNvb3Jkc1tcbiAgICAgICAgICAgICAgICBSb29tcy5wb2x5Z29uc1t0aGlzLlJPT01bcnJdLmluc2lkZVtpbnNdXS5jb29yZHMubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICBdLnlcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIGxldCBmcmVlID1cbiAgICAgICAgICAgICAgICBSb29tcy5wb2x5Z29uc1t0aGlzLlJPT01bcnJdLmluc2lkZVtpbnNdXS5jb29yZHMubGVuZ3RoIC0gMjtcbiAgICAgICAgICAgICAgZnJlZSA+IC0xO1xuICAgICAgICAgICAgICBmcmVlLS1cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBwYXRoQ3JlYXRlID1cbiAgICAgICAgICAgICAgICBwYXRoQ3JlYXRlICtcbiAgICAgICAgICAgICAgICAnIEwnICtcbiAgICAgICAgICAgICAgICBSb29tcy5wb2x5Z29uc1t0aGlzLlJPT01bcnJdLmluc2lkZVtpbnNdXS5jb29yZHNbZnJlZV0ueCArXG4gICAgICAgICAgICAgICAgJywnICtcbiAgICAgICAgICAgICAgICBSb29tcy5wb2x5Z29uc1t0aGlzLlJPT01bcnJdLmluc2lkZVtpbnNdXS5jb29yZHNbZnJlZV0ueVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnFTVkcuY3JlYXRlKCdib3hSb29tJywgJ3BhdGgnLCB7XG4gICAgICAgICAgZDogcGF0aENyZWF0ZSxcbiAgICAgICAgICBmaWxsOiAndXJsKCMnICsgdGhpcy5ST09NW3JyXS5jb2xvciArICcpJyxcbiAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogMSxcbiAgICAgICAgICBzdHJva2U6ICdub25lJyxcbiAgICAgICAgICAnZmlsbC1ydWxlJzogJ2V2ZW5vZGQnLFxuICAgICAgICAgIGNsYXNzOiAncm9vbScsXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5xU1ZHLmNyZWF0ZSgnYm94U3VyZmFjZScsICdwYXRoJywge1xuICAgICAgICAgIGQ6IHBhdGhDcmVhdGUsXG4gICAgICAgICAgZmlsbDogJyNmZmYnLFxuICAgICAgICAgICdmaWxsLW9wYWNpdHknOiAxLFxuICAgICAgICAgIHN0cm9rZTogJ25vbmUnLFxuICAgICAgICAgICdmaWxsLXJ1bGUnOiAnZXZlbm9kZCcsXG4gICAgICAgICAgY2xhc3M6ICdyb29tJyxcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBjZW50cm9pZCA9IHRoaXMucVNWRy5wb2x5Z29uVmlzdWFsQ2VudGVyKHRoaXMuUk9PTVtycl0pXG5cbiAgICAgICAgaWYgKHRoaXMuUk9PTVtycl0ubmFtZSAhPSAnJykge1xuICAgICAgICAgIHZhciBzdHlsZWQgPSB7IGNvbG9yOiAnIzM0MzkzOCcgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuUk9PTVtycl0uY29sb3IgPT0gJ2dyYWRpZW50QmxhY2snIHx8XG4gICAgICAgICAgICB0aGlzLlJPT01bcnJdLmNvbG9yID09ICdncmFkaWVudEJsdWUnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzdHlsZWQuY29sb3IgPSAnd2hpdGUnXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucVNWRy50ZXh0T25EaXYodGhpcy5ST09NW3JyXS5uYW1lLCBjZW50cm9pZCwgc3R5bGVkLCAnYm94QXJlYScpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ST09NW3JyXS5uYW1lICE9ICcnKSB7XG4gICAgICAgICAgY2VudHJvaWQueSA9IGNlbnRyb2lkLnkgKyAyMFxuICAgICAgICB9XG4gICAgICAgIGxldCBhcmVhID1cbiAgICAgICAgICAodGhpcy5ST09NW3JyXS5hcmVhIC8gKHRoaXMubWV0ZXIgKiB0aGlzLm1ldGVyKSkudG9GaXhlZCgyKSArICcgbcKyJ1xuICAgICAgICB2YXIgc3R5bGVkID0ge1xuICAgICAgICAgIGNvbG9yOiAnIzM0MzkzOCcsXG4gICAgICAgICAgZm9udFNpemU6ICcxMi41cHgnLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLlJPT01bcnJdLnN1cmZhY2UgIT0gJycpIHtcbiAgICAgICAgICBzdHlsZWQuZm9udFdlaWdodCA9ICdib2xkJ1xuICAgICAgICAgIGFyZWEgPSB0aGlzLlJPT01bcnJdLnN1cmZhY2UgKyAnIG3CsidcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5ST09NW3JyXS5jb2xvciA9PSAnZ3JhZGllbnRCbGFjaycgfHxcbiAgICAgICAgICB0aGlzLlJPT01bcnJdLmNvbG9yID09ICdncmFkaWVudEJsdWUnXG4gICAgICAgICkge1xuICAgICAgICAgIHN0eWxlZC5jb2xvciA9ICd3aGl0ZSdcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ST09NW3JyXS5zaG93U3VyZmFjZSkge1xuICAgICAgICAgIHRoaXMucVNWRy50ZXh0T25EaXYoYXJlYSwgY2VudHJvaWQsIHN0eWxlZCwgJ2JveEFyZWEnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZ2xvYmFsQXJlYSA8PSAwKSB7XG4gICAgICAgIGdsb2JhbEFyZWEgPSAwXG4gICAgICAgICQoJyNhcmVhVmFsdWUnKS5odG1sKCcnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnI2FyZWFWYWx1ZScpLmh0bWwoXG4gICAgICAgICAgJzxpIGNsYXNzPVwiZmEgZmEtbWFwLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+ICcgK1xuICAgICAgICAgICAgKGdsb2JhbEFyZWEgLyAzNjAwKS50b0ZpeGVkKDEpICtcbiAgICAgICAgICAgICcgbcKyJyxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0sXG4gICAgcmF5Q2FzdGluZ1Jvb206IChwb2ludCkgPT4ge1xuICAgICAgY29uc3QgeCA9IHBvaW50LngsXG4gICAgICAgIHkgPSBwb2ludC55XG4gICAgICBjb25zdCByb29tR3JvdXAgPSBbXVxuICAgICAgZm9yIChsZXQgcG9seWdvbiA9IDA7IHBvbHlnb24gPCB0aGlzLlJPT00ubGVuZ3RoOyBwb2x5Z29uKyspIHtcbiAgICAgICAgY29uc3QgaW5zaWRlID0gdGhpcy5xU1ZHLnJheUNhc3RpbmcocG9pbnQsIHRoaXMuUk9PTVtwb2x5Z29uXS5jb29yZHMpXG5cbiAgICAgICAgaWYgKGluc2lkZSkge1xuICAgICAgICAgIHJvb21Hcm91cC5wdXNoKHBvbHlnb24pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyb29tR3JvdXAubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgYmVzdEFyZWEgPSB0aGlzLlJPT01bcm9vbUdyb3VwWzBdXS5hcmVhXG4gICAgICAgIGxldCByb29tVGFyZ2V0XG4gICAgICAgIGZvciAobGV0IHNpeiA9IDA7IHNpeiA8IHJvb21Hcm91cC5sZW5ndGg7IHNpeisrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuUk9PTVtyb29tR3JvdXBbc2l6XV0uYXJlYSA8PSBiZXN0QXJlYSkge1xuICAgICAgICAgICAgYmVzdEFyZWEgPSB0aGlzLlJPT01bcm9vbUdyb3VwW3Npel1dLmFyZWFcbiAgICAgICAgICAgIHJvb21UYXJnZXQgPSB0aGlzLlJPT01bcm9vbUdyb3VwW3Npel1dXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb29tVGFyZ2V0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIG5lYXJWZXJ0aWNlOiAoc25hcCwgcmFuZ2UgPSAxMDAwMCkgPT4ge1xuICAgICAgbGV0IGJlc3REaXN0YW5jZSA9IEluZmluaXR5XG4gICAgICBsZXQgYmVzdFZlcnRpY2VcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5XQUxMUy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkaXN0YW5jZTEgPSB0aGlzLnFTVkcuZ2FwKHNuYXAsIHtcbiAgICAgICAgICB4OiB0aGlzLldBTExTW2ldLnN0YXJ0LngsXG4gICAgICAgICAgeTogdGhpcy5XQUxMU1tpXS5zdGFydC55LFxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBkaXN0YW5jZTIgPSB0aGlzLnFTVkcuZ2FwKHNuYXAsIHtcbiAgICAgICAgICB4OiB0aGlzLldBTExTW2ldLmVuZC54LFxuICAgICAgICAgIHk6IHRoaXMuV0FMTFNbaV0uZW5kLnksXG4gICAgICAgIH0pXG4gICAgICAgIGlmIChkaXN0YW5jZTEgPCBkaXN0YW5jZTIgJiYgZGlzdGFuY2UxIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgYmVzdERpc3RhbmNlID0gZGlzdGFuY2UxXG4gICAgICAgICAgYmVzdFZlcnRpY2UgPSB7XG4gICAgICAgICAgICBudW1iZXI6IHRoaXMuV0FMTFNbaV0sXG4gICAgICAgICAgICB4OiB0aGlzLldBTExTW2ldLnN0YXJ0LngsXG4gICAgICAgICAgICB5OiB0aGlzLldBTExTW2ldLnN0YXJ0LnksXG4gICAgICAgICAgICBkaXN0YW5jZTogTWF0aC5zcXJ0KGJlc3REaXN0YW5jZSksXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkaXN0YW5jZTIgPCBkaXN0YW5jZTEgJiYgZGlzdGFuY2UyIDwgYmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgYmVzdERpc3RhbmNlID0gZGlzdGFuY2UyXG4gICAgICAgICAgYmVzdFZlcnRpY2UgPSB7XG4gICAgICAgICAgICBudW1iZXI6IHRoaXMuV0FMTFNbaV0sXG4gICAgICAgICAgICB4OiB0aGlzLldBTExTW2ldLmVuZC54LFxuICAgICAgICAgICAgeTogdGhpcy5XQUxMU1tpXS5lbmQueSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBNYXRoLnNxcnQoYmVzdERpc3RhbmNlKSxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChiZXN0RGlzdGFuY2UgPCByYW5nZSAqIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBiZXN0VmVydGljZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBuZWFyV2FsbDogKHNuYXAsIHJhbmdlID0gSW5maW5pdHkpID0+IHtcbiAgICAgIGxldCB3YWxsRGlzdGFuY2UgPSBJbmZpbml0eVxuICAgICAgbGV0IHdhbGxTZWxlY3RlZCA9IHt9XG4gICAgICBsZXQgcmVzdWx0XG4gICAgICBpZiAodGhpcy5XQUxMUy5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdGhpcy5XQUxMUy5sZW5ndGg7IGUrKykge1xuICAgICAgICBjb25zdCBlcSA9IHRoaXMucVNWRy5jcmVhdGVFcXVhdGlvbihcbiAgICAgICAgICB0aGlzLldBTExTW2VdLnN0YXJ0LngsXG4gICAgICAgICAgdGhpcy5XQUxMU1tlXS5zdGFydC55LFxuICAgICAgICAgIHRoaXMuV0FMTFNbZV0uZW5kLngsXG4gICAgICAgICAgdGhpcy5XQUxMU1tlXS5lbmQueSxcbiAgICAgICAgKVxuICAgICAgICByZXN1bHQgPSB0aGlzLnFTVkcubmVhclBvaW50T25FcXVhdGlvbihlcSwgc25hcClcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlc3VsdC5kaXN0YW5jZSA8IHdhbGxEaXN0YW5jZSAmJlxuICAgICAgICAgIHRoaXMucVNWRy5idHduKFxuICAgICAgICAgICAgcmVzdWx0LngsXG4gICAgICAgICAgICB0aGlzLldBTExTW2VdLnN0YXJ0LngsXG4gICAgICAgICAgICB0aGlzLldBTExTW2VdLmVuZC54LFxuICAgICAgICAgICkgJiZcbiAgICAgICAgICB0aGlzLnFTVkcuYnR3bihyZXN1bHQueSwgdGhpcy5XQUxMU1tlXS5zdGFydC55LCB0aGlzLldBTExTW2VdLmVuZC55KVxuICAgICAgICApIHtcbiAgICAgICAgICB3YWxsRGlzdGFuY2UgPSByZXN1bHQuZGlzdGFuY2VcbiAgICAgICAgICB3YWxsU2VsZWN0ZWQgPSB7XG4gICAgICAgICAgICB3YWxsOiB0aGlzLldBTExTW2VdLFxuICAgICAgICAgICAgeDogcmVzdWx0LngsXG4gICAgICAgICAgICB5OiByZXN1bHQueSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiByZXN1bHQuZGlzdGFuY2UsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB2diA9IHRoaXMuZWRpdG9yLm5lYXJWZXJ0aWNlKHNuYXApXG4gICAgICBpZiAodnYuZGlzdGFuY2UgPCB3YWxsRGlzdGFuY2UpIHtcbiAgICAgICAgd2FsbERpc3RhbmNlID0gdnYuZGlzdGFuY2VcbiAgICAgICAgd2FsbFNlbGVjdGVkID0ge1xuICAgICAgICAgIHdhbGw6IHZ2Lm51bWJlcixcbiAgICAgICAgICB4OiB2di54LFxuICAgICAgICAgIHk6IHZ2LnksXG4gICAgICAgICAgZGlzdGFuY2U6IHZ2LmRpc3RhbmNlLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAod2FsbERpc3RhbmNlIDw9IHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB3YWxsU2VsZWN0ZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd1NjYWxlQm94OiAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5ST09NLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1pblgsIG1pblksIG1heFgsIG1heFlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLldBTExTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHB4ID0gdGhpcy5XQUxMU1tpXS5zdGFydC54XG4gICAgICAgICAgdmFyIHB5ID0gdGhpcy5XQUxMU1tpXS5zdGFydC55XG4gICAgICAgICAgaWYgKCFpIHx8IHB4IDwgbWluWCkge1xuICAgICAgICAgICAgbWluWCA9IHB4XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaSB8fCBweSA8IG1pblkpIHtcbiAgICAgICAgICAgIG1pblkgPSBweVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWkgfHwgcHggPiBtYXhYKSB7XG4gICAgICAgICAgICBtYXhYID0gcHhcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpIHx8IHB5ID4gbWF4WSkge1xuICAgICAgICAgICAgbWF4WSA9IHB5XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBweCA9IHRoaXMuV0FMTFNbaV0uZW5kLnhcbiAgICAgICAgICB2YXIgcHkgPSB0aGlzLldBTExTW2ldLmVuZC55XG4gICAgICAgICAgaWYgKCFpIHx8IHB4IDwgbWluWCkge1xuICAgICAgICAgICAgbWluWCA9IHB4XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaSB8fCBweSA8IG1pblkpIHtcbiAgICAgICAgICAgIG1pblkgPSBweVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWkgfHwgcHggPiBtYXhYKSB7XG4gICAgICAgICAgICBtYXhYID0gcHhcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpIHx8IHB5ID4gbWF4WSkge1xuICAgICAgICAgICAgbWF4WSA9IHB5XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdpZHRoID0gbWF4WCAtIG1pblhcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbWF4WSAtIG1pbllcblxuICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gKChtYXhYIC0gbWluWCkgLyB0aGlzLm1ldGVyKS50b0ZpeGVkKDIpXG4gICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gKChtYXhZIC0gbWluWSkgLyB0aGlzLm1ldGVyKS50b0ZpeGVkKDIpXG5cbiAgICAgICAgbGV0IHNpZGVSaWdodCA9ICdtJyArIChtYXhYICsgNDApICsgJywnICsgbWluWVxuICAgICAgICBzaWRlUmlnaHQgPSBzaWRlUmlnaHQgKyAnIGw2MCwwIG0tNDAsMTAgbDEwLC0xMCBsMTAsMTAgbS0xMCwtMTAnXG4gICAgICAgIHNpZGVSaWdodCA9IHNpZGVSaWdodCArICcgbDAsJyArIGhlaWdodFxuICAgICAgICBzaWRlUmlnaHQgPSBzaWRlUmlnaHQgKyAnIG0tMzAsMCBsNjAsMCBtLTQwLC0xMCBsMTAsMTAgbDEwLC0xMCdcblxuICAgICAgICBzaWRlUmlnaHQgPSBzaWRlUmlnaHQgKyAnTScgKyBtaW5YICsgJywnICsgKG1pblkgLSA0MClcbiAgICAgICAgc2lkZVJpZ2h0ID0gc2lkZVJpZ2h0ICsgJyBsMCwtNjAgbTEwLDQwIGwtMTAsLTEwIGwxMCwtMTAgbS0xMCwxMCdcbiAgICAgICAgc2lkZVJpZ2h0ID0gc2lkZVJpZ2h0ICsgJyBsJyArIHdpZHRoICsgJywwJ1xuICAgICAgICBzaWRlUmlnaHQgPSBzaWRlUmlnaHQgKyAnIG0wLDMwIGwwLC02MCBtLTEwLDQwIGwxMCwtMTAgbC0xMCwtMTAnXG5cbiAgICAgICAgJCgnI2JveFNjYWxlJykuZW1wdHkoKVxuXG4gICAgICAgIHRoaXMucVNWRy5jcmVhdGUoJ2JveFNjYWxlJywgJ3BhdGgnLCB7XG4gICAgICAgICAgZDogc2lkZVJpZ2h0LFxuICAgICAgICAgIHN0cm9rZTogJyM1NTUnLFxuICAgICAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMC4zLFxuICAgICAgICAgICdzdHJva2UtbGluZWNhcCc6ICdidXR0JyxcbiAgICAgICAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ21pdGVyJyxcbiAgICAgICAgICAnc3Ryb2tlLW1pdGVybGltaXQnOiA0LFxuICAgICAgICAgICdmaWxsLXJ1bGUnOiAnbm9uemVybycsXG4gICAgICAgIH0pXG5cbiAgICAgICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAndGV4dCcsXG4gICAgICAgIClcbiAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIG1heFggKyA3MClcbiAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneScsIChtYXhZICsgbWluWSkgLyAyICsgMzUpXG4gICAgICAgIHRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnIzU1NScpXG4gICAgICAgIHRleHQuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgIHRleHQudGV4dENvbnRlbnQgPSBsYWJlbEhlaWdodCArICcgbSdcbiAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgJ3JvdGF0ZSgyNzAgJyArIChtYXhYICsgNzApICsgJywnICsgKG1heFkgKyBtaW5ZKSAvIDIgKyAnKScsXG4gICAgICAgIClcbiAgICAgICAgJCgnI2JveFNjYWxlJykuYXBwZW5kKHRleHQpXG5cbiAgICAgICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAndGV4dCcsXG4gICAgICAgIClcbiAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAneCcsIChtYXhYICsgbWluWCkgLyAyKVxuICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd5JywgbWluWSAtIDk1KVxuICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyM1NTUnKVxuICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZU5TKG51bGwsICd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICB0ZXh0LnRleHRDb250ZW50ID0gbGFiZWxXaWR0aCArICcgbSdcbiAgICAgICAgJCgnI2JveFNjYWxlJykuYXBwZW5kKHRleHQpXG4gICAgICB9XG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiBEb21SZWFkeShmbiwgY29udGV4dCkge1xuICBmdW5jdGlvbiBvblJlYWR5KGV2ZW50KSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBvblJlYWR5KVxuICAgIGZuLmNhbGwoY29udGV4dCwgZXZlbnQpXG4gIH1cblxuICBmdW5jdGlvbiBvblJlYWR5SWUoZXZlbnQpIHtcbiAgICBpZiAod2luZG93LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIHdpbmRvdy5kZXRhY2hFdmVudCgnb25yZWFkeXN0YXRlY2hhbmdlJywgb25SZWFkeUllKVxuICAgICAgZm4uY2FsbChjb250ZXh0LCBldmVudClcbiAgICB9XG4gIH1cblxuICA7KHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBvblJlYWR5LCBmYWxzZSkpIHx8XG4gICAgKHdpbmRvdy5hdHRhY2hFdmVudCAmJlxuICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBvblJlYWR5SWUsIGZhbHNlKSlcbn1cblxuY29uc3QgaW5zdCA9IG5ldyBBcHBsaWNhdGlvbigpXG5Eb21SZWFkeShmdW5jdGlvbiAoKSB7XG4gIGluc3QuaW5pdGlhbGl6ZSgpXG59KVxuXG53aW5kb3cuRmxvb3JwbGFuID0gaW5zdFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scoped.js":
/*!***********************!*\
  !*** ./src/scoped.js ***!
  \***********************/
/*! exports provided: exportFloorplan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exportFloorplan\", function() { return exportFloorplan; });\nfunction exportFloorplan() {\n  console.log(this.HISTORY[this.HISTORY.length - 1]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NvcGVkLmpzPzAzZDgiXSwibmFtZXMiOlsiZXhwb3J0Rmxvb3JwbGFuIiwiY29uc29sZSIsImxvZyIsIkhJU1RPUlkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxTQUFTQSxlQUFlLEdBQUk7RUFDakNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEQiLCJmaWxlIjoiLi9zcmMvc2NvcGVkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGV4cG9ydEZsb29ycGxhbiAoKSB7XG4gIGNvbnNvbGUubG9nKHRoaXMuSElTVE9SWVt0aGlzLkhJU1RPUlkubGVuZ3RoIC0gMV0pXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scoped.js\n");

/***/ })

/******/ });